System design document for Multiplaya

  Version: 1

  Date 2012-04-26

  Author Niklas Andreasson, Niklas Logren, Jonathan Orrö, Felix Willebrand Westin

This version overrides all previous versions.


1 Introduction

1.1 Design goals
The design should be loosey coupled, and follow the Model-View-Controller pattern.
It should be testable, and allow for easy networking.


1.2 Definitions, acronyms and abbreviations
FPS - Frames per second.
GUI - Graphical User Interface
Host - The computer which hosts the game, and keeps track of all players (among other things).
Client - The computer(s) which connect to the host.
MVC - Model-View-Controller, a design pattern.


2 System design

2.1 Overview 
The design follows the Model-View-Controller pattern.
The application will be run in two threads: One for the game, and one for the network.
The network thread will lie and listen for data constantly, and update the main game as needed.


2.1.1 The Model
The model is where the game state is saved, and all calculations are performed.

The entire game state is represented here, most notably the map and all physical objects (characters and bullets).
All mutable things, i.e. the physical objects, are saved in the WorldData class, which is used for communicating
with other parts of the program. The physics engine exists in the World class.

Everything is stored and calculated using the physics framework Box2D. The physical objects available consists of 
Characters or Bullets, which are both represented using (x,y)-coordinates and a force vector.

The World class main functionality is in the exec() function. This essentially performs all calculations, which includes
applying the force vectors on the objects to make them move, and executing collision checks. 

2.1.1 The Controller and The View
The controller handles input and changing of the game state, while the view represents the actual window and graphics of the game.

The main loop is located in the controller. This is essentially what calls everything else and decides who does what, when.
As for the view: we have a main class called Window, which has several Screens in a list. These include the Main Menu, the
pause menu, the join game screen and the actual game. The controller keeps track of which screen is currently seleted, and
calls the appropriate draw method in its loop.

The WorldView is one of the previously mentioned screens, and arguably the most important one. All bullets and characters has
graphical representations, which are stored in WorldView. Each graphical representation has a reference to its model counterpart,
from where it retrieves its coordinates and other information needed to display it. We are using the graphical framework SFML for
storing the sprites of characters, and for handling the actual window.



-------------------------------------------------------------------------------------------------------------------------




2.2 Software decomposition

2.2.1 General
The application is decomposed into the following modules:

controller - keeps track of which state we're in, and handles input.
view - Handles the window, and draws the game to the screen.
model - Handles the game world, and performs all necessary physic checks.
services - contains several subsystems.


2.2.2 Decomposition into subsystems
The project has several subsystems, all located within the folder "services".

services/confighandler - Handles the loading of configuration files.
services/networkhandler - Handles all networking.
services/resourcehandler - Handles all resources, i.e. textures.


2.2.2 Layering
The application uses a client - server system for the network part. One player chooses to 
host a game as a server, other players can then connect to him in order to play with each other.

The server keeps a list of all the clients. The clients sends important data to the server at a 
regular pace. Data like position in the world, if they are shooting etc. The server then takes this information,
calculates what needs to be calculated like if a player is hit by a bullet, and then sends it all back to the 
clients. 


2.2.3 Dependency analysis
We have performed dependency analysis using Visual Studio Feature Pack. We're actively working to keep dependencies down.
See attached file "5-dependencyAnalysis.png".


2.3 Concurrency issues
The application consists of two threads, one for the game loop and one for housing the NetworkHandler.
The NetworkHandler thread communicates with the main thread using the WorldData class, which contains all information
which is relevant (e.g. the position and rotation of all objects). The WorldData class is locked using a mutex
when it is being accessed.


2.4 Persistent data management
Persistent configuration files are stored and accessed using the ConfigHandler class.


2.5 Access control and security
N/A


2.6 Boundary conditions 
N/A


3 References

"1-overview.png" - gives a brief overview of the program's fundamental parts.
"2-model.png" shows how the model part of our game is structured.
"3-controllerView.png" displays in detail the controller and view, and how they're connected.
"4-gameUML.png" gives an overview of the whole of the actual game, excluding menus and such stuff.
"5-dependencyAnalysis.png" is an image of all our dependencies.