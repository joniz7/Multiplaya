<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">SoundBuffer.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_SOUNDBUFFER_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_SOUNDBUFFER_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/System/Time.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 <span class="keyword">namespace </span>priv
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042     <span class="keyword">class </span>SoundFile;
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keyword">class </span>Sound;
<a name="l00046"></a>00046 <span class="keyword">class </span>InputStream;
<a name="l00047"></a>00047 
<a name="l00052"></a><a class="code" href="classsf_1_1SoundBuffer.htm">00052</a> <span class="keyword">class </span>SFML_AUDIO_API <a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>
<a name="l00053"></a>00053 {
<a name="l00054"></a>00054 <span class="keyword">public</span> :
<a name="l00055"></a>00055 
<a name="l00060"></a>00060     <a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>();
<a name="l00061"></a>00061 
<a name="l00068"></a>00068     <a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>&amp; copy);
<a name="l00069"></a>00069 
<a name="l00074"></a>00074     ~<a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>();
<a name="l00075"></a>00075 
<a name="l00090"></a>00090     <span class="keywordtype">bool</span> loadFromFile(<span class="keyword">const</span> std::string&amp; filename);
<a name="l00091"></a>00091 
<a name="l00107"></a>00107     <span class="keywordtype">bool</span> loadFromMemory(<span class="keyword">const</span> <span class="keywordtype">void</span>* data, std::size_t sizeInBytes);
<a name="l00108"></a>00108 
<a name="l00123"></a>00123     <span class="keywordtype">bool</span> loadFromStream(<a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">InputStream</a>&amp; stream);
<a name="l00124"></a>00124 
<a name="l00141"></a>00141     <span class="keywordtype">bool</span> loadFromSamples(<span class="keyword">const</span> Int16* samples, std::size_t sampleCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sampleRate);
<a name="l00142"></a>00142 
<a name="l00157"></a>00157     <span class="keywordtype">bool</span> saveToFile(<span class="keyword">const</span> std::string&amp; filename) <span class="keyword">const</span>;
<a name="l00158"></a>00158 
<a name="l00171"></a>00171     <span class="keyword">const</span> Int16* getSamples() <span class="keyword">const</span>;
<a name="l00172"></a>00172 
<a name="l00184"></a>00184     std::size_t getSampleCount() <span class="keyword">const</span>;
<a name="l00185"></a>00185 
<a name="l00198"></a>00198     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getSampleRate() <span class="keyword">const</span>;
<a name="l00199"></a>00199 
<a name="l00211"></a>00211     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getChannelCount() <span class="keyword">const</span>;
<a name="l00212"></a>00212 
<a name="l00221"></a>00221     <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> getDuration() <span class="keyword">const</span>;
<a name="l00222"></a>00222 
<a name="l00231"></a>00231     <a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>&amp; operator =(<span class="keyword">const</span> <a class="code" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">SoundBuffer</a>&amp; right);
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="keyword">private</span> :
<a name="l00234"></a>00234 
<a name="l00235"></a>00235     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a>;
<a name="l00236"></a>00236 
<a name="l00245"></a>00245     <span class="keywordtype">bool</span> initialize(priv::SoundFile&amp; file);
<a name="l00246"></a>00246 
<a name="l00256"></a>00256     <span class="keywordtype">bool</span> update(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sampleRate);
<a name="l00257"></a>00257 
<a name="l00264"></a>00264     <span class="keywordtype">void</span> attachSound(<a class="code" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a>* sound) <span class="keyword">const</span>;
<a name="l00265"></a>00265 
<a name="l00272"></a>00272     <span class="keywordtype">void</span> detachSound(<a class="code" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a>* sound) <span class="keyword">const</span>;
<a name="l00273"></a>00273 
<a name="l00275"></a>00275     <span class="comment">// Types</span>
<a name="l00277"></a>00277 <span class="comment"></span>    <span class="keyword">typedef</span> std::set&lt;Sound*&gt; SoundList; 
<a name="l00278"></a>00278 
<a name="l00280"></a>00280     <span class="comment">// Member data</span>
<a name="l00282"></a>00282 <span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>       m_buffer;   
<a name="l00283"></a>00283     std::vector&lt;Int16&gt; m_samples;  
<a name="l00284"></a>00284     <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a>               m_duration; 
<a name="l00285"></a>00285     <span class="keyword">mutable</span> SoundList  m_sounds;   
<a name="l00286"></a>00286 };
<a name="l00287"></a>00287 
<a name="l00288"></a>00288 } <span class="comment">// namespace sf</span>
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 
<a name="l00291"></a>00291 <span class="preprocessor">#endif // SFML_SOUNDBUFFER_HPP</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span>
<a name="l00293"></a>00293 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
