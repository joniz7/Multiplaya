<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Color.htm">Color</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Color Class Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Color" -->
<p>Utility class for manpulating RGBA colors.  
 <a href="classsf_1_1Color.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Color_8hpp_source.htm">Color.hpp</a>&gt;</code></p>

<p><a href="classsf_1_1Color-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#ac2eb4393fb11ad3fa3ccf34e92fe08e4">Color</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ac2eb4393fb11ad3fa3ccf34e92fe08e4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#ac791dc61be4c60baac50fe700f1c9850">Color</a> (Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha=255)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the color from its 4 RGBA components.  <a href="#ac791dc61be4c60baac50fe700f1c9850"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Uint8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a6a5256ca24a4f9f0e0808f6fc23e01e1">r</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Red component.  <a href="#a6a5256ca24a4f9f0e0808f6fc23e01e1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Uint8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a591daf9c3c55dea830c76c962d6ba1a5">g</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Green component.  <a href="#a591daf9c3c55dea830c76c962d6ba1a5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Uint8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a6707aedd0609c8920e12df5d7abc53cb">b</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Blue component.  <a href="#a6707aedd0609c8920e12df5d7abc53cb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Uint8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a56dbdb47d5f040d9b78ac6a0b8b3a831">a</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Alpha (opacity) component.  <a href="#a56dbdb47d5f040d9b78ac6a0b8b3a831"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a77c688197b981338f0b19dc58bd2facd">Black</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Black predefined color.  <a href="#a77c688197b981338f0b19dc58bd2facd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a4fd874712178d9e206f53226002aa4ca">White</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">White predefined color.  <a href="#a4fd874712178d9e206f53226002aa4ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a127dbf55db9c07d0fa8f4bfcbb97594a">Red</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Red predefined color.  <a href="#a127dbf55db9c07d0fa8f4bfcbb97594a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a95629b30de8c6856aa7d3afed12eb865">Green</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Green predefined color.  <a href="#a95629b30de8c6856aa7d3afed12eb865"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#ab03770d4817426b2614cfc33cf0e245c">Blue</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Blue predefined color.  <a href="#ab03770d4817426b2614cfc33cf0e245c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#af8896b5f56650935f5b9d72d528802c7">Yellow</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Yellow predefined color.  <a href="#af8896b5f56650935f5b9d72d528802c7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a6fe70d90b65b2163dd066a84ac00426c">Magenta</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Magenta predefined color.  <a href="#a6fe70d90b65b2163dd066a84ac00426c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a64ae9beb0b9a5865dd811cda4bb18340">Cyan</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cyan predefined color.  <a href="#a64ae9beb0b9a5865dd811cda4bb18340"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a569b45471737f770656f50ae7bbac292">Transparent</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Transparent (black) predefined color.  <a href="#a569b45471737f770656f50ae7bbac292"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_GRAPHICS_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a7498d4670c7655e8d4d91ef49cc6064e">operator==</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;left, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the == operator.  <a href="#a7498d4670c7655e8d4d91ef49cc6064e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_GRAPHICS_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a5d6501b7dd05f481b79f7163899f1d92">operator!=</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;left, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the != operator.  <a href="#a5d6501b7dd05f481b79f7163899f1d92"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a90e79ecc276114cda519a88119ac645b">operator+</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;left, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the binary + operator.  <a href="#a90e79ecc276114cda519a88119ac645b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#aa9de267d831b4ec8ba65b627e51d50c3">operator*</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;left, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the binary * operator.  <a href="#aa9de267d831b4ec8ba65b627e51d50c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a19917f2453a4acfd69de2539bfab8031">operator+=</a> (<a class="el" href="classsf_1_1Color.htm">Color</a> &amp;left, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the binary += operator.  <a href="#a19917f2453a4acfd69de2539bfab8031"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Color.htm#a8953be58a47ced92fb25966d6ee90511">operator*=</a> (<a class="el" href="classsf_1_1Color.htm">Color</a> &amp;left, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of the binary *= operator.  <a href="#a8953be58a47ced92fb25966d6ee90511"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Utility class for manpulating RGBA colors. </p>
<p><a class="el" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> is a simple color class composed of 4 components:</p>
<ul>
<li>Red </li>
<li>Green </li>
<li>Blue </li>
<li>Alpha (opacity)</li>
</ul>
<p>Each component is a public member, an unsigned integer in the range [0, 255]. Thus, colors can be constructed and manipulated very easily:</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> color(255, 0, 0); <span class="comment">// red</span>
 color.red = 0;              <span class="comment">// make it black</span>
 color.blue = 128;           <span class="comment">// make it dark blue</span>
</pre></div><p>The fourth component of colors, named "alpha", represents the opacity of the color. A color with an alpha value of 255 will be fully opaque, while an alpha value of 0 will make a color fully transparent, whatever the value of the other components is.</p>
<p>The most common colors are already defined as static variables: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> black       = <a class="code" href="classsf_1_1Color.htm#a77c688197b981338f0b19dc58bd2facd" title="Black predefined color.">sf::Color::Black</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> white       = <a class="code" href="classsf_1_1Color.htm#a4fd874712178d9e206f53226002aa4ca" title="White predefined color.">sf::Color::White</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> red         = <a class="code" href="classsf_1_1Color.htm#a127dbf55db9c07d0fa8f4bfcbb97594a" title="Red predefined color.">sf::Color::Red</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> green       = <a class="code" href="classsf_1_1Color.htm#a95629b30de8c6856aa7d3afed12eb865" title="Green predefined color.">sf::Color::Green</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> blue        = <a class="code" href="classsf_1_1Color.htm#ab03770d4817426b2614cfc33cf0e245c" title="Blue predefined color.">sf::Color::Blue</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> yellow      = <a class="code" href="classsf_1_1Color.htm#af8896b5f56650935f5b9d72d528802c7" title="Yellow predefined color.">sf::Color::Yellow</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> magenta     = <a class="code" href="classsf_1_1Color.htm#a6fe70d90b65b2163dd066a84ac00426c" title="Magenta predefined color.">sf::Color::Magenta</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> cyan        = <a class="code" href="classsf_1_1Color.htm#a64ae9beb0b9a5865dd811cda4bb18340" title="Cyan predefined color.">sf::Color::Cyan</a>;
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> transparent = <a class="code" href="classsf_1_1Color.htm#a569b45471737f770656f50ae7bbac292" title="Transparent (black) predefined color.">sf::Color::Transparent</a>;
</pre></div><p>Colors can also be added and modulated (multiplied) using the overloaded operators + and *. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00040">40</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac2eb4393fb11ad3fa3ccf34e92fe08e4"></a><!-- doxytag: member="sf::Color::Color" ref="ac2eb4393fb11ad3fa3ccf34e92fe08e4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Color.htm#ac2eb4393fb11ad3fa3ccf34e92fe08e4">sf::Color::Color</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>Constructs an opaque black color. It is equivalent to sf::Color(0, 0, 0, 255). </p>

</div>
</div>
<a class="anchor" id="ac791dc61be4c60baac50fe700f1c9850"></a><!-- doxytag: member="sf::Color::Color" ref="ac791dc61be4c60baac50fe700f1c9850" args="(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha=255)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Color.htm#ac2eb4393fb11ad3fa3ccf34e92fe08e4">sf::Color::Color</a> </td>
          <td>(</td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>red</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>green</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>blue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>alpha</em> = <code>255</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct the color from its 4 RGBA components. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">red</td><td>Red component (in the range [0, 255]) </td></tr>
    <tr><td class="paramname">green</td><td>Green component (in the range [0, 255]) </td></tr>
    <tr><td class="paramname">blue</td><td>Blue component (in the range [0, 255]) </td></tr>
    <tr><td class="paramname">alpha</td><td>Alpha (opacity) component (in the range [0, 255]) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a5d6501b7dd05f481b79f7163899f1d92"></a><!-- doxytag: member="sf::Color::operator!=" ref="a5d6501b7dd05f481b79f7163899f1d92" args="(const Color &amp;left, const Color &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_GRAPHICS_API bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of the != operator. </p>
<p>This operator compares two colors and check if they are different.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand </td></tr>
    <tr><td class="paramname">right</td><td>Right operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if colors are different, false if they are equal </dd></dl>

</div>
</div>
<a class="anchor" id="aa9de267d831b4ec8ba65b627e51d50c3"></a><!-- doxytag: member="sf::Color::operator*" ref="aa9de267d831b4ec8ba65b627e51d50c3" args="(const Color &amp;left, const Color &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of the binary * operator. </p>
<p>This operator returns the component-wise multiplication (also called "modulation") of two colors. Components are then divided by 255 so that the result is still in the range [0, 255].</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand </td></tr>
    <tr><td class="paramname">right</td><td>Right operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Result of <em>left</em> * <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a8953be58a47ced92fb25966d6ee90511"></a><!-- doxytag: member="sf::Color::operator*=" ref="a8953be58a47ced92fb25966d6ee90511" args="(Color &amp;left, const Color &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of the binary *= operator. </p>
<p>This operator returns the component-wise multiplication (also called "modulation") of two colors, and assigns the result to the left operand. Components are then divided by 255 so that the result is still in the range [0, 255].</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand </td></tr>
    <tr><td class="paramname">right</td><td>Right operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a90e79ecc276114cda519a88119ac645b"></a><!-- doxytag: member="sf::Color::operator+" ref="a90e79ecc276114cda519a88119ac645b" args="(const Color &amp;left, const Color &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of the binary + operator. </p>
<p>This operator returns the component-wise sum of two colors. Components that exceed 255 are clamped to 255.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand </td></tr>
    <tr><td class="paramname">right</td><td>Right operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Result of <em>left</em> + <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a19917f2453a4acfd69de2539bfab8031"></a><!-- doxytag: member="sf::Color::operator+=" ref="a19917f2453a4acfd69de2539bfab8031" args="(Color &amp;left, const Color &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_GRAPHICS_API <a class="el" href="classsf_1_1Color.htm">Color</a> &amp; operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of the binary += operator. </p>
<p>This operator computes the component-wise sum of two colors, and assigns the result to the left operand. Components that exceed 255 are clamped to 255.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand </td></tr>
    <tr><td class="paramname">right</td><td>Right operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to <em>left</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a7498d4670c7655e8d4d91ef49cc6064e"></a><!-- doxytag: member="sf::Color::operator==" ref="a7498d4670c7655e8d4d91ef49cc6064e" args="(const Color &amp;left, const Color &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_GRAPHICS_API bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of the == operator. </p>
<p>This operator compares two colors and check if they are equal.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand </td></tr>
    <tr><td class="paramname">right</td><td>Right operand</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if colors are equal, false if they are different </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a56dbdb47d5f040d9b78ac6a0b8b3a831"></a><!-- doxytag: member="sf::Color::a" ref="a56dbdb47d5f040d9b78ac6a0b8b3a831" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint8 <a class="el" href="classsf_1_1Color.htm#a56dbdb47d5f040d9b78ac6a0b8b3a831">sf::Color::a</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Alpha (opacity) component. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00083">83</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a6707aedd0609c8920e12df5d7abc53cb"></a><!-- doxytag: member="sf::Color::b" ref="a6707aedd0609c8920e12df5d7abc53cb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint8 <a class="el" href="classsf_1_1Color.htm#a6707aedd0609c8920e12df5d7abc53cb">sf::Color::b</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Blue component. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00082">82</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a77c688197b981338f0b19dc58bd2facd"></a><!-- doxytag: member="sf::Color::Black" ref="a77c688197b981338f0b19dc58bd2facd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a77c688197b981338f0b19dc58bd2facd">sf::Color::Black</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Black predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00067">67</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ab03770d4817426b2614cfc33cf0e245c"></a><!-- doxytag: member="sf::Color::Blue" ref="ab03770d4817426b2614cfc33cf0e245c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#ab03770d4817426b2614cfc33cf0e245c">sf::Color::Blue</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Blue predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00071">71</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a64ae9beb0b9a5865dd811cda4bb18340"></a><!-- doxytag: member="sf::Color::Cyan" ref="a64ae9beb0b9a5865dd811cda4bb18340" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a64ae9beb0b9a5865dd811cda4bb18340">sf::Color::Cyan</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Cyan predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00074">74</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a591daf9c3c55dea830c76c962d6ba1a5"></a><!-- doxytag: member="sf::Color::g" ref="a591daf9c3c55dea830c76c962d6ba1a5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint8 <a class="el" href="classsf_1_1Color.htm#a591daf9c3c55dea830c76c962d6ba1a5">sf::Color::g</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Green component. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00081">81</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a95629b30de8c6856aa7d3afed12eb865"></a><!-- doxytag: member="sf::Color::Green" ref="a95629b30de8c6856aa7d3afed12eb865" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a95629b30de8c6856aa7d3afed12eb865">sf::Color::Green</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Green predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00070">70</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a6fe70d90b65b2163dd066a84ac00426c"></a><!-- doxytag: member="sf::Color::Magenta" ref="a6fe70d90b65b2163dd066a84ac00426c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a6fe70d90b65b2163dd066a84ac00426c">sf::Color::Magenta</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Magenta predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00073">73</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a6a5256ca24a4f9f0e0808f6fc23e01e1"></a><!-- doxytag: member="sf::Color::r" ref="a6a5256ca24a4f9f0e0808f6fc23e01e1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint8 <a class="el" href="classsf_1_1Color.htm#a6a5256ca24a4f9f0e0808f6fc23e01e1">sf::Color::r</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Red component. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00080">80</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a127dbf55db9c07d0fa8f4bfcbb97594a"></a><!-- doxytag: member="sf::Color::Red" ref="a127dbf55db9c07d0fa8f4bfcbb97594a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a127dbf55db9c07d0fa8f4bfcbb97594a">sf::Color::Red</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Red predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00069">69</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a569b45471737f770656f50ae7bbac292"></a><!-- doxytag: member="sf::Color::Transparent" ref="a569b45471737f770656f50ae7bbac292" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a569b45471737f770656f50ae7bbac292">sf::Color::Transparent</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Transparent (black) predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00075">75</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a4fd874712178d9e206f53226002aa4ca"></a><!-- doxytag: member="sf::Color::White" ref="a4fd874712178d9e206f53226002aa4ca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#a4fd874712178d9e206f53226002aa4ca">sf::Color::White</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>White predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00068">68</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="af8896b5f56650935f5b9d72d528802c7"></a><!-- doxytag: member="sf::Color::Yellow" ref="af8896b5f56650935f5b9d72d528802c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Color.htm#af8896b5f56650935f5b9d72d528802c7">sf::Color::Yellow</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Yellow predefined color. </p>

<p>Definition at line <a class="el" href="Color_8hpp_source.htm#l00072">72</a> of file <a class="el" href="Color_8hpp_source.htm">Color.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Color_8hpp_source.htm">Color.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
