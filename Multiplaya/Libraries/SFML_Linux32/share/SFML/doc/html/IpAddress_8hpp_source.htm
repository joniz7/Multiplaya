<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">IpAddress.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_IPADDRESS_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_IPADDRESS_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Network/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/System/Time.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;istream&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;ostream&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00044"></a><a class="code" href="classsf_1_1IpAddress.htm">00044</a> <span class="keyword">class </span>SFML_NETWORK_API <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 <span class="keyword">public</span> :
<a name="l00047"></a>00047 
<a name="l00054"></a>00054     <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>();
<a name="l00055"></a>00055 
<a name="l00065"></a>00065     <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>(<span class="keyword">const</span> std::string&amp; address);
<a name="l00066"></a>00066 
<a name="l00079"></a>00079     <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* address);
<a name="l00080"></a>00080 
<a name="l00094"></a>00094     <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>(Uint8 byte0, Uint8 byte1, Uint8 byte2, Uint8 byte3);
<a name="l00095"></a>00095 
<a name="l00109"></a>00109     <span class="keyword">explicit</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>(Uint32 address);
<a name="l00110"></a>00110 
<a name="l00123"></a>00123     std::string toString() <span class="keyword">const</span>;
<a name="l00124"></a>00124 
<a name="l00139"></a>00139     Uint32 toInteger() <span class="keyword">const</span>;
<a name="l00140"></a>00140 
<a name="l00155"></a>00155     <span class="keyword">static</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a> getLocalAddress();
<a name="l00156"></a>00156 
<a name="l00179"></a>00179     <span class="keyword">static</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a> getPublicAddress(<a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> timeout = <a class="code" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0" title="Predefined &quot;zero&quot; time value.">Time::Zero</a>);
<a name="l00180"></a>00180 
<a name="l00182"></a>00182     <span class="comment">// Static member data</span>
<a name="l00184"></a><a class="code" href="classsf_1_1IpAddress.htm#a4619b4abbe3c8fef056e7299db967404">00184</a> <span class="comment"></span>    <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a> <a class="code" href="classsf_1_1IpAddress.htm#a4619b4abbe3c8fef056e7299db967404" title="Value representing an empty/invalid address.">None</a>;      
<a name="l00185"></a><a class="code" href="classsf_1_1IpAddress.htm#a594d3a8e2559f8fa8ab0a96fa597333b">00185</a>     <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a> <a class="code" href="classsf_1_1IpAddress.htm#a594d3a8e2559f8fa8ab0a96fa597333b" title="The &quot;localhost&quot; address (for connecting a computer to itself locally)">LocalHost</a>; 
<a name="l00186"></a><a class="code" href="classsf_1_1IpAddress.htm#aa93d1d57b65d243f2baf804b6035465c">00186</a>     <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a> <a class="code" href="classsf_1_1IpAddress.htm#aa93d1d57b65d243f2baf804b6035465c" title="The &quot;broadcast&quot; address (for sending UDP messages to everyone on a local network)">Broadcast</a>; 
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="keyword">private</span> :
<a name="l00189"></a>00189 
<a name="l00191"></a>00191     <span class="comment">// Member data</span>
<a name="l00193"></a>00193 <span class="comment"></span>    Uint32 m_address; 
<a name="l00194"></a>00194 };
<a name="l00195"></a>00195 
<a name="l00205"></a>00205 SFML_NETWORK_API <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; right);
<a name="l00206"></a>00206 
<a name="l00216"></a>00216 SFML_NETWORK_API <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; right);
<a name="l00217"></a>00217 
<a name="l00227"></a>00227 SFML_NETWORK_API <span class="keywordtype">bool</span> operator &lt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; right);
<a name="l00228"></a>00228 
<a name="l00238"></a>00238 SFML_NETWORK_API <span class="keywordtype">bool</span> operator &gt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; right);
<a name="l00239"></a>00239 
<a name="l00249"></a>00249 SFML_NETWORK_API <span class="keywordtype">bool</span> operator &lt;=(<span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; right);
<a name="l00250"></a>00250 
<a name="l00260"></a>00260 SFML_NETWORK_API <span class="keywordtype">bool</span> operator &gt;=(<span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; left, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; right);
<a name="l00261"></a>00261 
<a name="l00271"></a>00271 SFML_NETWORK_API std::istream&amp; operator &gt;&gt;(std::istream&amp; stream, <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; address);
<a name="l00272"></a>00272 
<a name="l00282"></a>00282 SFML_NETWORK_API std::ostream&amp; operator &lt;&lt;(std::ostream&amp; stream, <span class="keyword">const</span> <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>&amp; address);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 } <span class="comment">// namespace sf</span>
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 <span class="preprocessor">#endif // SFML_IPADDRESS_HPP</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
