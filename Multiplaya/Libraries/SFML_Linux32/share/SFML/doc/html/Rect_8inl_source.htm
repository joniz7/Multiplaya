<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Rect.inl</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00027"></a>00027 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00028"></a>00028 Rect&lt;T&gt;::Rect() :
<a name="l00029"></a>00029 left  (0),
<a name="l00030"></a>00030 top   (0),
<a name="l00031"></a>00031 width (0),
<a name="l00032"></a>00032 height(0)
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 }
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00039"></a>00039 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00040"></a>00040 Rect&lt;T&gt;::Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight) :
<a name="l00041"></a>00041 left  (rectLeft),
<a name="l00042"></a>00042 top   (rectTop),
<a name="l00043"></a>00043 width (rectWidth),
<a name="l00044"></a>00044 height(rectHeight)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00051"></a>00051 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00052"></a>00052 Rect&lt;T&gt;::Rect(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; position, <span class="keyword">const</span> Vector2&lt;T&gt;&amp; size) :
<a name="l00053"></a>00053 left  (position.x),
<a name="l00054"></a>00054 top   (position.y),
<a name="l00055"></a>00055 width (size.x),
<a name="l00056"></a>00056 height(size.y)
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 }
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 
<a name="l00063"></a>00063 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00064"></a>00064 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;
<a name="l00065"></a>00065 Rect&lt;T&gt;::Rect(<span class="keyword">const</span> Rect&lt;U&gt;&amp; rectangle) :
<a name="l00066"></a>00066 left  (static_cast&lt;T&gt;(rectangle.left)),
<a name="l00067"></a>00067 top   (static_cast&lt;T&gt;(rectangle.top)),
<a name="l00068"></a>00068 width (static_cast&lt;T&gt;(rectangle.width)),
<a name="l00069"></a>00069 height(static_cast&lt;T&gt;(rectangle.height))
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00075"></a>00075 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00076"></a>00076 <span class="keywordtype">bool</span> Rect&lt;T&gt;::contains(T x, T y)<span class="keyword"> const</span>
<a name="l00077"></a>00077 <span class="keyword"></span>{
<a name="l00078"></a>00078     <span class="keywordflow">return</span> (x &gt;= left) &amp;&amp; (x &lt; left + width) &amp;&amp; (y &gt;= top) &amp;&amp; (y &lt; top + height);
<a name="l00079"></a>00079 }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 
<a name="l00083"></a>00083 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00084"></a>00084 <span class="keywordtype">bool</span> Rect&lt;T&gt;::contains(<span class="keyword">const</span> Vector2&lt;T&gt;&amp; point)<span class="keyword"> const</span>
<a name="l00085"></a>00085 <span class="keyword"></span>{
<a name="l00086"></a>00086     <span class="keywordflow">return</span> contains(point.x, point.y);
<a name="l00087"></a>00087 }
<a name="l00088"></a>00088 
<a name="l00089"></a>00089 
<a name="l00091"></a>00091 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00092"></a>00092 <span class="keywordtype">bool</span> Rect&lt;T&gt;::intersects(<span class="keyword">const</span> Rect&lt;T&gt;&amp; rectangle)<span class="keyword"> const</span>
<a name="l00093"></a>00093 <span class="keyword"></span>{
<a name="l00094"></a>00094     Rect&lt;T&gt; intersection;
<a name="l00095"></a>00095     <span class="keywordflow">return</span> intersects(rectangle, intersection);
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 
<a name="l00100"></a>00100 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00101"></a>00101 <span class="keywordtype">bool</span> Rect&lt;T&gt;::intersects(<span class="keyword">const</span> Rect&lt;T&gt;&amp; rectangle, Rect&lt;T&gt;&amp; intersection)<span class="keyword"> const</span>
<a name="l00102"></a>00102 <span class="keyword"></span>{
<a name="l00103"></a>00103     <span class="comment">// Compute the intersection boundaries</span>
<a name="l00104"></a>00104     T interLeft   = std::max(left,         rectangle.left);
<a name="l00105"></a>00105     T interTop    = std::max(top,          rectangle.top);
<a name="l00106"></a>00106     T interRight  = std::min(left + width, rectangle.left + rectangle.width);
<a name="l00107"></a>00107     T interBottom = std::min(top + height, rectangle.top + rectangle.height);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="comment">// If the intersection is valid (positive non zero area), then there is an intersection</span>
<a name="l00110"></a>00110     <span class="keywordflow">if</span> ((interLeft &lt; interRight) &amp;&amp; (interTop &lt; interBottom))
<a name="l00111"></a>00111     {
<a name="l00112"></a>00112         intersection = Rect&lt;T&gt;(interLeft, interTop, interRight - interLeft, interBottom - interTop);
<a name="l00113"></a>00113         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115     <span class="keywordflow">else</span>
<a name="l00116"></a>00116     {
<a name="l00117"></a>00117         intersection = Rect&lt;T&gt;(0, 0, 0, 0);
<a name="l00118"></a>00118         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00124"></a>00124 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00125"></a>00125 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Color.htm#a7498d4670c7655e8d4d91ef49cc6064e" title="Overload of the == operator.">operator ==</a>(<span class="keyword">const</span> Rect&lt;T&gt;&amp; left, <span class="keyword">const</span> Rect&lt;T&gt;&amp; right)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127     <span class="keywordflow">return</span> (left.left == right.left) &amp;&amp; (left.width == right.width) &amp;&amp;
<a name="l00128"></a>00128            (left.top == right.top) &amp;&amp; (left.height == right.height);
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 
<a name="l00133"></a>00133 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00134"></a>00134 <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1Color.htm#a5d6501b7dd05f481b79f7163899f1d92" title="Overload of the != operator.">operator !=</a>(<span class="keyword">const</span> Rect&lt;T&gt;&amp; left, <span class="keyword">const</span> Rect&lt;T&gt;&amp; right)
<a name="l00135"></a>00135 {
<a name="l00136"></a>00136     <span class="keywordflow">return</span> !(left == right);
<a name="l00137"></a>00137 }
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
