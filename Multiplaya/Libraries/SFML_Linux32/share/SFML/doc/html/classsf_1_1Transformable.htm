<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Transformable.htm">Transformable</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Transformable Class Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Transformable" -->
<p>Decomposed transform defined by a position, a rotation and a scale.  
 <a href="classsf_1_1Transformable.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Transformable_8hpp_source.htm">Transformable.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Transformable:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Transformable.png" usemap="#sf::Transformable_map" alt=""/>
  <map id="sf::Transformable_map" name="sf::Transformable_map">
<area href="classsf_1_1Shape.htm" title="Base class for textured shapes with outline." alt="sf::Shape" shape="rect" coords="130,56,250,80"/>
<area href="classsf_1_1Sprite.htm" title="Drawable representation of a texture, with its own transformations, color, etc." alt="sf::Sprite" shape="rect" coords="260,56,380,80"/>
<area href="classsf_1_1Text.htm" title="Graphical text that can be drawn to a render target." alt="sf::Text" shape="rect" coords="390,56,510,80"/>
<area href="classsf_1_1CircleShape.htm" title="Specialized shape representing a circle." alt="sf::CircleShape" shape="rect" coords="0,112,120,136"/>
<area href="classsf_1_1ConvexShape.htm" title="Specialized shape representing a convex polygon." alt="sf::ConvexShape" shape="rect" coords="130,112,250,136"/>
<area href="classsf_1_1RectangleShape.htm" title="Specialized shape representing a rectangle." alt="sf::RectangleShape" shape="rect" coords="260,112,380,136"/>
</map>
 </div></div>

<p><a href="classsf_1_1Transformable-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#ae71710de0fef423121bab1c684954a2e">Transformable</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ae71710de0fef423121bab1c684954a2e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a43253abcb863195a673c2a347a7425cc">~Transformable</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Virtual destructor.  <a href="#a43253abcb863195a673c2a347a7425cc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a4dbfb1a7c80688b0b4c477d706550208">setPosition</a> (float x, float y)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the position of the object  <a href="#a4dbfb1a7c80688b0b4c477d706550208"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#af1a42209ce2b5d3f07b00f917bcd8015">setPosition</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;position)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the position of the object  <a href="#af1a42209ce2b5d3f07b00f917bcd8015"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a32baf2bf1a74699b03bf8c95030a38ed">setRotation</a> (float angle)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the orientation of the object  <a href="#a32baf2bf1a74699b03bf8c95030a38ed"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#aaec50b46b3f41b054763304d1e727471">setScale</a> (float factorX, float factorY)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the scale factors of the object  <a href="#aaec50b46b3f41b054763304d1e727471"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a4c48a87f1626047e448f9c1a68ff167e">setScale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;factors)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the scale factors of the object  <a href="#a4c48a87f1626047e448f9c1a68ff167e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a56c67bd80aae8418d13fb96c034d25ec">setOrigin</a> (float x, float y)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the local origin of the object  <a href="#a56c67bd80aae8418d13fb96c034d25ec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#aa93a835ffbf3bee2098dfbbc695a7f05">setOrigin</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;origin)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the local origin of the object  <a href="#aa93a835ffbf3bee2098dfbbc695a7f05"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a6a0552d8cf155b7df25f6ceda8ee45a5">getPosition</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the position of the object  <a href="#a6a0552d8cf155b7df25f6ceda8ee45a5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#ad783a7e9971398ec613d22455252809e">getRotation</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the orientation of the object  <a href="#ad783a7e9971398ec613d22455252809e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a3ea9639abd7a430ac99afb0aaf1ea562">getScale</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the current scale of the object  <a href="#a3ea9639abd7a430ac99afb0aaf1ea562"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a6bddc485d22bb64449d9d2d3a99a778f">getOrigin</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the local origin of the object  <a href="#a6bddc485d22bb64449d9d2d3a99a778f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a86b461d6a941ad390c2ad8b6a4a20391">move</a> (float offsetX, float offsetY)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the object by a given offset.  <a href="#a86b461d6a941ad390c2ad8b6a4a20391"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#ab9ca691522f6ddc1a40406849b87c469">move</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;offset)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Move the object by a given offset.  <a href="#ab9ca691522f6ddc1a40406849b87c469"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#af8a5ffddc0d93f238fee3bf8efe1ebda">rotate</a> (float angle)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate the object.  <a href="#af8a5ffddc0d93f238fee3bf8efe1ebda"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a3de0c6d8957f3cf318092f3f60656391">scale</a> (float factorX, float factorY)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the object.  <a href="#a3de0c6d8957f3cf318092f3f60656391"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#adecaa6c69b1f27dd5194b067d96bb694">scale</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;factor)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Scale the object.  <a href="#adecaa6c69b1f27dd5194b067d96bb694"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#a3b48c3362e3e2c14fef7551252deb7bb">getTransform</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the combined transform of the object  <a href="#a3b48c3362e3e2c14fef7551252deb7bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsf_1_1Transform.htm">Transform</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Transformable.htm#ab00de62b5d1efb2ee4cf2566dea98175">getInverseTransform</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the inverse of the combined transform of the object  <a href="#ab00de62b5d1efb2ee4cf2566dea98175"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Decomposed transform defined by a position, a rotation and a scale. </p>
<p>This class is provided for convenience, on top of <a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">sf::Transform</a>.</p>
<p><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">sf::Transform</a>, as a low-level class, offers a great level of flexibility but it is not always convenient to manage. Indeed, one can easily combine any kind of operation, such as a translation followed by a rotation followed by a scaling, but once the result transform is built, there's no way to go backward and, let's say, change only the rotation without modifying the translation and scaling. The entire transform must be recomputed, which means that you need to retrieve the initial translation and scale factors as well, and combine them the same way you did before updating the rotation. This is a tedious operation, and it requires to store all the individual components of the final transform.</p>
<p>That's exactly what <a class="el" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">sf::Transformable</a> was written for: it hides these variables and the composed transform behind an easy to use interface. You can set or get any of the individual components without worrying about the others. It also provides the composed transform (as a <a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">sf::Transform</a>), and keeps it up-to-date.</p>
<p>In addition to the position, rotation and scale, <a class="el" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">sf::Transformable</a> provides an "origin" component, which represents the local origin of the three other components. Let's take an example with a 10x10 pixels sprite. By default, the sprite is positionned/rotated/scaled relatively to its top-left corner, because it is the local point (0, 0). But if we change the origin to be (5, 5), the sprite will be positionned/rotated/scaled around its center instead. And if we set the origin to (10, 10), it will be transformed around its bottom-right corner.</p>
<p>To keep the <a class="el" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">sf::Transformable</a> class simple, there's only one origin for all the components. You cannot position the sprite relatively to its top-left corner while rotating it around its center, for example. To do such things, use <a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">sf::Transform</a> directly.</p>
<p><a class="el" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">sf::Transformable</a> can be used as a base class. It is often combined with <a class="el" href="classsf_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target.">sf::Drawable</a> -- that's what SFML's sprites, texts and shapes do. </p>
<div class="fragment"><pre class="fragment"> <span class="keyword">class </span>MyEntity : <span class="keyword">public</span> sf::<a class="code" href="classsf_1_1Transformable.htm#ae71710de0fef423121bab1c684954a2e" title="Default constructor.">Transformable</a>, <span class="keyword">public</span> sf::Drawable
 {
     <span class="keyword">virtual</span> <span class="keywordtype">void</span> draw(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">sf::RenderTarget</a>&amp; target, <a class="code" href="classsf_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget.">sf::RenderStates</a> states)<span class="keyword"> const</span>
<span class="keyword">     </span>{
         states.<a class="code" href="classsf_1_1RenderStates.htm#a1f737981a0f2f0d4bb8dac866a8d1149" title="Transform.">transform</a> *= <a class="code" href="classsf_1_1Transformable.htm#a3b48c3362e3e2c14fef7551252deb7bb" title="get the combined transform of the object">getTransform</a>();
         target.<a class="code" href="classsf_1_1RenderTarget.htm#a12417a3bcc245c41d957b29583556f39" title="Draw a drawable object to the render-target.">draw</a>(..., states);
     }
 };

 MyEntity entity;
 entity.setPosition(10, 20);
 entity.setRotation(45);
 window.draw(entity);
</pre></div><p>It can also be used as a member, if you don't want to use its API directly (because you don't need all its functions, or you have different naming conventions for example). </p>
<div class="fragment"><pre class="fragment"> <span class="keyword">class </span>MyEntity
 {
 <span class="keyword">public</span> :
     <span class="keywordtype">void</span> SetPosition(<span class="keyword">const</span> MyVector&amp; v)
     {
         myTransform.setPosition(v.x(), v.y());
     }

     <span class="keywordtype">void</span> Draw(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">sf::RenderTarget</a>&amp; target)<span class="keyword"> const</span>
<span class="keyword">     </span>{
         target.<a class="code" href="classsf_1_1RenderTarget.htm#a12417a3bcc245c41d957b29583556f39" title="Draw a drawable object to the render-target.">draw</a>(..., myTransform.getTransform());
     }

 <span class="keyword">private</span> :
     <a class="code" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">sf::Transformable</a> myTransform;
 };
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">sf::Transform</a> </dd></dl>

<p>Definition at line <a class="el" href="Transformable_8hpp_source.htm#l00041">41</a> of file <a class="el" href="Transformable_8hpp_source.htm">Transformable.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ae71710de0fef423121bab1c684954a2e"></a><!-- doxytag: member="sf::Transformable::Transformable" ref="ae71710de0fef423121bab1c684954a2e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Transformable.htm#ae71710de0fef423121bab1c684954a2e">sf::Transformable::Transformable</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a43253abcb863195a673c2a347a7425cc"></a><!-- doxytag: member="sf::Transformable::~Transformable" ref="a43253abcb863195a673c2a347a7425cc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classsf_1_1Transformable.htm#a43253abcb863195a673c2a347a7425cc">sf::Transformable::~Transformable</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Virtual destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab00de62b5d1efb2ee4cf2566dea98175"></a><!-- doxytag: member="sf::Transformable::getInverseTransform" ref="ab00de62b5d1efb2ee4cf2566dea98175" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Transform.htm">Transform</a>&amp; <a class="el" href="classsf_1_1Transformable.htm#ab00de62b5d1efb2ee4cf2566dea98175">sf::Transformable::getInverseTransform</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the inverse of the combined transform of the object </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Inverse of the combined transformations applied to the object</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a3b48c3362e3e2c14fef7551252deb7bb" title="get the combined transform of the object">getTransform</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6bddc485d22bb64449d9d2d3a99a778f"></a><!-- doxytag: member="sf::Transformable::getOrigin" ref="a6bddc485d22bb64449d9d2d3a99a778f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; <a class="el" href="classsf_1_1Transformable.htm#a6bddc485d22bb64449d9d2d3a99a778f">sf::Transformable::getOrigin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the local origin of the object </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current origin</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a56c67bd80aae8418d13fb96c034d25ec" title="set the local origin of the object">setOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6a0552d8cf155b7df25f6ceda8ee45a5"></a><!-- doxytag: member="sf::Transformable::getPosition" ref="a6a0552d8cf155b7df25f6ceda8ee45a5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; <a class="el" href="classsf_1_1Transformable.htm#a6a0552d8cf155b7df25f6ceda8ee45a5">sf::Transformable::getPosition</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the position of the object </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current position</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a4dbfb1a7c80688b0b4c477d706550208" title="set the position of the object">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad783a7e9971398ec613d22455252809e"></a><!-- doxytag: member="sf::Transformable::getRotation" ref="ad783a7e9971398ec613d22455252809e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classsf_1_1Transformable.htm#ad783a7e9971398ec613d22455252809e">sf::Transformable::getRotation</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the orientation of the object </p>
<p>The rotation is always in the range [0, 360].</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current rotation, in degrees</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a32baf2bf1a74699b03bf8c95030a38ed" title="set the orientation of the object">setRotation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3ea9639abd7a430ac99afb0aaf1ea562"></a><!-- doxytag: member="sf::Transformable::getScale" ref="a3ea9639abd7a430ac99afb0aaf1ea562" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; <a class="el" href="classsf_1_1Transformable.htm#a3ea9639abd7a430ac99afb0aaf1ea562">sf::Transformable::getScale</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the current scale of the object </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current scale factors</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#aaec50b46b3f41b054763304d1e727471" title="set the scale factors of the object">setScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3b48c3362e3e2c14fef7551252deb7bb"></a><!-- doxytag: member="sf::Transformable::getTransform" ref="a3b48c3362e3e2c14fef7551252deb7bb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Transform.htm">Transform</a>&amp; <a class="el" href="classsf_1_1Transformable.htm#a3b48c3362e3e2c14fef7551252deb7bb">sf::Transformable::getTransform</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the combined transform of the object </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a> combining the position/rotation/scale/origin of the object</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#ab00de62b5d1efb2ee4cf2566dea98175" title="get the inverse of the combined transform of the object">getInverseTransform</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a86b461d6a941ad390c2ad8b6a4a20391"></a><!-- doxytag: member="sf::Transformable::move" ref="a86b461d6a941ad390c2ad8b6a4a20391" args="(float offsetX, float offsetY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a86b461d6a941ad390c2ad8b6a4a20391">sf::Transformable::move</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>offsetX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>offsetY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Move the object by a given offset. </p>
<p>This function adds to the current position of the object, unlike setPosition which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> pos = <span class="keywordtype">object</span>.getPosition();
 <span class="keywordtype">object</span>.setPosition(pos.<a class="code" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> + offsetX, pos.<a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> + offsetY);
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">offsetX</td><td>X offset </td></tr>
    <tr><td class="paramname">offsetY</td><td>Y offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a4dbfb1a7c80688b0b4c477d706550208" title="set the position of the object">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab9ca691522f6ddc1a40406849b87c469"></a><!-- doxytag: member="sf::Transformable::move" ref="ab9ca691522f6ddc1a40406849b87c469" args="(const Vector2f &amp;offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a86b461d6a941ad390c2ad8b6a4a20391">sf::Transformable::move</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>offset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Move the object by a given offset. </p>
<p>This function adds to the current position of the object, unlike setPosition which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">object</span>.setPosition(<span class="keywordtype">object</span>.<a class="code" href="classsf_1_1Transformable.htm#a6a0552d8cf155b7df25f6ceda8ee45a5" title="get the position of the object">getPosition</a>() + offset);
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">offset</td><td>Offset</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a4dbfb1a7c80688b0b4c477d706550208" title="set the position of the object">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af8a5ffddc0d93f238fee3bf8efe1ebda"></a><!-- doxytag: member="sf::Transformable::rotate" ref="af8a5ffddc0d93f238fee3bf8efe1ebda" args="(float angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#af8a5ffddc0d93f238fee3bf8efe1ebda">sf::Transformable::rotate</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate the object. </p>
<p>This function adds to the current rotation of the object, unlike setRotation which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">object</span>.setRotation(<span class="keywordtype">object</span>.<a class="code" href="classsf_1_1Transformable.htm#ad783a7e9971398ec613d22455252809e" title="get the orientation of the object">getRotation</a>() + angle);
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>Angle of rotation, in degrees </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3de0c6d8957f3cf318092f3f60656391"></a><!-- doxytag: member="sf::Transformable::scale" ref="a3de0c6d8957f3cf318092f3f60656391" args="(float factorX, float factorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a3de0c6d8957f3cf318092f3f60656391">sf::Transformable::scale</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scale the object. </p>
<p>This function multiplies the current scale of the object, unlike setScale which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> scale = <span class="keywordtype">object</span>.getScale();
 <span class="keywordtype">object</span>.setScale(scale.<a class="code" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> * factorX, scale.<a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> * factorY);
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">factorX</td><td>Horizontal scale factor </td></tr>
    <tr><td class="paramname">factorY</td><td>Vertical scale factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#aaec50b46b3f41b054763304d1e727471" title="set the scale factors of the object">setScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="adecaa6c69b1f27dd5194b067d96bb694"></a><!-- doxytag: member="sf::Transformable::scale" ref="adecaa6c69b1f27dd5194b067d96bb694" args="(const Vector2f &amp;factor)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a3de0c6d8957f3cf318092f3f60656391">sf::Transformable::scale</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scale the object. </p>
<p>This function multiplies the current scale of the object, unlike setScale which overwrites it. Thus, it is equivalent to the following code: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Vector2.htm">sf::Vector2f</a> scale = <span class="keywordtype">object</span>.getScale();
 <span class="keywordtype">object</span>.setScale(scale.<a class="code" href="classsf_1_1Vector2.htm#a1e6ad77fa155f3753bfb92699bd28141" title="X coordinate of the vector.">x</a> * factor.x, scale.<a class="code" href="classsf_1_1Vector2.htm#a420f2481b015f4eb929c75f2af564299" title="Y coordinate of the vector.">y</a> * factor.y);
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">factor</td><td>Scale factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#aaec50b46b3f41b054763304d1e727471" title="set the scale factors of the object">setScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a56c67bd80aae8418d13fb96c034d25ec"></a><!-- doxytag: member="sf::Transformable::setOrigin" ref="a56c67bd80aae8418d13fb96c034d25ec" args="(float x, float y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a56c67bd80aae8418d13fb96c034d25ec">sf::Transformable::setOrigin</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the local origin of the object </p>
<p>The origin of an object defines the center point for all transformations (position, scale, rotation). The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation). The default origin of a transformable object is (0, 0).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the new origin </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the new origin</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a6bddc485d22bb64449d9d2d3a99a778f" title="get the local origin of the object">getOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa93a835ffbf3bee2098dfbbc695a7f05"></a><!-- doxytag: member="sf::Transformable::setOrigin" ref="aa93a835ffbf3bee2098dfbbc695a7f05" args="(const Vector2f &amp;origin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a56c67bd80aae8418d13fb96c034d25ec">sf::Transformable::setOrigin</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>origin</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the local origin of the object </p>
<p>The origin of an object defines the center point for all transformations (position, scale, rotation). The coordinates of this point must be relative to the top-left corner of the object, and ignore all transformations (position, scale, rotation). The default origin of a transformable object is (0, 0).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">origin</td><td>New origin</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a6bddc485d22bb64449d9d2d3a99a778f" title="get the local origin of the object">getOrigin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4dbfb1a7c80688b0b4c477d706550208"></a><!-- doxytag: member="sf::Transformable::setPosition" ref="a4dbfb1a7c80688b0b4c477d706550208" args="(float x, float y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a4dbfb1a7c80688b0b4c477d706550208">sf::Transformable::setPosition</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the position of the object </p>
<p>This function completely overwrites the previous position. See Move to apply an offset based on the previous position instead. The default position of a transformable object is (0, 0).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the new position </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the new position</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a86b461d6a941ad390c2ad8b6a4a20391" title="Move the object by a given offset.">move</a>, <a class="el" href="classsf_1_1Transformable.htm#a6a0552d8cf155b7df25f6ceda8ee45a5" title="get the position of the object">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af1a42209ce2b5d3f07b00f917bcd8015"></a><!-- doxytag: member="sf::Transformable::setPosition" ref="af1a42209ce2b5d3f07b00f917bcd8015" args="(const Vector2f &amp;position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a4dbfb1a7c80688b0b4c477d706550208">sf::Transformable::setPosition</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the position of the object </p>
<p>This function completely overwrites the previous position. See Move to apply an offset based on the previous position instead. The default position of a transformable object is (0, 0).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>New position</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a86b461d6a941ad390c2ad8b6a4a20391" title="Move the object by a given offset.">move</a>, <a class="el" href="classsf_1_1Transformable.htm#a6a0552d8cf155b7df25f6ceda8ee45a5" title="get the position of the object">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a32baf2bf1a74699b03bf8c95030a38ed"></a><!-- doxytag: member="sf::Transformable::setRotation" ref="a32baf2bf1a74699b03bf8c95030a38ed" args="(float angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#a32baf2bf1a74699b03bf8c95030a38ed">sf::Transformable::setRotation</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>angle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the orientation of the object </p>
<p>This function completely overwrites the previous rotation. See Rotate to add an angle based on the previous rotation instead. The default rotation of a transformable object is 0.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">angle</td><td>New rotation, in degrees</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#af8a5ffddc0d93f238fee3bf8efe1ebda" title="Rotate the object.">rotate</a>, <a class="el" href="classsf_1_1Transformable.htm#ad783a7e9971398ec613d22455252809e" title="get the orientation of the object">getRotation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaec50b46b3f41b054763304d1e727471"></a><!-- doxytag: member="sf::Transformable::setScale" ref="aaec50b46b3f41b054763304d1e727471" args="(float factorX, float factorY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#aaec50b46b3f41b054763304d1e727471">sf::Transformable::setScale</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>factorY</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the scale factors of the object </p>
<p>This function completely overwrites the previous scale. See Scale to add a factor based on the previous scale instead. The default scale of a transformable object is (1, 1).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">factorX</td><td>New horizontal scale factor </td></tr>
    <tr><td class="paramname">factorY</td><td>New vertical scale factor</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a3de0c6d8957f3cf318092f3f60656391" title="Scale the object.">scale</a>, <a class="el" href="classsf_1_1Transformable.htm#a3ea9639abd7a430ac99afb0aaf1ea562" title="get the current scale of the object">getScale</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4c48a87f1626047e448f9c1a68ff167e"></a><!-- doxytag: member="sf::Transformable::setScale" ref="a4c48a87f1626047e448f9c1a68ff167e" args="(const Vector2f &amp;factors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Transformable.htm#aaec50b46b3f41b054763304d1e727471">sf::Transformable::setScale</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2f</a> &amp;&#160;</td>
          <td class="paramname"><em>factors</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the scale factors of the object </p>
<p>This function completely overwrites the previous scale. See Scale to add a factor based on the previous scale instead. The default scale of a transformable object is (1, 1).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">factors</td><td>New scale factors</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Transformable.htm#a3de0c6d8957f3cf318092f3f60656391" title="Scale the object.">scale</a>, <a class="el" href="classsf_1_1Transformable.htm#a3ea9639abd7a430ac99afb0aaf1ea562" title="get the current scale of the object">getScale</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Transformable_8hpp_source.htm">Transformable.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
