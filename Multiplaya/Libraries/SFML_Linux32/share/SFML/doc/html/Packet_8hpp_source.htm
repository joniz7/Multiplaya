<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Packet.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_PACKET_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_PACKET_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Network/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>sf
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">class </span>String;
<a name="l00039"></a>00039 <span class="keyword">class </span>TcpSocket;
<a name="l00040"></a>00040 <span class="keyword">class </span>UdpSocket;
<a name="l00041"></a>00041 
<a name="l00047"></a><a class="code" href="classsf_1_1Packet.htm">00047</a> <span class="keyword">class </span>SFML_NETWORK_API <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049     <span class="comment">// A bool-like type that cannot be converted to integer or pointer types</span>
<a name="l00050"></a>00050     <span class="keyword">typedef</span> bool (<a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>::*BoolType)(std::size_t);
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="keyword">public</span> :
<a name="l00053"></a>00053 
<a name="l00060"></a>00060     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>();
<a name="l00061"></a>00061 
<a name="l00066"></a>00066     <span class="keyword">virtual</span> ~<a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>();
<a name="l00067"></a>00067 
<a name="l00077"></a>00077     <span class="keywordtype">void</span> append(<span class="keyword">const</span> <span class="keywordtype">void</span>* data, std::size_t sizeInBytes);
<a name="l00078"></a>00078 
<a name="l00087"></a>00087     <span class="keywordtype">void</span> clear();
<a name="l00088"></a>00088 
<a name="l00102"></a>00102     <span class="keyword">const</span> <span class="keywordtype">void</span>* getData() <span class="keyword">const</span>;
<a name="l00103"></a>00103 
<a name="l00115"></a>00115     std::size_t getDataSize() <span class="keyword">const</span>;
<a name="l00116"></a>00116 
<a name="l00129"></a>00129     <span class="keywordtype">bool</span> endOfPacket() <span class="keyword">const</span>;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 <span class="keyword">public</span>:
<a name="l00132"></a>00132 
<a name="l00171"></a>00171     operator BoolType() <span class="keyword">const</span>;
<a name="l00172"></a>00172 
<a name="l00177"></a>00177     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(<span class="keywordtype">bool</span>&amp;         data);
<a name="l00178"></a>00178     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(Int8&amp;         data);
<a name="l00179"></a>00179     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(Uint8&amp;        data);
<a name="l00180"></a>00180     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(Int16&amp;        data);
<a name="l00181"></a>00181     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(Uint16&amp;       data);
<a name="l00182"></a>00182     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(Int32&amp;        data);
<a name="l00183"></a>00183     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(Uint32&amp;       data);
<a name="l00184"></a>00184     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(<span class="keywordtype">float</span>&amp;        data);
<a name="l00185"></a>00185     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(<span class="keywordtype">double</span>&amp;       data);
<a name="l00186"></a>00186     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(<span class="keywordtype">char</span>*         data);
<a name="l00187"></a>00187     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(std::string&amp;  data);
<a name="l00188"></a>00188     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(<span class="keywordtype">wchar_t</span>*      data);
<a name="l00189"></a>00189     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(std::wstring&amp; data);
<a name="l00190"></a>00190     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &gt;&gt;(<a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp;       data);
<a name="l00191"></a>00191 
<a name="l00196"></a>00196     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keywordtype">bool</span>                data);
<a name="l00197"></a>00197     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(Int8                data);
<a name="l00198"></a>00198     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(Uint8               data);
<a name="l00199"></a>00199     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(Int16               data);
<a name="l00200"></a>00200     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(Uint16              data);
<a name="l00201"></a>00201     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(Int32               data);
<a name="l00202"></a>00202     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(Uint32              data);
<a name="l00203"></a>00203     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keywordtype">float</span>               data);
<a name="l00204"></a>00204     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keywordtype">double</span>              data);
<a name="l00205"></a>00205     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keyword">const</span> <span class="keywordtype">char</span>*         data);
<a name="l00206"></a>00206     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keyword">const</span> std::string&amp;  data);
<a name="l00207"></a>00207     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>*      data);
<a name="l00208"></a>00208     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keyword">const</span> std::wstring&amp; data);
<a name="l00209"></a>00209     <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; operator &lt;&lt;(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp;       data);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="keyword">protected</span>:
<a name="l00212"></a>00212 
<a name="l00213"></a>00213     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol.">TcpSocket</a>;
<a name="l00214"></a>00214     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1UdpSocket.htm" title="Specialized socket using the UDP protocol.">UdpSocket</a>;
<a name="l00215"></a>00215 
<a name="l00234"></a>00234     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">void</span>* onSend(std::size_t&amp; size);
<a name="l00235"></a>00235 
<a name="l00253"></a>00253     <span class="keyword">virtual</span> <span class="keywordtype">void</span> onReceive(<span class="keyword">const</span> <span class="keywordtype">void</span>* data, std::size_t size);
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 <span class="keyword">private</span> :
<a name="l00256"></a>00256 
<a name="l00261"></a>00261     <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; right) <span class="keyword">const</span>;
<a name="l00262"></a>00262     <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> <a class="code" href="classsf_1_1Packet.htm" title="Utility class to build blocks of data to transfer over the network.">Packet</a>&amp; right) <span class="keyword">const</span>;
<a name="l00263"></a>00263 
<a name="l00274"></a>00274     <span class="keywordtype">bool</span> checkSize(std::size_t size);
<a name="l00275"></a>00275 
<a name="l00277"></a>00277     <span class="comment">// Member data</span>
<a name="l00279"></a>00279 <span class="comment"></span>    std::vector&lt;char&gt; m_data;    
<a name="l00280"></a>00280     std::size_t       m_readPos; 
<a name="l00281"></a>00281     <span class="keywordtype">bool</span>              m_isValid; 
<a name="l00282"></a>00282 };
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 } <span class="comment">// namespace sf</span>
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 <span class="preprocessor">#endif // SFML_PACKET_HPP</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>
<a name="l00289"></a>00289 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
