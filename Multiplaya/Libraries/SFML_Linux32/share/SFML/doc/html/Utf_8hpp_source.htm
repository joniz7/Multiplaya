<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Utf.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_UTF_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_UTF_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Config.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;locale&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 <span class="keyword">template</span> &lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N&gt;
<a name="l00041"></a>00041 <span class="keyword">class </span>Utf;
<a name="l00042"></a>00042 
<a name="l00047"></a>00047 <span class="keyword">template</span> &lt;&gt;
<a name="l00048"></a><a class="code" href="classsf_1_1Utf_3_018_01_4.htm">00048</a> <span class="keyword">class </span><a class="code" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">Utf</a>&lt;8&gt;
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 <span class="keyword">public</span> :
<a name="l00051"></a>00051 
<a name="l00066"></a>00066     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00067"></a>00067     <span class="keyword">static</span> In decode(In begin, In end, Uint32&amp; output, Uint32 replacement = 0);
<a name="l00068"></a>00068 
<a name="l00082"></a>00082     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Out&gt;
<a name="l00083"></a>00083     <span class="keyword">static</span> Out encode(Uint32 input, Out output, Uint8 replacement = 0);
<a name="l00084"></a>00084 
<a name="l00097"></a>00097     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00098"></a>00098     <span class="keyword">static</span> In next(In begin, In end);
<a name="l00099"></a>00099 
<a name="l00113"></a>00113     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00114"></a>00114     <span class="keyword">static</span> std::size_t count(In begin, In end);
<a name="l00115"></a>00115 
<a name="l00130"></a>00130     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00131"></a>00131     <span class="keyword">static</span> Out fromAnsi(In begin, In end, Out output, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00132"></a>00132 
<a name="l00143"></a>00143     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00144"></a>00144     <span class="keyword">static</span> Out fromWide(In begin, In end, Out output);
<a name="l00145"></a>00145 
<a name="l00156"></a>00156     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00157"></a>00157     <span class="keyword">static</span> Out fromLatin1(In begin, In end, Out output);
<a name="l00158"></a>00158 
<a name="l00174"></a>00174     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00175"></a>00175     <span class="keyword">static</span> Out toAnsi(In begin, In end, Out output, <span class="keywordtype">char</span> replacement = 0, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00176"></a>00176 
<a name="l00188"></a>00188     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00189"></a>00189     <span class="keyword">static</span> Out toWide(In begin, In end, Out output, <span class="keywordtype">wchar_t</span> replacement = 0);
<a name="l00190"></a>00190 
<a name="l00202"></a>00202     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00203"></a>00203     <span class="keyword">static</span> Out toLatin1(In begin, In end, Out output, <span class="keywordtype">char</span> replacement = 0);
<a name="l00204"></a>00204 
<a name="l00220"></a>00220     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00221"></a>00221     <span class="keyword">static</span> Out toUtf8(In begin, In end, Out output);
<a name="l00222"></a>00222 
<a name="l00233"></a>00233     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00234"></a>00234     <span class="keyword">static</span> Out toUtf16(In begin, In end, Out output);
<a name="l00235"></a>00235 
<a name="l00246"></a>00246     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00247"></a>00247     <span class="keyword">static</span> Out toUtf32(In begin, In end, Out output);
<a name="l00248"></a>00248 };
<a name="l00249"></a>00249 
<a name="l00254"></a>00254 <span class="keyword">template</span> &lt;&gt;
<a name="l00255"></a><a class="code" href="classsf_1_1Utf_3_0116_01_4.htm">00255</a> <span class="keyword">class </span><a class="code" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">Utf</a>&lt;16&gt;
<a name="l00256"></a>00256 {
<a name="l00257"></a>00257 <span class="keyword">public</span> :
<a name="l00258"></a>00258 
<a name="l00273"></a>00273     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00274"></a>00274     <span class="keyword">static</span> In decode(In begin, In end, Uint32&amp; output, Uint32 replacement = 0);
<a name="l00275"></a>00275 
<a name="l00289"></a>00289     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Out&gt;
<a name="l00290"></a>00290     <span class="keyword">static</span> Out encode(Uint32 input, Out output, Uint16 replacement = 0);
<a name="l00291"></a>00291 
<a name="l00304"></a>00304     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00305"></a>00305     <span class="keyword">static</span> In next(In begin, In end);
<a name="l00306"></a>00306 
<a name="l00320"></a>00320     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00321"></a>00321     <span class="keyword">static</span> std::size_t count(In begin, In end);
<a name="l00322"></a>00322 
<a name="l00337"></a>00337     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00338"></a>00338     <span class="keyword">static</span> Out fromAnsi(In begin, In end, Out output, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00339"></a>00339 
<a name="l00350"></a>00350     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00351"></a>00351     <span class="keyword">static</span> Out fromWide(In begin, In end, Out output);
<a name="l00352"></a>00352 
<a name="l00363"></a>00363     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00364"></a>00364     <span class="keyword">static</span> Out fromLatin1(In begin, In end, Out output);
<a name="l00365"></a>00365 
<a name="l00381"></a>00381     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00382"></a>00382     <span class="keyword">static</span> Out toAnsi(In begin, In end, Out output, <span class="keywordtype">char</span> replacement = 0, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00383"></a>00383 
<a name="l00395"></a>00395     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00396"></a>00396     <span class="keyword">static</span> Out toWide(In begin, In end, Out output, <span class="keywordtype">wchar_t</span> replacement = 0);
<a name="l00397"></a>00397 
<a name="l00409"></a>00409     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00410"></a>00410     <span class="keyword">static</span> Out toLatin1(In begin, In end, Out output, <span class="keywordtype">char</span> replacement = 0);
<a name="l00411"></a>00411 
<a name="l00422"></a>00422     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00423"></a>00423     <span class="keyword">static</span> Out toUtf8(In begin, In end, Out output);
<a name="l00424"></a>00424 
<a name="l00440"></a>00440     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00441"></a>00441     <span class="keyword">static</span> Out toUtf16(In begin, In end, Out output);
<a name="l00442"></a>00442 
<a name="l00453"></a>00453     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00454"></a>00454     <span class="keyword">static</span> Out toUtf32(In begin, In end, Out output);
<a name="l00455"></a>00455 };
<a name="l00456"></a>00456 
<a name="l00461"></a>00461 <span class="keyword">template</span> &lt;&gt;
<a name="l00462"></a><a class="code" href="classsf_1_1Utf_3_0132_01_4.htm">00462</a> <span class="keyword">class </span><a class="code" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">Utf</a>&lt;32&gt;
<a name="l00463"></a>00463 {
<a name="l00464"></a>00464 <span class="keyword">public</span> :
<a name="l00465"></a>00465 
<a name="l00481"></a>00481     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00482"></a>00482     <span class="keyword">static</span> In decode(In begin, In end, Uint32&amp; output, Uint32 replacement = 0);
<a name="l00483"></a>00483 
<a name="l00498"></a>00498     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Out&gt;
<a name="l00499"></a>00499     <span class="keyword">static</span> Out encode(Uint32 input, Out output, Uint32 replacement = 0);
<a name="l00500"></a>00500 
<a name="l00513"></a>00513     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00514"></a>00514     <span class="keyword">static</span> In next(In begin, In end);
<a name="l00515"></a>00515 
<a name="l00528"></a>00528     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00529"></a>00529     <span class="keyword">static</span> std::size_t count(In begin, In end);
<a name="l00530"></a>00530 
<a name="l00545"></a>00545     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00546"></a>00546     <span class="keyword">static</span> Out fromAnsi(In begin, In end, Out output, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00547"></a>00547 
<a name="l00558"></a>00558     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00559"></a>00559     <span class="keyword">static</span> Out fromWide(In begin, In end, Out output);
<a name="l00560"></a>00560 
<a name="l00571"></a>00571     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00572"></a>00572     <span class="keyword">static</span> Out fromLatin1(In begin, In end, Out output);
<a name="l00573"></a>00573 
<a name="l00589"></a>00589     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00590"></a>00590     <span class="keyword">static</span> Out toAnsi(In begin, In end, Out output, <span class="keywordtype">char</span> replacement = 0, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00591"></a>00591 
<a name="l00603"></a>00603     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00604"></a>00604     <span class="keyword">static</span> Out toWide(In begin, In end, Out output, <span class="keywordtype">wchar_t</span> replacement = 0);
<a name="l00605"></a>00605 
<a name="l00617"></a>00617     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00618"></a>00618     <span class="keyword">static</span> Out toLatin1(In begin, In end, Out output, <span class="keywordtype">char</span> replacement = 0);
<a name="l00619"></a>00619 
<a name="l00630"></a>00630     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00631"></a>00631     <span class="keyword">static</span> Out toUtf8(In begin, In end, Out output);
<a name="l00632"></a>00632 
<a name="l00643"></a>00643     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00644"></a>00644     <span class="keyword">static</span> Out toUtf16(In begin, In end, Out output);
<a name="l00645"></a>00645 
<a name="l00661"></a>00661     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In, <span class="keyword">typename</span> Out&gt;
<a name="l00662"></a>00662     <span class="keyword">static</span> Out toUtf32(In begin, In end, Out output);
<a name="l00663"></a>00663 
<a name="l00677"></a>00677     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00678"></a>00678     <span class="keyword">static</span> Uint32 decodeAnsi(In input, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00679"></a>00679 
<a name="l00692"></a>00692     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> In&gt;
<a name="l00693"></a>00693     <span class="keyword">static</span> Uint32 decodeWide(In input);
<a name="l00694"></a>00694 
<a name="l00710"></a>00710     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Out&gt;
<a name="l00711"></a>00711     <span class="keyword">static</span> Out encodeAnsi(Uint32 codepoint, Out output, <span class="keywordtype">char</span> replacement = 0, <span class="keyword">const</span> std::locale&amp; locale = std::locale());
<a name="l00712"></a>00712 
<a name="l00727"></a>00727     <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Out&gt;
<a name="l00728"></a>00728     <span class="keyword">static</span> Out encodeWide(Uint32 codepoint, Out output, <span class="keywordtype">wchar_t</span> replacement = 0);
<a name="l00729"></a>00729 };
<a name="l00730"></a>00730 
<a name="l00731"></a>00731 <span class="preprocessor">#include &lt;SFML/System/Utf.inl&gt;</span>
<a name="l00732"></a>00732 
<a name="l00733"></a>00733 <span class="comment">// Make typedefs to get rid of the template syntax</span>
<a name="l00734"></a>00734 <span class="keyword">typedef</span> <a class="code" href="classsf_1_1Utf_3_018_01_4.htm" title="Specialization of the Utf template for UTF-8.">Utf&lt;8&gt;</a>  <a class="code" href="classsf_1_1Utf_3_018_01_4.htm" title="Specialization of the Utf template for UTF-8.">Utf8</a>;
<a name="l00735"></a>00735 <span class="keyword">typedef</span> <a class="code" href="classsf_1_1Utf_3_0116_01_4.htm" title="Specialization of the Utf template for UTF-16.">Utf&lt;16&gt;</a> <a class="code" href="classsf_1_1Utf_3_0116_01_4.htm" title="Specialization of the Utf template for UTF-16.">Utf16</a>;
<a name="l00736"></a>00736 <span class="keyword">typedef</span> <a class="code" href="classsf_1_1Utf_3_0132_01_4.htm" title="Specialization of the Utf template for UTF-32.">Utf&lt;32&gt;</a> <a class="code" href="classsf_1_1Utf_3_0132_01_4.htm" title="Specialization of the Utf template for UTF-32.">Utf32</a>;
<a name="l00737"></a>00737 
<a name="l00738"></a>00738 } <span class="comment">// namespace sf</span>
<a name="l00739"></a>00739 
<a name="l00740"></a>00740 
<a name="l00741"></a>00741 <span class="preprocessor">#endif // SFML_UTF_HPP</span>
<a name="l00742"></a>00742 <span class="preprocessor"></span>
<a name="l00743"></a>00743 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
