<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1String.htm">String</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">sf::String Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsf_1_1String.htm">sf::String</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a8ec30ddc08e3a6bd11c99aed782f6dfe">begin</a>()</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a09bbf7704847ed35bf1c18aca6fba2a2">begin</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a391c1b4950cbf3d3f8040cea73af2969">clear</a>()</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">ConstIterator</a> typedef</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ac823012f39cb6f61100418876e99d53b">end</a>()</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ab6fb6ee1b21bd5dbdc9d6840f035eb79">end</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#aaa78a0a46b3fbe200a4ccdedc326eb93">erase</a>(std::size_t position, std::size_t count=1)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ae1fc8d6ced3b6082853f8013ea051b5c">find</a>(const String &amp;str, std::size_t start=0) const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#af2d4e70869ebd38e225c6796e1325ae4">getData</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a635d75c4cd830d5f639a41815dd0ce23">getSize</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ad0b1455deabf07af13ee79812e05fa02">insert</a>(std::size_t position, const String &amp;str)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#abaadecaf12a6b41c54d725c75fd28527">InvalidPos</a></td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a6c43f0cbe84cf17fa6ba93d58b75fcdc">isEmpty</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">Iterator</a> typedef</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a3664f92c3b488bf9f60f6b8eafe1844d">operator std::string</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a20d50d45020d1dbe1779dda69ee83732">operator std::wstring</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a2b592c36be218b4811795fdc84eecc69">operator!=</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a55ef2bf7dc6b295ef7127b0bc1e58760">operator+</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ae6563ce2c243ae2160eea8a354199f4e">operator+=</a>(const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr bgcolor="#f0f0f0"><td><b>operator&lt;</b> (defined in <a class="el" href="classsf_1_1String.htm">sf::String</a>)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ac2ca5a7703402a2bbafd85eec6d1e846">operator&lt;</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#abd342b6094b81cd086c7929b53b112ae">operator&lt;=</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a096255c066e5ef8c31952216b8ce9c42">operator=</a>(const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr bgcolor="#f0f0f0"><td><b>operator==</b> (defined in <a class="el" href="classsf_1_1String.htm">sf::String</a>)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a2a385459fa9a237e61a712fa956d489e">operator==</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a5efc1eca58cf5c17d01eb8501d303538">operator&gt;</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a8d2979d7829d6616330a768956f251e1">operator&gt;=</a>(const String &amp;left, const String &amp;right)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a649b89a65866bf03652f7b5cb6de3bb6">operator[]</a>(std::size_t index) const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#abc989da7f4fb873ab29188d40772ab24">operator[]</a>(std::size_t index)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">String</a>()</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#ac9df7f7696cff164794e338f3c89ccc5">String</a>(char ansiChar, const std::locale &amp;locale=std::locale())</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#aefaa202d2aa5ff85b4f75a5983367e86">String</a>(wchar_t wideChar)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a8e1a5027416d121187908e2ed77079ff">String</a>(Uint32 utf32Char)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a57d2b8c289f9894f859564cad034bfc7">String</a>(const char *ansiString, const std::locale &amp;locale=std::locale())</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a0aa41dcbd17b0c36c74d03d3b0147f1e">String</a>(const std::string &amp;ansiString, const std::locale &amp;locale=std::locale())</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a5742d0a9b0c754f711820c2b5c40fa55">String</a>(const wchar_t *wideString)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a5e38151340af4f9a5f74ad24c0664074">String</a>(const std::wstring &amp;wideString)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#aea3629adf19f9fe713d4946f6c75b214">String</a>(const Uint32 *utf32String)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a6eee86dbe75d16bbcc26e97416c2e1ca">String</a>(const std::basic_string&lt; Uint32 &gt; &amp;utf32String)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#af862594d3c4070d8ddbf08cf8dce4f59">String</a>(const String &amp;copy)</td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4">toAnsiString</a>(const std::locale &amp;locale=std::locale()) const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1String.htm#afd8b085ad7255543e4dc1285389d2d82">toWideString</a>() const </td><td><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td></td></tr>
</table></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
