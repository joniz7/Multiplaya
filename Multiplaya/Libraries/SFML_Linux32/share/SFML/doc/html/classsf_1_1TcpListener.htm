<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1TcpListener.htm">TcpListener</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::TcpListener Class Reference<div class="ingroups"><a class="el" href="group__network.htm">Network module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::TcpListener" --><!-- doxytag: inherits="sf::Socket" -->
<p><a class="el" href="classsf_1_1Socket.htm" title="Base class for all the socket types.">Socket</a> that listens to new TCP connections.  
 <a href="classsf_1_1TcpListener.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="TcpListener_8hpp_source.htm">TcpListener.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::TcpListener:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1TcpListener.png" usemap="#sf::TcpListener_map" alt=""/>
  <map id="sf::TcpListener_map" name="sf::TcpListener_map">
<area href="classsf_1_1Socket.htm" title="Base class for all the socket types." alt="sf::Socket" shape="rect" coords="0,56,105,80"/>
<area href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable." alt="sf::NonCopyable" shape="rect" coords="0,0,105,24"/>
</map>
 </div></div>

<p><a href="classsf_1_1TcpListener-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">Status</a> { <br/>
&#160;&#160;<a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dca1de3a85bc56d3ae85b3d0f3cfd04ae90">Done</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dca8554848daae98f996e131bdeed076c09">NotReady</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dcab215141f756acdc23c67fad149710eb1">Disconnected</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dca1dc9854433a28c22e192721179a2df5d">Error</a>
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Status codes that may be returned by socket functions.  <a href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classsf_1_1Socket.htm#a5deb2c955fd347259c3a20d27b2481aaa5a3c30fd128895403afc11076f461b19">AnyPort</a> =  0
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Some special values used by sockets.  <a href="classsf_1_1Socket.htm#a5deb2c955fd347259c3a20d27b2481aa">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1TcpListener.htm#a59a1db5b6f4711a3e57390da2f8d9630">TcpListener</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a59a1db5b6f4711a3e57390da2f8d9630"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1TcpListener.htm#a3bb62b92684cd1a14b14efdaf0471440">getLocalPort</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the port to which the socket is bound locally.  <a href="#a3bb62b92684cd1a14b14efdaf0471440"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1TcpListener.htm#a409d9350d3abfea9636df8cf4a61004e">listen</a> (unsigned short port)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Start listening for connections.  <a href="#a409d9350d3abfea9636df8cf4a61004e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1TcpListener.htm#a3a00a850506bd0f9f48867a0fe59556b">close</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop listening and close the socket.  <a href="#a3a00a850506bd0f9f48867a0fe59556b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1TcpListener.htm#ae2c83ce5a64d50b68180c46bef0a7346">accept</a> (<a class="el" href="classsf_1_1TcpSocket.htm">TcpSocket</a> &amp;socket)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Accept a new connection.  <a href="#ae2c83ce5a64d50b68180c46bef0a7346"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#a165fc1423e281ea2714c70303d3a9782">setBlocking</a> (bool blocking)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the blocking state of the socket.  <a href="#a165fc1423e281ea2714c70303d3a9782"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#a0ec0d831b015e32eb5935fd2a9f8c67c">isBlocking</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether the socket is in blocking or non-blocking mode.  <a href="#a0ec0d831b015e32eb5935fd2a9f8c67c"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-types"></a>
Protected Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#a5d3ff44e56e68f02816bb0fabc34adf8">Type</a> { <br/>
&#160;&#160;<a class="el" href="classsf_1_1Socket.htm#a5d3ff44e56e68f02816bb0fabc34adf8acc02e97e90234b957eaad4dff7f22214">Tcp</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1Socket.htm#a5d3ff44e56e68f02816bb0fabc34adf8a6ebf3094830db4820191a327f3cc6ce2">Udp</a>
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Types of protocols that the socket can use.  <a href="classsf_1_1Socket.htm#a5d3ff44e56e68f02816bb0fabc34adf8">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SocketHandle&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#ac0c63b13e61da8294bf54e888e97f9a3">getHandle</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the internal handle of the socket.  <a href="#ac0c63b13e61da8294bf54e888e97f9a3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#aafbe140f4b1921e0d19e88cf7a61dcbc">create</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the internal representation of the socket.  <a href="#aafbe140f4b1921e0d19e88cf7a61dcbc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Socket.htm#af1dd898f7aa3ead7ff7b2d1c20e97781">create</a> (SocketHandle handle)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the internal representation of the socket from a socket handle.  <a href="#af1dd898f7aa3ead7ff7b2d1c20e97781"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1Socket.htm" title="Base class for all the socket types.">Socket</a> that listens to new TCP connections. </p>
<p>A listener socket is a special type of socket that listens to a given port and waits for connections on that port.</p>
<p>This is all it can do.</p>
<p>When a new connection is received, you must call accept and the listener returns a new instance of <a class="el" href="classsf_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol.">sf::TcpSocket</a> that is properly initialized and can be used to communicate with the new client.</p>
<p><a class="el" href="classsf_1_1Listener.htm" title="The audio listener is the point in the scene from where all the sounds are heard.">Listener</a> sockets are specific to the TCP protocol, UDP sockets are connectionless and can therefore communicate directly. As a consequence, a listener socket will always return the new connections as <a class="el" href="classsf_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol.">sf::TcpSocket</a> instances.</p>
<p>A listener is automatically closed on destruction, like all other types of socket. However if you want to stop listening before the socket is destroyed, you can call its <a class="el" href="classsf_1_1TcpListener.htm#a3a00a850506bd0f9f48867a0fe59556b" title="Stop listening and close the socket.">close()</a> function.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <span class="comment">// Create a listener socket and make it wait for new</span>
 <span class="comment">// connections on port 55001</span>
 <a class="code" href="classsf_1_1TcpListener.htm" title="Socket that listens to new TCP connections.">sf::TcpListener</a> listener;
 listener.<a class="code" href="classsf_1_1TcpListener.htm#a409d9350d3abfea9636df8cf4a61004e" title="Start listening for connections.">listen</a>(55001);

 <span class="comment">// Endless loop that waits for new connections</span>
 <span class="keywordflow">while</span> (running)
 {
     <a class="code" href="classsf_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol.">sf::TcpSocket</a> client;
     <span class="keywordflow">if</span> (listener.<a class="code" href="classsf_1_1TcpListener.htm#ae2c83ce5a64d50b68180c46bef0a7346" title="Accept a new connection.">accept</a>(client) == <a class="code" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dca1de3a85bc56d3ae85b3d0f3cfd04ae90" title="The socket has sent / received the data.">sf::Socket::Done</a>)
     {
         <span class="comment">// A new client just connected!</span>
         std::cout &lt;&lt; <span class="stringliteral">&quot;New connection received from &quot;</span> &lt;&lt; client.<a class="code" href="classsf_1_1TcpSocket.htm#a7904ca6ab9e018021e305a3aeb7a1b9a" title="Get the address of the connected peer.">getRemoteAddress</a>() &lt;&lt; std::endl;
         doSomethingWith(client);
     }
 }
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol.">sf::TcpSocket</a>, <a class="el" href="classsf_1_1Socket.htm" title="Base class for all the socket types.">sf::Socket</a> </dd></dl>

<p>Definition at line <a class="el" href="TcpListener_8hpp_source.htm#l00043">43</a> of file <a class="el" href="TcpListener_8hpp_source.htm">TcpListener.hpp</a>.</p>
</div><hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a5deb2c955fd347259c3a20d27b2481aa"></a><!-- doxytag: member="sf::TcpListener::@2" ref="a5deb2c955fd347259c3a20d27b2481aa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Some special values used by sockets. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a5deb2c955fd347259c3a20d27b2481aaa5a3c30fd128895403afc11076f461b19"></a><!-- doxytag: member="AnyPort" ref="a5deb2c955fd347259c3a20d27b2481aaa5a3c30fd128895403afc11076f461b19" args="" -->AnyPort</em>&nbsp;</td><td>
<p>Special value that tells the system to pick any available port. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="Socket_8hpp_source.htm#l00065">65</a> of file <a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a51bf0fd51057b98a10fbb866246176dc"></a><!-- doxytag: member="sf::TcpListener::Status" ref="a51bf0fd51057b98a10fbb866246176dc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">sf::Socket::Status</a><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Status codes that may be returned by socket functions. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a51bf0fd51057b98a10fbb866246176dca1de3a85bc56d3ae85b3d0f3cfd04ae90"></a><!-- doxytag: member="Done" ref="a51bf0fd51057b98a10fbb866246176dca1de3a85bc56d3ae85b3d0f3cfd04ae90" args="" -->Done</em>&nbsp;</td><td>
<p>The socket has sent / received the data. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a51bf0fd51057b98a10fbb866246176dca8554848daae98f996e131bdeed076c09"></a><!-- doxytag: member="NotReady" ref="a51bf0fd51057b98a10fbb866246176dca8554848daae98f996e131bdeed076c09" args="" -->NotReady</em>&nbsp;</td><td>
<p>The socket is not ready to send / receive data yet. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a51bf0fd51057b98a10fbb866246176dcab215141f756acdc23c67fad149710eb1"></a><!-- doxytag: member="Disconnected" ref="a51bf0fd51057b98a10fbb866246176dcab215141f756acdc23c67fad149710eb1" args="" -->Disconnected</em>&nbsp;</td><td>
<p>The TCP socket has been disconnected. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a51bf0fd51057b98a10fbb866246176dca1dc9854433a28c22e192721179a2df5d"></a><!-- doxytag: member="Error" ref="a51bf0fd51057b98a10fbb866246176dca1dc9854433a28c22e192721179a2df5d" args="" -->Error</em>&nbsp;</td><td>
<p>An unexpected error happened. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="Socket_8hpp_source.htm#l00053">53</a> of file <a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5d3ff44e56e68f02816bb0fabc34adf8"></a><!-- doxytag: member="sf::TcpListener::Type" ref="a5d3ff44e56e68f02816bb0fabc34adf8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classsf_1_1Socket.htm#a5d3ff44e56e68f02816bb0fabc34adf8">sf::Socket::Type</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Types of protocols that the socket can use. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a5d3ff44e56e68f02816bb0fabc34adf8acc02e97e90234b957eaad4dff7f22214"></a><!-- doxytag: member="Tcp" ref="a5d3ff44e56e68f02816bb0fabc34adf8acc02e97e90234b957eaad4dff7f22214" args="" -->Tcp</em>&nbsp;</td><td>
<p>TCP protocol. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a5d3ff44e56e68f02816bb0fabc34adf8a6ebf3094830db4820191a327f3cc6ce2"></a><!-- doxytag: member="Udp" ref="a5d3ff44e56e68f02816bb0fabc34adf8a6ebf3094830db4820191a327f3cc6ce2" args="" -->Udp</em>&nbsp;</td><td>
<p>UDP protocol. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="Socket_8hpp_source.htm#l00113">113</a> of file <a class="el" href="Socket_8hpp_source.htm">Socket.hpp</a>.</p>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a59a1db5b6f4711a3e57390da2f8d9630"></a><!-- doxytag: member="sf::TcpListener::TcpListener" ref="a59a1db5b6f4711a3e57390da2f8d9630" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1TcpListener.htm#a59a1db5b6f4711a3e57390da2f8d9630">sf::TcpListener::TcpListener</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ae2c83ce5a64d50b68180c46bef0a7346"></a><!-- doxytag: member="sf::TcpListener::accept" ref="ae2c83ce5a64d50b68180c46bef0a7346" args="(TcpSocket &amp;socket)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">Status</a> <a class="el" href="classsf_1_1TcpListener.htm#ae2c83ce5a64d50b68180c46bef0a7346">sf::TcpListener::accept</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1TcpSocket.htm">TcpSocket</a> &amp;&#160;</td>
          <td class="paramname"><em>socket</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Accept a new connection. </p>
<p>If the socket is in blocking mode, this function will not return until a connection is actually received.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">socket</td><td><a class="el" href="classsf_1_1Socket.htm" title="Base class for all the socket types.">Socket</a> that will hold the new connection</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Status code</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1TcpListener.htm#a409d9350d3abfea9636df8cf4a61004e" title="Start listening for connections.">listen</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3a00a850506bd0f9f48867a0fe59556b"></a><!-- doxytag: member="sf::TcpListener::close" ref="a3a00a850506bd0f9f48867a0fe59556b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1TcpListener.htm#a3a00a850506bd0f9f48867a0fe59556b">sf::TcpListener::close</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop listening and close the socket. </p>
<p>This function gracefully stops the listener. If the socket is not listening, this function has no effect.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1TcpListener.htm#a409d9350d3abfea9636df8cf4a61004e" title="Start listening for connections.">listen</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classsf_1_1Socket.htm#a71f2f5c2aa99e01cafe824fee4c573be">sf::Socket</a>.</p>

</div>
</div>
<a class="anchor" id="aafbe140f4b1921e0d19e88cf7a61dcbc"></a><!-- doxytag: member="sf::TcpListener::create" ref="aafbe140f4b1921e0d19e88cf7a61dcbc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Socket.htm#aafbe140f4b1921e0d19e88cf7a61dcbc">sf::Socket::create</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create the internal representation of the socket. </p>
<p>This function can only be accessed by derived classes. </p>

</div>
</div>
<a class="anchor" id="af1dd898f7aa3ead7ff7b2d1c20e97781"></a><!-- doxytag: member="sf::TcpListener::create" ref="af1dd898f7aa3ead7ff7b2d1c20e97781" args="(SocketHandle handle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Socket.htm#aafbe140f4b1921e0d19e88cf7a61dcbc">sf::Socket::create</a> </td>
          <td>(</td>
          <td class="paramtype">SocketHandle&#160;</td>
          <td class="paramname"><em>handle</em></td><td>)</td>
          <td><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create the internal representation of the socket from a socket handle. </p>
<p>This function can only be accessed by derived classes.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>OS-specific handle of the socket to wrap </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac0c63b13e61da8294bf54e888e97f9a3"></a><!-- doxytag: member="sf::TcpListener::getHandle" ref="ac0c63b13e61da8294bf54e888e97f9a3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SocketHandle <a class="el" href="classsf_1_1Socket.htm#ac0c63b13e61da8294bf54e888e97f9a3">sf::Socket::getHandle</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the internal handle of the socket. </p>
<p>The returned handle may be invalid if the socket was not created yet (or already destroyed). This function can only be accessed by derived classes.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The internal (OS-specific) handle of the socket </dd></dl>

</div>
</div>
<a class="anchor" id="a3bb62b92684cd1a14b14efdaf0471440"></a><!-- doxytag: member="sf::TcpListener::getLocalPort" ref="a3bb62b92684cd1a14b14efdaf0471440" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short <a class="el" href="classsf_1_1TcpListener.htm#a3bb62b92684cd1a14b14efdaf0471440">sf::TcpListener::getLocalPort</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the port to which the socket is bound locally. </p>
<p>If the socket is not listening to a port, this function returns 0.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Port to which the socket is bound</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1TcpListener.htm#a409d9350d3abfea9636df8cf4a61004e" title="Start listening for connections.">listen</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0ec0d831b015e32eb5935fd2a9f8c67c"></a><!-- doxytag: member="sf::TcpListener::isBlocking" ref="a0ec0d831b015e32eb5935fd2a9f8c67c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Socket.htm#a0ec0d831b015e32eb5935fd2a9f8c67c">sf::Socket::isBlocking</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Tell whether the socket is in blocking or non-blocking mode. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the socket is blocking, false otherwise</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Socket.htm#a165fc1423e281ea2714c70303d3a9782" title="Set the blocking state of the socket.">setBlocking</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a409d9350d3abfea9636df8cf4a61004e"></a><!-- doxytag: member="sf::TcpListener::listen" ref="a409d9350d3abfea9636df8cf4a61004e" args="(unsigned short port)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Socket.htm#a51bf0fd51057b98a10fbb866246176dc">Status</a> <a class="el" href="classsf_1_1TcpListener.htm#a409d9350d3abfea9636df8cf4a61004e">sf::TcpListener::listen</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>port</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start listening for connections. </p>
<p>This functions makes the socket listen to the specified port, waiting for new connections. If the socket was previously listening to another port, it will be stopped first and bound to the new port.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">port</td><td>Port to listen for new connections</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Status code</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1TcpListener.htm#ae2c83ce5a64d50b68180c46bef0a7346" title="Accept a new connection.">accept</a>, <a class="el" href="classsf_1_1TcpListener.htm#a3a00a850506bd0f9f48867a0fe59556b" title="Stop listening and close the socket.">close</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a165fc1423e281ea2714c70303d3a9782"></a><!-- doxytag: member="sf::TcpListener::setBlocking" ref="a165fc1423e281ea2714c70303d3a9782" args="(bool blocking)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Socket.htm#a165fc1423e281ea2714c70303d3a9782">sf::Socket::setBlocking</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>blocking</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the blocking state of the socket. </p>
<p>In blocking mode, calls will not return until they have completed their task. For example, a call to Receive in blocking mode won't return until some data was actually received. In non-blocking mode, calls will always return immediately, using the return code to signal whether there was data available or not. By default, all sockets are blocking.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">blocking</td><td>True to set the socket as blocking, false for non-blocking</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Socket.htm#a0ec0d831b015e32eb5935fd2a9f8c67c" title="Tell whether the socket is in blocking or non-blocking mode.">isBlocking</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="TcpListener_8hpp_source.htm">TcpListener.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
