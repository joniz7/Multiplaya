<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Shader.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_SHADER_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_SHADER_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Transform.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Color.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Window/GlResource.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/System/NonCopyable.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;SFML/System/Vector2.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;SFML/System/Vector3.hpp&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">namespace </span>sf
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044 <span class="keyword">class </span>InputStream;
<a name="l00045"></a>00045 <span class="keyword">class </span>Texture;
<a name="l00046"></a>00046 
<a name="l00051"></a><a class="code" href="classsf_1_1Shader.htm">00051</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment)">Shader</a> : <a class="code" href="classsf_1_1GlResource.htm" title="Base class for classes that require an OpenGL context.">GlResource</a>, <a class="code" href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable.">NonCopyable</a>
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053 <span class="keyword">public</span> :
<a name="l00054"></a>00054 
<a name="l00059"></a><a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3">00059</a>     <span class="keyword">enum</span> <a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3" title="Types of shaders.">Type</a>
<a name="l00060"></a>00060     {
<a name="l00061"></a><a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3a8718008f827eb32e29bbdd1791c62dce">00061</a>         <a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3a8718008f827eb32e29bbdd1791c62dce" title="Vertex shader.">Vertex</a>,  
<a name="l00062"></a><a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3ace6e88eec3a56b2e55ee3c8e64e9b89a">00062</a>         Fragment 
<a name="l00063"></a>00063     };
<a name="l00064"></a>00064 
<a name="l00070"></a><a class="code" href="structsf_1_1Shader_1_1CurrentTextureType.htm">00070</a>     <span class="keyword">struct </span><a class="code" href="structsf_1_1Shader_1_1CurrentTextureType.htm" title="Special type/value that can be passed to setParameter, and that represents the texture of the object ...">CurrentTextureType</a> {};
<a name="l00071"></a>00071     <span class="keyword">static</span> <a class="code" href="structsf_1_1Shader_1_1CurrentTextureType.htm" title="Special type/value that can be passed to setParameter, and that represents the texture of the object ...">CurrentTextureType</a> CurrentTexture;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 <span class="keyword">public</span> :
<a name="l00074"></a>00074 
<a name="l00081"></a>00081     <a class="code" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment)">Shader</a>();
<a name="l00082"></a>00082 
<a name="l00087"></a>00087     ~<a class="code" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment)">Shader</a>();
<a name="l00088"></a>00088 
<a name="l00108"></a>00108     <span class="keywordtype">bool</span> loadFromFile(<span class="keyword">const</span> std::string&amp; filename, <a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3" title="Types of shaders.">Type</a> type);
<a name="l00109"></a>00109 
<a name="l00129"></a>00129     <span class="keywordtype">bool</span> loadFromFile(<span class="keyword">const</span> std::string&amp; vertexShaderFilename, <span class="keyword">const</span> std::string&amp; fragmentShaderFilename);
<a name="l00130"></a>00130 
<a name="l00149"></a>00149     <span class="keywordtype">bool</span> loadFromMemory(<span class="keyword">const</span> std::string&amp; shader, <a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3" title="Types of shaders.">Type</a> type);
<a name="l00150"></a>00150 
<a name="l00170"></a>00170     <span class="keywordtype">bool</span> loadFromMemory(<span class="keyword">const</span> std::string&amp; vertexShader, <span class="keyword">const</span> std::string&amp; fragmentShader);
<a name="l00171"></a>00171 
<a name="l00190"></a>00190     <span class="keywordtype">bool</span> loadFromStream(<a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">InputStream</a>&amp; stream, <a class="code" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3" title="Types of shaders.">Type</a> type);
<a name="l00191"></a>00191 
<a name="l00211"></a>00211     <span class="keywordtype">bool</span> loadFromStream(<a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">InputStream</a>&amp; vertexShaderStream, <a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">InputStream</a>&amp; fragmentShaderStream);
<a name="l00212"></a>00212 
<a name="l00232"></a>00232     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keywordtype">float</span> x);
<a name="l00233"></a>00233 
<a name="l00254"></a>00254     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y);
<a name="l00255"></a>00255 
<a name="l00277"></a>00277     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z);
<a name="l00278"></a>00278 
<a name="l00301"></a>00301     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y, <span class="keywordtype">float</span> z, <span class="keywordtype">float</span> w);
<a name="l00302"></a>00302 
<a name="l00322"></a>00322     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; vector);
<a name="l00323"></a>00323 
<a name="l00343"></a>00343     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector3.htm" title="Utility template class for manipulating 3-dimensional vectors.">Vector3f</a>&amp; vector);
<a name="l00344"></a>00344 
<a name="l00370"></a>00370     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; color);
<a name="l00371"></a>00371 
<a name="l00393"></a>00393     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> <a class="code" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">sf::Transform</a>&amp; transform);
<a name="l00394"></a>00394 
<a name="l00425"></a>00425     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">const</span> <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>&amp; texture);
<a name="l00426"></a>00426 
<a name="l00448"></a>00448     <span class="keywordtype">void</span> setParameter(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="structsf_1_1Shader_1_1CurrentTextureType.htm" title="Special type/value that can be passed to setParameter, and that represents the texture of the object ...">CurrentTextureType</a>);
<a name="l00449"></a>00449 
<a name="l00466"></a>00466     <span class="keywordtype">void</span> bind() <span class="keyword">const</span>;
<a name="l00467"></a>00467 
<a name="l00478"></a>00478     <span class="keywordtype">void</span> unbind() <span class="keyword">const</span>;
<a name="l00479"></a>00479 
<a name="l00490"></a>00490     <span class="keyword">static</span> <span class="keywordtype">bool</span> isAvailable();
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="keyword">private</span> :
<a name="l00493"></a>00493 
<a name="l00506"></a>00506     <span class="keywordtype">bool</span> compile(<span class="keyword">const</span> <span class="keywordtype">char</span>* vertexShaderCode, <span class="keyword">const</span> <span class="keywordtype">char</span>* fragmentShaderCode);
<a name="l00507"></a>00507 
<a name="l00515"></a>00515     <span class="keywordtype">void</span> bindTextures() <span class="keyword">const</span>;
<a name="l00516"></a>00516 
<a name="l00518"></a>00518     <span class="comment">// Types</span>
<a name="l00520"></a>00520 <span class="comment"></span>    <span class="keyword">typedef</span> std::map&lt;int, const Texture*&gt; TextureTable;
<a name="l00521"></a>00521 
<a name="l00523"></a>00523     <span class="comment">// Member data</span>
<a name="l00525"></a>00525 <span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_shaderProgram;  
<a name="l00526"></a>00526     <span class="keywordtype">int</span>          m_currentTexture; 
<a name="l00527"></a>00527     TextureTable m_textures;       
<a name="l00528"></a>00528 };
<a name="l00529"></a>00529 
<a name="l00530"></a>00530 } <span class="comment">// namespace sf</span>
<a name="l00531"></a>00531 
<a name="l00532"></a>00532 
<a name="l00533"></a>00533 <span class="preprocessor">#endif // SFML_SHADER_HPP</span>
<a name="l00534"></a>00534 <span class="preprocessor"></span>
<a name="l00535"></a>00535 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
