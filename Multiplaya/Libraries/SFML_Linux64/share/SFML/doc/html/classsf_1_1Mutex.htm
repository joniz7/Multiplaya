<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Mutex.htm">Mutex</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Mutex Class Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Mutex" --><!-- doxytag: inherits="sf::NonCopyable" -->
<p>Blocks concurrent access to shared resources from multiple threads.  
 <a href="classsf_1_1Mutex.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Mutex_8hpp_source.htm">Mutex.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Mutex:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Mutex.png" usemap="#sf::Mutex_map" alt=""/>
  <map id="sf::Mutex_map" name="sf::Mutex_map">
<area href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable." alt="sf::NonCopyable" shape="rect" coords="0,0,105,24"/>
</map>
 </div></div>

<p><a href="classsf_1_1Mutex-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Mutex.htm#a9bd52a48320fd7b6db8a78037aad276e">Mutex</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a9bd52a48320fd7b6db8a78037aad276e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Mutex.htm#a9f76a67b7b6d3918131a692179b4e3f2">~Mutex</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a9f76a67b7b6d3918131a692179b4e3f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Mutex.htm#a1a16956a6bbea764480c1b80f2e45763">lock</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classsf_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes.">Lock</a> the mutex.  <a href="#a1a16956a6bbea764480c1b80f2e45763"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Mutex.htm#ade71268ffc5e80756652058b01c23c33">unlock</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlock the mutex.  <a href="#ade71268ffc5e80756652058b01c23c33"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Blocks concurrent access to shared resources from multiple threads. </p>
<p><a class="el" href="classsf_1_1Mutex.htm" title="Blocks concurrent access to shared resources from multiple threads.">Mutex</a> stands for "MUTual EXclusion".</p>
<p>A mutex is a synchronization object, used when multiple threads are involved.</p>
<p>When you want to protect a part of the code from being accessed simultaneously by multiple threads, you typically use a mutex. When a thread is locked by a mutex, any other thread trying to lock it will be blocked until the mutex is released by the thread that locked it. This way, you can allow only one thread at a time to access a critical region of your code.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> Database database; <span class="comment">// this is a critical resource that needs some protection</span>
 <a class="code" href="classsf_1_1Mutex.htm" title="Blocks concurrent access to shared resources from multiple threads.">sf::Mutex</a> mutex;

 <span class="keywordtype">void</span> thread1()
 {
     mutex.<a class="code" href="classsf_1_1Mutex.htm#a1a16956a6bbea764480c1b80f2e45763" title="Lock the mutex.">lock</a>(); <span class="comment">// this call will block the thread if the mutex is already locked by thread2</span>
     database.write(...);
     mutex.<a class="code" href="classsf_1_1Mutex.htm#ade71268ffc5e80756652058b01c23c33" title="Unlock the mutex.">unlock</a>(); <span class="comment">// if thread2 was waiting, it will now be unblocked</span>
 }
 
 <span class="keywordtype">void</span> thread2()
 {
     mutex.<a class="code" href="classsf_1_1Mutex.htm#a1a16956a6bbea764480c1b80f2e45763" title="Lock the mutex.">lock</a>(); <span class="comment">// this call will block the thread if the mutex is already locked by thread1</span>
     database.write(...);
     mutex.<a class="code" href="classsf_1_1Mutex.htm#ade71268ffc5e80756652058b01c23c33" title="Unlock the mutex.">unlock</a>(); <span class="comment">// if thread1 was waiting, it will now be unblocked</span>
 }
</pre></div><p>Be very careful with mutexes. A bad usage can lead to bad problems, like deadlocks (two threads are waiting for each other and the application is globally stuck).</p>
<p>To make the usage of mutexes more robust, particularly in environments where exceptions can be thrown, you should use the helper class <a class="el" href="classsf_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes.">sf::Lock</a> to lock/unlock mutexes.</p>
<p>SFML mutexes are recursive, which means that you can lock a mutex multiple times in the same thread without creating a deadlock. In this case, the first call to Lock() behaves as usual, and the following ones have no effect. However, you must call <a class="el" href="classsf_1_1Mutex.htm#ade71268ffc5e80756652058b01c23c33" title="Unlock the mutex.">unlock()</a> exactly as many times as you called <a class="el" href="classsf_1_1Mutex.htm#a1a16956a6bbea764480c1b80f2e45763" title="Lock the mutex.">lock()</a>. If you don't, the mutex won't be released.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes.">sf::Lock</a> </dd></dl>

<p>Definition at line <a class="el" href="Mutex_8hpp_source.htm#l00047">47</a> of file <a class="el" href="Mutex_8hpp_source.htm">Mutex.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9bd52a48320fd7b6db8a78037aad276e"></a><!-- doxytag: member="sf::Mutex::Mutex" ref="a9bd52a48320fd7b6db8a78037aad276e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Mutex.htm#a9bd52a48320fd7b6db8a78037aad276e">sf::Mutex::Mutex</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a9f76a67b7b6d3918131a692179b4e3f2"></a><!-- doxytag: member="sf::Mutex::~Mutex" ref="a9f76a67b7b6d3918131a692179b4e3f2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Mutex.htm#a9f76a67b7b6d3918131a692179b4e3f2">sf::Mutex::~Mutex</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a1a16956a6bbea764480c1b80f2e45763"></a><!-- doxytag: member="sf::Mutex::lock" ref="a1a16956a6bbea764480c1b80f2e45763" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Mutex.htm#a1a16956a6bbea764480c1b80f2e45763">sf::Mutex::lock</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p><a class="el" href="classsf_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes.">Lock</a> the mutex. </p>
<p>If the mutex is already locked in another thread, this call will block the execution until the mutex is released.</p>
<dl class="see"><dt><b>See also:</b></dt><dd>Unlock </dd></dl>

</div>
</div>
<a class="anchor" id="ade71268ffc5e80756652058b01c23c33"></a><!-- doxytag: member="sf::Mutex::unlock" ref="ade71268ffc5e80756652058b01c23c33" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Mutex.htm#ade71268ffc5e80756652058b01c23c33">sf::Mutex::unlock</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Unlock the mutex. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Lock.htm" title="Automatic wrapper for locking and unlocking mutexes.">Lock</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Mutex_8hpp_source.htm">Mutex.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
