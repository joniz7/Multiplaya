<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Font.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_FONT_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_FONT_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Glyph.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Texture.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Graphics/Rect.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/System/Vector2.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;SFML/System/String.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">namespace </span>sf
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044 <span class="keyword">class </span>InputStream;
<a name="l00045"></a>00045 
<a name="l00050"></a><a class="code" href="classsf_1_1Font.htm">00050</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052 <span class="keyword">public</span> :
<a name="l00053"></a>00053 
<a name="l00060"></a>00060     <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>();
<a name="l00061"></a>00061 
<a name="l00068"></a>00068     <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; copy);
<a name="l00069"></a>00069 
<a name="l00076"></a>00076     ~<a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>();
<a name="l00077"></a>00077 
<a name="l00094"></a>00094     <span class="keywordtype">bool</span> loadFromFile(<span class="keyword">const</span> std::string&amp; filename);
<a name="l00095"></a>00095 
<a name="l00113"></a>00113     <span class="keywordtype">bool</span> loadFromMemory(<span class="keyword">const</span> <span class="keywordtype">void</span>* data, std::size_t sizeInBytes);
<a name="l00114"></a>00114 
<a name="l00131"></a>00131     <span class="keywordtype">bool</span> loadFromStream(<a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">InputStream</a>&amp; stream);
<a name="l00132"></a>00132 
<a name="l00143"></a>00143     <span class="keyword">const</span> <a class="code" href="classsf_1_1Glyph.htm" title="Structure describing a glyph.">Glyph</a>&amp; getGlyph(Uint32 codePoint, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize, <span class="keywordtype">bool</span> bold) <span class="keyword">const</span>;
<a name="l00144"></a>00144 
<a name="l00161"></a>00161     <span class="keywordtype">int</span> getKerning(Uint32 first, Uint32 second, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize) <span class="keyword">const</span>;
<a name="l00162"></a>00162 
<a name="l00174"></a>00174     <span class="keywordtype">int</span> getLineSpacing(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize) <span class="keyword">const</span>;
<a name="l00175"></a>00175 
<a name="l00188"></a>00188     <span class="keyword">const</span> <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>&amp; getTexture(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize) <span class="keyword">const</span>;
<a name="l00189"></a>00189 
<a name="l00198"></a>00198     <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; operator =(<span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; right);
<a name="l00199"></a>00199 
<a name="l00212"></a>00212     <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; getDefaultFont();
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="keyword">private</span> :
<a name="l00215"></a>00215 
<a name="l00220"></a>00220     <span class="keyword">struct </span>Row
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222         Row(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rowTop, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rowHeight) : width(0), top(rowTop), height(rowHeight) {}
<a name="l00223"></a>00223 
<a name="l00224"></a>00224         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width;  
<a name="l00225"></a>00225         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> top;    
<a name="l00226"></a>00226         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height; 
<a name="l00227"></a>00227     };
<a name="l00228"></a>00228 
<a name="l00230"></a>00230     <span class="comment">// Types</span>
<a name="l00232"></a>00232 <span class="comment"></span>    <span class="keyword">typedef</span> std::map&lt;Uint32, Glyph&gt; GlyphTable; 
<a name="l00233"></a>00233 
<a name="l00238"></a>00238     <span class="keyword">struct </span>Page
<a name="l00239"></a>00239     {
<a name="l00240"></a>00240         Page();
<a name="l00241"></a>00241 
<a name="l00242"></a>00242         GlyphTable       glyphs;  
<a name="l00243"></a>00243         <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">sf::Texture</a>      texture; 
<a name="l00244"></a>00244         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     nextRow; 
<a name="l00245"></a>00245         std::vector&lt;Row&gt; rows;    
<a name="l00246"></a>00246     };
<a name="l00247"></a>00247 
<a name="l00252"></a>00252     <span class="keywordtype">void</span> cleanup();
<a name="l00253"></a>00253 
<a name="l00264"></a>00264     <a class="code" href="classsf_1_1Glyph.htm" title="Structure describing a glyph.">Glyph</a> loadGlyph(Uint32 codePoint, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize, <span class="keywordtype">bool</span> bold) <span class="keyword">const</span>;
<a name="l00265"></a>00265 
<a name="l00276"></a>00276     <a class="code" href="classsf_1_1Rect.htm">IntRect</a> findGlyphRect(Page&amp; page, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height) <span class="keyword">const</span>;
<a name="l00277"></a>00277 
<a name="l00286"></a>00286     <span class="keywordtype">bool</span> setCurrentSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize) <span class="keyword">const</span>;
<a name="l00287"></a>00287 
<a name="l00289"></a>00289     <span class="comment">// Types</span>
<a name="l00291"></a>00291 <span class="comment"></span>    <span class="keyword">typedef</span> std::map&lt;unsigned int, Page&gt; PageTable; 
<a name="l00292"></a>00292 
<a name="l00294"></a>00294     <span class="comment">// Member data</span>
<a name="l00296"></a>00296 <span class="comment"></span>    <span class="keywordtype">void</span>*                      m_library;     
<a name="l00297"></a>00297     <span class="keywordtype">void</span>*                      m_face;        
<a name="l00298"></a>00298     <span class="keywordtype">void</span>*                      m_streamRec;   
<a name="l00299"></a>00299     <span class="keywordtype">int</span>*                       m_refCount;    
<a name="l00300"></a>00300     <span class="keyword">mutable</span> PageTable          m_pages;       
<a name="l00301"></a>00301     <span class="keyword">mutable</span> std::vector&lt;Uint8&gt; m_pixelBuffer; 
<a name="l00302"></a>00302 };
<a name="l00303"></a>00303 
<a name="l00304"></a>00304 } <span class="comment">// namespace sf</span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 <span class="preprocessor">#endif // SFML_FONT_HPP</span>
<a name="l00308"></a>00308 <span class="preprocessor"></span>
<a name="l00309"></a>00309 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
