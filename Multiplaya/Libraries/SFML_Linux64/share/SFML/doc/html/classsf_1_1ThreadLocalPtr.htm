<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::ThreadLocalPtr&lt; T &gt; Class Template Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::ThreadLocalPtr" --><!-- doxytag: inherits="sf::ThreadLocal" -->
<p>Pointer to a thread-local variable.  
 <a href="classsf_1_1ThreadLocalPtr.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="ThreadLocalPtr_8hpp_source.htm">ThreadLocalPtr.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::ThreadLocalPtr&lt; T &gt;:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1ThreadLocalPtr.png" usemap="#sf::ThreadLocalPtr&lt; T &gt;_map" alt=""/>
  <map id="sf::ThreadLocalPtr&lt; T &gt;_map" name="sf::ThreadLocalPtr&lt; T &gt;_map">
<area href="classsf_1_1ThreadLocal.htm" title="Defines variables with thread-local storage." alt="sf::ThreadLocal" shape="rect" coords="0,0,146,24"/>
</map>
 </div></div>

<p><a href="classsf_1_1ThreadLocalPtr-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm#a8c678211d7828d2a8c41cb534422d649">ThreadLocalPtr</a> (T *value=NULL)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a8c678211d7828d2a8c41cb534422d649"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm#aa3bac9a08e8739613961659d10e0fadd">operator*</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of unary operator *.  <a href="#aa3bac9a08e8739613961659d10e0fadd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm#aa0b559f78929b22cb2585cb2966edfb2">operator-&gt;</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of operator -&gt;  <a href="#aa0b559f78929b22cb2585cb2966edfb2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm#ab4a6a341c26b58f0ed3ef86502bd9572">operator T *</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Cast operator to implicitely convert the pointer to its raw pointer type (T*)  <a href="#ab4a6a341c26b58f0ed3ef86502bd9572"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm#a14dcf1cdf5f6b3bcdd633014b2b671f5">operator=</a> (T *value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator for a raw pointer parameter.  <a href="#a14dcf1cdf5f6b3bcdd633014b2b671f5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm#a6792a6a808af06f0d13e3ceecf2fc947">operator=</a> (const <a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>&lt; T &gt; &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Assignment operator for a <a class="el" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr</a> parameter.  <a href="#a6792a6a808af06f0d13e3ceecf2fc947"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocal.htm#ab7e334c83d77644a8e67ee31c3230007">setValue</a> (void *value)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the thread-specific value of the variable.  <a href="#ab7e334c83d77644a8e67ee31c3230007"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocal.htm#aef35a39686eac4b6634a6e5605aacfd7">getValue</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve the thread-specific value of the variable.  <a href="#aef35a39686eac4b6634a6e5605aacfd7"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br/>
class sf::ThreadLocalPtr&lt; T &gt;</h3>

<p>Pointer to a thread-local variable. </p>
<p><a class="el" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">sf::ThreadLocalPtr</a> is a type-safe wrapper for storing pointers to thread-local variables.</p>
<p>A thread-local variable holds a different value for each different thread, unlike normal variable that are shared.</p>
<p>Its usage is completely transparent, so that it is similar to manipulating the raw pointer directly (like any smart pointer).</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> MyClass object1;
 MyClass object2;
 <a class="code" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">sf::ThreadLocalPtr&lt;MyClass&gt;</a> objectPtr;

 <span class="keywordtype">void</span> thread1()
 {
     objectPtr = &amp;object1; <span class="comment">// doesn&#39;t impact thread2</span>
     ...
 }

 <span class="keywordtype">void</span> thread2()
 {
     objectPtr = &amp;object2; <span class="comment">// doesn&#39;t impact thread1</span>
     ...
 }

 <span class="keywordtype">int</span> main()
 {
     <span class="comment">// Create and launch the two threads</span>
     <a class="code" href="classsf_1_1Thread.htm" title="Utility class to manipulate threads.">sf::Thread</a> t1(&amp;thread1);
     <a class="code" href="classsf_1_1Thread.htm" title="Utility class to manipulate threads.">sf::Thread</a> t2(&amp;thread2);
     t1.launch();
     t2.launch();

     <span class="keywordflow">return</span> 0;
 }
</pre></div><p><a class="el" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr</a> is designed for internal use; however you can use it if you feel like it fits well your implementation. </p>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8hpp_source.htm#l00041">41</a> of file <a class="el" href="ThreadLocalPtr_8hpp_source.htm">ThreadLocalPtr.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a8c678211d7828d2a8c41cb534422d649"></a><!-- doxytag: member="sf::ThreadLocalPtr::ThreadLocalPtr" ref="a8c678211d7828d2a8c41cb534422d649" args="(T *value=NULL)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr</a>&lt; T &gt;::<a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a> </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>value</em> = <code>NULL</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Optional value to initalize the variable </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8inl_source.htm#l00030">30</a> of file <a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a>.</p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab4a6a341c26b58f0ed3ef86502bd9572"></a><!-- doxytag: member="sf::ThreadLocalPtr::operator T *" ref="ab4a6a341c26b58f0ed3ef86502bd9572" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr</a>&lt; T &gt;::operator T * </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Cast operator to implicitely convert the pointer to its raw pointer type (T*) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the actual object </dd></dl>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8inl_source.htm#l00054">54</a> of file <a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a>.</p>

</div>
</div>
<a class="anchor" id="aa3bac9a08e8739613961659d10e0fadd"></a><!-- doxytag: member="sf::ThreadLocalPtr::operator*" ref="aa3bac9a08e8739613961659d10e0fadd" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T &amp; <a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr</a>&lt; T &gt;::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of unary operator *. </p>
<p>Like raw pointers, applying the * operator returns a reference to the pointed object.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to the pointed object </dd></dl>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8inl_source.htm#l00038">38</a> of file <a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a>.</p>

</div>
</div>
<a class="anchor" id="aa0b559f78929b22cb2585cb2966edfb2"></a><!-- doxytag: member="sf::ThreadLocalPtr::operator&#45;&gt;" ref="aa0b559f78929b22cb2585cb2966edfb2" args="() const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T * <a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr</a>&lt; T &gt;::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of operator -&gt; </p>
<p>Like raw pointers, applying the -&gt; operator returns the pointed object.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointed object </dd></dl>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8inl_source.htm#l00046">46</a> of file <a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a>.</p>

</div>
</div>
<a class="anchor" id="a14dcf1cdf5f6b3bcdd633014b2b671f5"></a><!-- doxytag: member="sf::ThreadLocalPtr::operator=" ref="a14dcf1cdf5f6b3bcdd633014b2b671f5" args="(T *value)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>&lt; T &gt; &amp; <a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator for a raw pointer parameter. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">value</td><td>Pointer to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to self </dd></dl>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8inl_source.htm#l00062">62</a> of file <a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a>.</p>

</div>
</div>
<a class="anchor" id="a6792a6a808af06f0d13e3ceecf2fc947"></a><!-- doxytag: member="sf::ThreadLocalPtr::operator=" ref="a6792a6a808af06f0d13e3ceecf2fc947" args="(const ThreadLocalPtr&lt; T &gt; &amp;right)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>&lt; T &gt; &amp; <a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr</a>&lt; T &gt;::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1ThreadLocalPtr.htm">ThreadLocalPtr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Assignment operator for a <a class="el" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr</a> parameter. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td><a class="el" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr</a> to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to self </dd></dl>

<p>Definition at line <a class="el" href="ThreadLocalPtr_8inl_source.htm#l00071">71</a> of file <a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="ThreadLocalPtr_8hpp_source.htm">ThreadLocalPtr.hpp</a></li>
<li><a class="el" href="ThreadLocalPtr_8inl_source.htm">ThreadLocalPtr.inl</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
