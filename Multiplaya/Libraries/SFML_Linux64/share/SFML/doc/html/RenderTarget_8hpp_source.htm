<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">RenderTarget.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_RENDERTARGET_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_RENDERTARGET_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Color.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Rect.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Graphics/View.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/Graphics/Transform.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;SFML/Graphics/BlendMode.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;SFML/Graphics/RenderStates.hpp&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;SFML/Graphics/PrimitiveType.hpp&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;SFML/Graphics/Vertex.hpp&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;SFML/System/NonCopyable.hpp&gt;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">namespace </span>sf
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 <span class="keyword">class </span>Drawable;
<a name="l00046"></a>00046 
<a name="l00051"></a><a class="code" href="classsf_1_1RenderTarget.htm">00051</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">RenderTarget</a> : <a class="code" href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable.">NonCopyable</a>
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053 <span class="keyword">public</span> :
<a name="l00054"></a>00054 
<a name="l00059"></a>00059     <span class="keyword">virtual</span> ~<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">RenderTarget</a>();
<a name="l00060"></a>00060 
<a name="l00070"></a>00070     <span class="keywordtype">void</span> clear(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; color = <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>(0, 0, 0, 255));
<a name="l00071"></a>00071 
<a name="l00091"></a>00091     <span class="keywordtype">void</span> setView(<span class="keyword">const</span> <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>&amp; view);
<a name="l00092"></a>00092 
<a name="l00101"></a>00101     <span class="keyword">const</span> <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>&amp; getView() <span class="keyword">const</span>;
<a name="l00102"></a>00102 
<a name="l00114"></a>00114     <span class="keyword">const</span> <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>&amp; getDefaultView() <span class="keyword">const</span>;
<a name="l00115"></a>00115 
<a name="l00129"></a>00129     <a class="code" href="classsf_1_1Rect.htm">IntRect</a> getViewport(<span class="keyword">const</span> <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>&amp; view) <span class="keyword">const</span>;
<a name="l00130"></a>00130 
<a name="l00152"></a>00152     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a> convertCoords(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors.">Vector2i</a>&amp; point) <span class="keyword">const</span>;
<a name="l00153"></a>00153 
<a name="l00177"></a>00177     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a> convertCoords(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors.">Vector2i</a>&amp; point, <span class="keyword">const</span> <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>&amp; view) <span class="keyword">const</span>;
<a name="l00178"></a>00178 
<a name="l00186"></a>00186     <span class="keywordtype">void</span> draw(<span class="keyword">const</span> <a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target.">Drawable</a>&amp; drawable, <span class="keyword">const</span> <a class="code" href="classsf_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget.">RenderStates</a>&amp; states = <a class="code" href="classsf_1_1RenderStates.htm#ad29672df29f19ce50c3021d95f2bb062" title="Special instance holding the default render states.">RenderStates::Default</a>);
<a name="l00187"></a>00187 
<a name="l00197"></a>00197     <span class="keywordtype">void</span> draw(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vertex.htm" title="Define a point with color and texture coordinates.">Vertex</a>* vertices, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> vertexCount,
<a name="l00198"></a>00198               <a class="code" href="group__graphics.htm#ga5ee56ac1339984909610713096283b1b" title="Types of primitives that a sf::VertexArray can render.">PrimitiveType</a> type, <span class="keyword">const</span> <a class="code" href="classsf_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget.">RenderStates</a>&amp; states = <a class="code" href="classsf_1_1RenderStates.htm#ad29672df29f19ce50c3021d95f2bb062" title="Special instance holding the default render states.">RenderStates::Default</a>);
<a name="l00199"></a>00199 
<a name="l00206"></a>00206     <span class="keyword">virtual</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a> getSize() <span class="keyword">const</span> = 0;
<a name="l00207"></a>00207 
<a name="l00240"></a>00240     <span class="keywordtype">void</span> pushGLStates();
<a name="l00241"></a>00241 
<a name="l00251"></a>00251     <span class="keywordtype">void</span> popGLStates();
<a name="l00252"></a>00252 
<a name="l00274"></a>00274     <span class="keywordtype">void</span> resetGLStates();
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 <span class="keyword">protected</span> :
<a name="l00277"></a>00277 
<a name="l00282"></a>00282     <a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">RenderTarget</a>();
<a name="l00283"></a>00283 
<a name="l00291"></a>00291     <span class="keywordtype">void</span> initialize();
<a name="l00292"></a>00292 
<a name="l00297"></a>00297     <span class="keywordtype">void</span> applyCurrentView();
<a name="l00298"></a>00298 
<a name="l00305"></a>00305     <span class="keywordtype">void</span> applyBlendMode(<a class="code" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388" title="Available blending modes for drawing.">BlendMode</a> mode);
<a name="l00306"></a>00306 
<a name="l00313"></a>00313     <span class="keywordtype">void</span> applyTransform(<span class="keyword">const</span> <a class="code" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a>&amp; transform);
<a name="l00314"></a>00314 
<a name="l00321"></a>00321     <span class="keywordtype">void</span> applyTexture(<span class="keyword">const</span> <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>* texture);
<a name="l00322"></a>00322 
<a name="l00329"></a>00329     <span class="keywordtype">void</span> applyShader(<span class="keyword">const</span> <a class="code" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment)">Shader</a>* shader);
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 <span class="keyword">private</span> :
<a name="l00332"></a>00332 
<a name="l00345"></a>00345     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> activate(<span class="keywordtype">bool</span> active) = 0;
<a name="l00346"></a>00346 
<a name="l00351"></a>00351     <span class="keyword">struct </span>StatesCache
<a name="l00352"></a>00352     {
<a name="l00353"></a>00353         <span class="keyword">enum</span> {VertexCacheSize = 4};
<a name="l00354"></a>00354 
<a name="l00355"></a>00355         <span class="keywordtype">bool</span>      glStatesSet;    
<a name="l00356"></a>00356         <span class="keywordtype">bool</span>      viewChanged;    
<a name="l00357"></a>00357         <a class="code" href="group__graphics.htm#ga80c52fe2f7050d7f7573b7ed3c995388" title="Available blending modes for drawing.">BlendMode</a> lastBlendMode;  
<a name="l00358"></a>00358         Uint64    lastTextureId;  
<a name="l00359"></a>00359         <span class="keywordtype">bool</span>      useVertexCache; 
<a name="l00360"></a>00360         <a class="code" href="classsf_1_1Vertex.htm" title="Define a point with color and texture coordinates.">Vertex</a>    vertexCache[VertexCacheSize]; 
<a name="l00361"></a>00361     };
<a name="l00362"></a>00362 
<a name="l00364"></a>00364     <span class="comment">// Member data</span>
<a name="l00366"></a>00366 <span class="comment"></span>    <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>        m_defaultView; 
<a name="l00367"></a>00367     <a class="code" href="classsf_1_1View.htm" title="2D camera that defines what region is shown on screen">View</a>        m_view;        
<a name="l00368"></a>00368     StatesCache m_cache;       
<a name="l00369"></a>00369 };
<a name="l00370"></a>00370 
<a name="l00371"></a>00371 } <span class="comment">// namespace sf</span>
<a name="l00372"></a>00372 
<a name="l00373"></a>00373 
<a name="l00374"></a>00374 <span class="preprocessor">#endif // SFML_RENDERTARGET_HPP</span>
<a name="l00375"></a>00375 <span class="preprocessor"></span>
<a name="l00376"></a>00376 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
