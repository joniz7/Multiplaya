<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Texture.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_TEXTURE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_TEXTURE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Image.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Window/GlResource.hpp&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>sf
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">class </span>Window;
<a name="l00039"></a>00039 <span class="keyword">class </span>RenderTarget;
<a name="l00040"></a>00040 <span class="keyword">class </span>RenderTexture;
<a name="l00041"></a>00041 <span class="keyword">class </span>InputStream;
<a name="l00042"></a>00042 
<a name="l00047"></a><a class="code" href="classsf_1_1Texture.htm">00047</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a> : <a class="code" href="classsf_1_1GlResource.htm" title="Base class for classes that require an OpenGL context.">GlResource</a>
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049 <span class="keyword">public</span> :
<a name="l00050"></a>00050 
<a name="l00055"></a><a class="code" href="classsf_1_1Texture.htm#aa6fd3bbe3c334b3c4428edfb2765a82e">00055</a>     <span class="keyword">enum</span> <a class="code" href="classsf_1_1Texture.htm#aa6fd3bbe3c334b3c4428edfb2765a82e" title="Types of texture coordinates that can be used for rendering.">CoordinateType</a>
<a name="l00056"></a>00056     {
<a name="l00057"></a><a class="code" href="classsf_1_1Texture.htm#aa6fd3bbe3c334b3c4428edfb2765a82ea69d6228950882e4d68be4ba4dbe7df73">00057</a>         <a class="code" href="classsf_1_1Texture.htm#aa6fd3bbe3c334b3c4428edfb2765a82ea69d6228950882e4d68be4ba4dbe7df73" title="Texture coordinates in range [0 .. 1].">Normalized</a>, 
<a name="l00058"></a><a class="code" href="classsf_1_1Texture.htm#aa6fd3bbe3c334b3c4428edfb2765a82ea6372f9c3a10203a7a69d8d5da59d82ff">00058</a>         Pixels      
<a name="l00059"></a>00059     };
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="keyword">public</span> :
<a name="l00062"></a>00062 
<a name="l00069"></a>00069     <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>();
<a name="l00070"></a>00070 
<a name="l00077"></a>00077     <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>&amp; copy);
<a name="l00078"></a>00078 
<a name="l00083"></a>00083     ~<a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>();
<a name="l00084"></a>00084 
<a name="l00096"></a>00096     <span class="keywordtype">bool</span> create(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height);
<a name="l00097"></a>00097 
<a name="l00127"></a>00127     <span class="keywordtype">bool</span> loadFromFile(<span class="keyword">const</span> std::string&amp; filename, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; area = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>());
<a name="l00128"></a>00128 
<a name="l00159"></a>00159     <span class="keywordtype">bool</span> loadFromMemory(<span class="keyword">const</span> <span class="keywordtype">void</span>* data, std::size_t size, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; area = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>());
<a name="l00160"></a>00160 
<a name="l00190"></a>00190     <span class="keywordtype">bool</span> loadFromStream(<a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">sf::InputStream</a>&amp; stream, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; area = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>());
<a name="l00191"></a>00191 
<a name="l00214"></a>00214     <span class="keywordtype">bool</span> loadFromImage(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a>&amp; image, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; area = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>());
<a name="l00215"></a>00215 
<a name="l00222"></a>00222     <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a> getSize() <span class="keyword">const</span>;
<a name="l00223"></a>00223 
<a name="l00237"></a>00237     <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a> copyToImage() <span class="keyword">const</span>;
<a name="l00238"></a>00238 
<a name="l00255"></a>00255     <span class="keywordtype">void</span> update(<span class="keyword">const</span> Uint8* pixels);
<a name="l00256"></a>00256 
<a name="l00277"></a>00277     <span class="keywordtype">void</span> update(<span class="keyword">const</span> Uint8* pixels, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y);
<a name="l00278"></a>00278 
<a name="l00297"></a>00297     <span class="keywordtype">void</span> update(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a>&amp; image);
<a name="l00298"></a>00298 
<a name="l00314"></a>00314     <span class="keywordtype">void</span> update(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a>&amp; image, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y);
<a name="l00315"></a>00315 
<a name="l00334"></a>00334     <span class="keywordtype">void</span> update(<span class="keyword">const</span> <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a>&amp; window);
<a name="l00335"></a>00335 
<a name="l00351"></a>00351     <span class="keywordtype">void</span> update(<span class="keyword">const</span> <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a>&amp; window, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y);
<a name="l00352"></a>00352 
<a name="l00373"></a>00373     <span class="keywordtype">void</span> bind(CoordinateType coordinateType = Normalized) <span class="keyword">const</span>;
<a name="l00374"></a>00374 
<a name="l00389"></a>00389     <span class="keywordtype">void</span> setSmooth(<span class="keywordtype">bool</span> smooth);
<a name="l00390"></a>00390 
<a name="l00399"></a>00399     <span class="keywordtype">bool</span> isSmooth() <span class="keyword">const</span>;
<a name="l00400"></a>00400 
<a name="l00423"></a>00423     <span class="keywordtype">void</span> setRepeated(<span class="keywordtype">bool</span> repeated);
<a name="l00424"></a>00424 
<a name="l00433"></a>00433     <span class="keywordtype">bool</span> isRepeated() <span class="keyword">const</span>;
<a name="l00434"></a>00434 
<a name="l00443"></a>00443     <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>&amp; operator =(<span class="keyword">const</span> <a class="code" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">Texture</a>&amp; right);
<a name="l00444"></a>00444 
<a name="l00455"></a>00455     <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getMaximumSize();
<a name="l00456"></a>00456 
<a name="l00457"></a>00457 <span class="keyword">private</span> :
<a name="l00458"></a>00458 
<a name="l00459"></a>00459     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1RenderTexture.htm" title="Target for off-screen 2D rendering into an texture.">RenderTexture</a>;
<a name="l00460"></a>00460     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">RenderTarget</a>;
<a name="l00461"></a>00461 
<a name="l00475"></a>00475     <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getValidSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size);
<a name="l00476"></a>00476 
<a name="l00478"></a>00478     <span class="comment">// Member data</span>
<a name="l00480"></a>00480 <span class="comment"></span>    <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a>     m_size;          
<a name="l00481"></a>00481     <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a>     m_actualSize;    
<a name="l00482"></a>00482     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_texture;       
<a name="l00483"></a>00483     <span class="keywordtype">bool</span>         m_isSmooth;      
<a name="l00484"></a>00484     <span class="keywordtype">bool</span>         m_isRepeated;    
<a name="l00485"></a>00485     <span class="keyword">mutable</span> <span class="keywordtype">bool</span> m_pixelsFlipped; 
<a name="l00486"></a>00486     Uint64       m_cacheId;       
<a name="l00487"></a>00487 };
<a name="l00488"></a>00488 
<a name="l00489"></a>00489 } <span class="comment">// namespace sf</span>
<a name="l00490"></a>00490 
<a name="l00491"></a>00491 
<a name="l00492"></a>00492 <span class="preprocessor">#endif // SFML_TEXTURE_HPP</span>
<a name="l00493"></a>00493 <span class="preprocessor"></span>
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
