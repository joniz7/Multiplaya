<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Text.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_TEXT_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_TEXT_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Drawable.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Transformable.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Graphics/Font.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/Graphics/Rect.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;SFML/Graphics/VertexArray.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;SFML/System/String.hpp&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">namespace </span>sf
<a name="l00043"></a>00043 {
<a name="l00048"></a><a class="code" href="classsf_1_1Text.htm">00048</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1Text.htm" title="Graphical text that can be drawn to a render target.">Text</a> : <span class="keyword">public</span> <a class="code" href="classsf_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target.">Drawable</a>, <span class="keyword">public</span> <a class="code" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">Transformable</a>
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 <span class="keyword">public</span> :
<a name="l00051"></a>00051 
<a name="l00056"></a><a class="code" href="classsf_1_1Text.htm#aa8add4aef484c6e6b20faff07452bd82">00056</a>     <span class="keyword">enum</span> <a class="code" href="classsf_1_1Text.htm#aa8add4aef484c6e6b20faff07452bd82" title="Enumeration of the string drawing styles.">Style</a>
<a name="l00057"></a>00057     {
<a name="l00058"></a><a class="code" href="classsf_1_1Text.htm#aa8add4aef484c6e6b20faff07452bd82a2af9ae5e1cda126570f744448e0caa32">00058</a>         Regular    = 0,      
<a name="l00059"></a><a class="code" href="classsf_1_1Text.htm#aa8add4aef484c6e6b20faff07452bd82af1b47f98fb1e10509ba930a596987171">00059</a>         Bold       = 1 &lt;&lt; 0, 
<a name="l00060"></a><a class="code" href="classsf_1_1Text.htm#aa8add4aef484c6e6b20faff07452bd82aee249eb803848723c542c2062ebe69d8">00060</a>         Italic     = 1 &lt;&lt; 1, 
<a name="l00061"></a><a class="code" href="classsf_1_1Text.htm#aa8add4aef484c6e6b20faff07452bd82a664bd143f92b6e8c709d7f788e8b20df">00061</a>         Underlined = 1 &lt;&lt; 2  
<a name="l00062"></a>00062     };
<a name="l00063"></a>00063 
<a name="l00070"></a>00070     <a class="code" href="classsf_1_1Text.htm" title="Graphical text that can be drawn to a render target.">Text</a>();
<a name="l00071"></a>00071 
<a name="l00080"></a>00080     <span class="keyword">explicit</span> <a class="code" href="classsf_1_1Text.htm" title="Graphical text that can be drawn to a render target.">Text</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; <span class="keywordtype">string</span>, <span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; font = <a class="code" href="classsf_1_1Font.htm#a88fc3372800948a1f8655c533cb8a952" title="Return the default built-in font.">Font::getDefaultFont</a>(), <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> characterSize = 30);
<a name="l00081"></a>00081 
<a name="l00101"></a>00101     <span class="keywordtype">void</span> setString(<span class="keyword">const</span> <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; <span class="keywordtype">string</span>);
<a name="l00102"></a>00102 
<a name="l00120"></a>00120     <span class="keywordtype">void</span> setFont(<span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; font);
<a name="l00121"></a>00121 
<a name="l00132"></a>00132     <span class="keywordtype">void</span> setCharacterSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size);
<a name="l00133"></a>00133 
<a name="l00146"></a>00146     <span class="keywordtype">void</span> setStyle(Uint32 style);
<a name="l00147"></a>00147 
<a name="l00158"></a>00158     <span class="keywordtype">void</span> setColor(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; color);
<a name="l00159"></a>00159 
<a name="l00177"></a>00177     <span class="keyword">const</span> <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a>&amp; getString() <span class="keyword">const</span>;
<a name="l00178"></a>00178 
<a name="l00190"></a>00190     <span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>&amp; getFont() <span class="keyword">const</span>;
<a name="l00191"></a>00191 
<a name="l00200"></a>00200     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getCharacterSize() <span class="keyword">const</span>;
<a name="l00201"></a>00201 
<a name="l00210"></a>00210     Uint32 getStyle() <span class="keyword">const</span>;
<a name="l00211"></a>00211 
<a name="l00220"></a>00220     <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; getColor() <span class="keyword">const</span>;
<a name="l00221"></a>00221 
<a name="l00237"></a>00237     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a> findCharacterPos(std::size_t index) <span class="keyword">const</span>;
<a name="l00238"></a>00238 
<a name="l00251"></a>00251     <a class="code" href="classsf_1_1Rect.htm">FloatRect</a> getLocalBounds() <span class="keyword">const</span>;
<a name="l00252"></a>00252 
<a name="l00265"></a>00265     <a class="code" href="classsf_1_1Rect.htm">FloatRect</a> getGlobalBounds() <span class="keyword">const</span>;
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="keyword">private</span> :
<a name="l00268"></a>00268 
<a name="l00276"></a>00276     <span class="keyword">virtual</span> <span class="keywordtype">void</span> draw(<a class="code" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">RenderTarget</a>&amp; target, <a class="code" href="classsf_1_1RenderStates.htm" title="Define the states used for drawing to a RenderTarget.">RenderStates</a> states) <span class="keyword">const</span>;
<a name="l00277"></a>00277 
<a name="l00282"></a>00282     <span class="keywordtype">void</span> updateGeometry();
<a name="l00283"></a>00283 
<a name="l00285"></a>00285     <span class="comment">// Member data</span>
<a name="l00287"></a>00287 <span class="comment"></span>    <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a>        m_string;        
<a name="l00288"></a>00288     <span class="keyword">const</span> <a class="code" href="classsf_1_1Font.htm" title="Class for loading and manipulating character fonts.">Font</a>*   m_font;          
<a name="l00289"></a>00289     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  m_characterSize; 
<a name="l00290"></a>00290     Uint32        m_style;         
<a name="l00291"></a>00291     <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>         m_color;         
<a name="l00292"></a>00292     <a class="code" href="classsf_1_1VertexArray.htm" title="Define a set of one or more 2D primitives.">VertexArray</a>   m_vertices;      
<a name="l00293"></a>00293     <a class="code" href="classsf_1_1Rect.htm">FloatRect</a>     m_bounds;        
<a name="l00294"></a>00294 };
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 } <span class="comment">// namespace sf</span>
<a name="l00297"></a>00297 
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 <span class="preprocessor">#endif // SFML_TEXT_HPP</span>
<a name="l00300"></a>00300 <span class="preprocessor"></span>
<a name="l00301"></a>00301 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
