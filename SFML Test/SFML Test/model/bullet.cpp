////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
// Class header
#include "bullet.h"

////////////////////////////////////////////////////////////
/// Bullet
////////////////////////////////////////////////////////////

namespace mp
{
	////////////////////////////////////////////////////////////
	// Constructor
	////////////////////////////////////////////////////////////
    Bullet::Bullet( b2World* world, b2Vec2 position, b2Vec2 force )
    {
		bodyDef.type = b2_dynamicBody;
		bodyDef.position.Set(position.x, position.y);
		//float a = atan(force.y/force.x);
		
		//bodyDef.angle = a;
		bodyDef.bullet = true;
		body = world->CreateBody(&bodyDef);

		b2CircleShape circle;
		circle.m_radius = 0.25f;

		// Define the dynamic body fixture.
		b2FixtureDef fixtureDef;
		fixtureDef.shape = &circle;
		// Set the box density to be non-zero, so it will be dynamic.
		fixtureDef.density = 1.f;
		// Override the default friction.
		fixtureDef.friction = 0.0f;
		// Set restitution
		fixtureDef.restitution = 1.0f;
		// Add the shape to the body.
		body->CreateFixture(&fixtureDef);
		body->ApplyForce( force, body->GetPosition() );
    }

	////////////////////////////////////////////////////////////
	// Destructor
	////////////////////////////////////////////////////////////
    Bullet::~Bullet()
    {

    }

	////////////////////////////////////////////////////////////
	// Returns bullet position
	////////////////////////////////////////////////////////////
	b2Vec2 Bullet::getPosition()
	{
		return body->GetPosition();
	}

	////////////////////////////////////////////////////////////
	// Returns a pointer to the body definition
	////////////////////////////////////////////////////////////
	b2BodyDef* Bullet::getBodyDef()
	{
		return &bodyDef;
	}

	////////////////////////////////////////////////////////////
	// Returns a pointer to the body
	////////////////////////////////////////////////////////////
	b2Body* Bullet::getBody()
	{
		return body;
	}
}
