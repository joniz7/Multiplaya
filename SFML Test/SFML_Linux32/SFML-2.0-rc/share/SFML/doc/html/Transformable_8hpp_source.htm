<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Transformable.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_TRANSFORMABLE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_TRANSFORMABLE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Transform.hpp&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>sf
<a name="l00036"></a>00036 {
<a name="l00041"></a><a class="code" href="classsf_1_1Transformable.htm">00041</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">Transformable</a>
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043 <span class="keyword">public</span> :
<a name="l00044"></a>00044 
<a name="l00049"></a>00049     <a class="code" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">Transformable</a>();
<a name="l00050"></a>00050 
<a name="l00055"></a>00055     <span class="keyword">virtual</span> ~<a class="code" href="classsf_1_1Transformable.htm" title="Decomposed transform defined by a position, a rotation and a scale.">Transformable</a>();
<a name="l00056"></a>00056 
<a name="l00070"></a>00070     <span class="keywordtype">void</span> setPosition(<span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y);
<a name="l00071"></a>00071 
<a name="l00084"></a>00084     <span class="keywordtype">void</span> setPosition(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; position);
<a name="l00085"></a>00085 
<a name="l00098"></a>00098     <span class="keywordtype">void</span> setRotation(<span class="keywordtype">float</span> angle);
<a name="l00099"></a>00099 
<a name="l00113"></a>00113     <span class="keywordtype">void</span> setScale(<span class="keywordtype">float</span> factorX, <span class="keywordtype">float</span> factorY);
<a name="l00114"></a>00114 
<a name="l00127"></a>00127     <span class="keywordtype">void</span> setScale(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; factors);
<a name="l00128"></a>00128 
<a name="l00145"></a>00145     <span class="keywordtype">void</span> setOrigin(<span class="keywordtype">float</span> x, <span class="keywordtype">float</span> y);
<a name="l00146"></a>00146 
<a name="l00162"></a>00162     <span class="keywordtype">void</span> setOrigin(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; origin);
<a name="l00163"></a>00163 
<a name="l00172"></a>00172     <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; getPosition() <span class="keyword">const</span>;
<a name="l00173"></a>00173 
<a name="l00184"></a>00184     <span class="keywordtype">float</span> getRotation() <span class="keyword">const</span>;
<a name="l00185"></a>00185 
<a name="l00194"></a>00194     <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; getScale() <span class="keyword">const</span>;
<a name="l00195"></a>00195 
<a name="l00204"></a>00204     <span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; getOrigin() <span class="keyword">const</span>;
<a name="l00205"></a>00205 
<a name="l00223"></a>00223     <span class="keywordtype">void</span> move(<span class="keywordtype">float</span> offsetX, <span class="keywordtype">float</span> offsetY);
<a name="l00224"></a>00224 
<a name="l00240"></a>00240     <span class="keywordtype">void</span> move(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; offset);
<a name="l00241"></a>00241 
<a name="l00255"></a>00255     <span class="keywordtype">void</span> rotate(<span class="keywordtype">float</span> angle);
<a name="l00256"></a>00256 
<a name="l00274"></a>00274     <span class="keywordtype">void</span> scale(<span class="keywordtype">float</span> factorX, <span class="keywordtype">float</span> factorY);
<a name="l00275"></a>00275 
<a name="l00292"></a>00292     <span class="keywordtype">void</span> scale(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>&amp; factor);
<a name="l00293"></a>00293 
<a name="l00302"></a>00302     <span class="keyword">const</span> <a class="code" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a>&amp; getTransform() <span class="keyword">const</span>;
<a name="l00303"></a>00303 
<a name="l00312"></a>00312     <span class="keyword">const</span> <a class="code" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a>&amp; getInverseTransform() <span class="keyword">const</span>;
<a name="l00313"></a>00313 
<a name="l00314"></a>00314 <span class="keyword">private</span> :
<a name="l00315"></a>00315 
<a name="l00317"></a>00317     <span class="comment">// Member data</span>
<a name="l00319"></a>00319 <span class="comment"></span>    <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>          m_origin;                     
<a name="l00320"></a>00320     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>          m_position;                   
<a name="l00321"></a>00321     <span class="keywordtype">float</span>             m_rotation;                   
<a name="l00322"></a>00322     <a class="code" href="classsf_1_1Vector2.htm">Vector2f</a>          m_scale;                      
<a name="l00323"></a>00323     <span class="keyword">mutable</span> <a class="code" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a> m_transform;                  
<a name="l00324"></a>00324     <span class="keyword">mutable</span> <span class="keywordtype">bool</span>      m_transformNeedUpdate;        
<a name="l00325"></a>00325     <span class="keyword">mutable</span> <a class="code" href="classsf_1_1Transform.htm" title="Define a 3x3 transform matrix.">Transform</a> m_inverseTransform;           
<a name="l00326"></a>00326     <span class="keyword">mutable</span> <span class="keywordtype">bool</span>      m_inverseTransformNeedUpdate; 
<a name="l00327"></a>00327 };
<a name="l00328"></a>00328 
<a name="l00329"></a>00329 } <span class="comment">// namespace sf</span>
<a name="l00330"></a>00330 
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 <span class="preprocessor">#endif // SFML_TRANSFORMABLE_HPP</span>
<a name="l00333"></a>00333 <span class="preprocessor"></span>
<a name="l00334"></a>00334 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
