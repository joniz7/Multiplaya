<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">ThreadLocalPtr.inl</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="keyword">namespace </span>sf
<a name="l00027"></a>00027 {
<a name="l00029"></a>00029 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00030"></a><a class="code" href="classsf_1_1ThreadLocalPtr.htm#a8c678211d7828d2a8c41cb534422d649">00030</a> <a class="code" href="classsf_1_1ThreadLocalPtr.htm#a8c678211d7828d2a8c41cb534422d649" title="Default constructor.">ThreadLocalPtr&lt;T&gt;::ThreadLocalPtr</a>(T* value) :
<a name="l00031"></a>00031 <a class="code" href="classsf_1_1ThreadLocal.htm" title="Defines variables with thread-local storage.">ThreadLocal</a>(value)
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 }
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00037"></a>00037 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00038"></a><a class="code" href="classsf_1_1ThreadLocalPtr.htm#aa3bac9a08e8739613961659d10e0fadd">00038</a> T&amp; <a class="code" href="classsf_1_1ThreadLocalPtr.htm#aa3bac9a08e8739613961659d10e0fadd" title="Overload of unary operator *.">ThreadLocalPtr&lt;T&gt;::operator *</a>()<span class="keyword"> const</span>
<a name="l00039"></a>00039 <span class="keyword"></span>{
<a name="l00040"></a>00040     <span class="keywordflow">return</span> *<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(getValue());
<a name="l00041"></a>00041 }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 
<a name="l00045"></a>00045 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00046"></a><a class="code" href="classsf_1_1ThreadLocalPtr.htm#aa0b559f78929b22cb2585cb2966edfb2">00046</a> T* <a class="code" href="classsf_1_1ThreadLocalPtr.htm#aa0b559f78929b22cb2585cb2966edfb2" title="Overload of operator -&gt;">ThreadLocalPtr&lt;T&gt;::operator -&gt;</a>()<span class="keyword"> const</span>
<a name="l00047"></a>00047 <span class="keyword"></span>{
<a name="l00048"></a>00048     <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(getValue());
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00053"></a>00053 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00054"></a><a class="code" href="classsf_1_1ThreadLocalPtr.htm#ab4a6a341c26b58f0ed3ef86502bd9572">00054</a> <a class="code" href="classsf_1_1ThreadLocalPtr.htm#ab4a6a341c26b58f0ed3ef86502bd9572" title="Cast operator to implicitely convert the pointer to its raw pointer type (T*)">ThreadLocalPtr&lt;T&gt;::operator T*</a>()<span class="keyword"> const</span>
<a name="l00055"></a>00055 <span class="keyword"></span>{
<a name="l00056"></a>00056     <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(getValue());
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00061"></a>00061 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00062"></a><a class="code" href="classsf_1_1ThreadLocalPtr.htm#a14dcf1cdf5f6b3bcdd633014b2b671f5">00062</a> <a class="code" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr&lt;T&gt;</a>&amp; <a class="code" href="classsf_1_1ThreadLocalPtr.htm#a14dcf1cdf5f6b3bcdd633014b2b671f5" title="Assignment operator for a raw pointer parameter.">ThreadLocalPtr&lt;T&gt;::operator =</a>(T* value)
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064     setValue(value);
<a name="l00065"></a>00065     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00066"></a>00066 }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 
<a name="l00070"></a>00070 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00071"></a><a class="code" href="classsf_1_1ThreadLocalPtr.htm#a6792a6a808af06f0d13e3ceecf2fc947">00071</a> <a class="code" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr&lt;T&gt;</a>&amp; <a class="code" href="classsf_1_1ThreadLocalPtr.htm#a14dcf1cdf5f6b3bcdd633014b2b671f5" title="Assignment operator for a raw pointer parameter.">ThreadLocalPtr&lt;T&gt;::operator =</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1ThreadLocalPtr.htm" title="Pointer to a thread-local variable.">ThreadLocalPtr&lt;T&gt;</a>&amp; right)
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073     setValue(right.<a class="code" href="classsf_1_1ThreadLocal.htm#aef35a39686eac4b6634a6e5605aacfd7" title="Retrieve the thread-specific value of the variable.">getValue</a>());
<a name="l00074"></a>00074     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 } <span class="comment">// namespace sf</span>
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
