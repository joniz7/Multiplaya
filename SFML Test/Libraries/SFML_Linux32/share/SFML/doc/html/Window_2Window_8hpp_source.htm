<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Window.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_WINDOW_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_WINDOW_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Window/ContextSettings.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Window/VideoMode.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/Window/WindowHandle.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/Window/WindowStyle.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;SFML/Window/GlResource.hpp&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;SFML/System/Clock.hpp&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;SFML/System/Vector2.hpp&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;SFML/System/NonCopyable.hpp&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">namespace </span>sf
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 <span class="keyword">namespace </span>priv
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047     <span class="keyword">class </span>GlContext;
<a name="l00048"></a>00048     <span class="keyword">class </span>WindowImpl;
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keyword">class </span>Event;
<a name="l00052"></a>00052 
<a name="l00057"></a><a class="code" href="classsf_1_1Window.htm">00057</a> <span class="keyword">class </span>SFML_WINDOW_API <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> : <a class="code" href="classsf_1_1GlResource.htm" title="Base class for classes that require an OpenGL context.">GlResource</a>, <a class="code" href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable.">NonCopyable</a>
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059 <span class="keyword">public</span> :
<a name="l00060"></a>00060 
<a name="l00068"></a>00068     <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a>();
<a name="l00069"></a>00069 
<a name="l00089"></a>00089     <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a>(<a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp)">VideoMode</a> mode, <span class="keyword">const</span> std::string&amp; title, Uint32 style = <a class="code" href="group__window.htm#gga8d7a3b8425c907a2872cb57e32cea5b8a5597cd420fc461807e4a201c92adea37" title="Default window style.">Style::Default</a>, <span class="keyword">const</span> <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>&amp; settings = <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>());
<a name="l00090"></a>00090 
<a name="l00105"></a>00105     <span class="keyword">explicit</span> <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a>(WindowHandle handle, <span class="keyword">const</span> <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>&amp; settings = <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>());
<a name="l00106"></a>00106 
<a name="l00113"></a>00113     <span class="keyword">virtual</span> ~<a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a>();
<a name="l00114"></a>00114 
<a name="l00128"></a>00128     <span class="keywordtype">void</span> create(<a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp)">VideoMode</a> mode, <span class="keyword">const</span> std::string&amp; title, Uint32 style = <a class="code" href="group__window.htm#gga8d7a3b8425c907a2872cb57e32cea5b8a5597cd420fc461807e4a201c92adea37" title="Default window style.">Style::Default</a>, <span class="keyword">const</span> <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>&amp; settings = <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>());
<a name="l00129"></a>00129 
<a name="l00141"></a>00141     <span class="keywordtype">void</span> create(WindowHandle handle, <span class="keyword">const</span> <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>&amp; settings = <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>());
<a name="l00142"></a>00142 
<a name="l00153"></a>00153     <span class="keywordtype">void</span> close();
<a name="l00154"></a>00154 
<a name="l00165"></a>00165     <span class="keywordtype">bool</span> isOpen() <span class="keyword">const</span>;
<a name="l00166"></a>00166 
<a name="l00178"></a>00178     <span class="keyword">const</span> <a class="code" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">ContextSettings</a>&amp; getSettings() <span class="keyword">const</span>;
<a name="l00179"></a>00179 
<a name="l00203"></a>00203     <span class="keywordtype">bool</span> pollEvent(<a class="code" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">Event</a>&amp; event);
<a name="l00204"></a>00204 
<a name="l00230"></a>00230     <span class="keywordtype">bool</span> waitEvent(<a class="code" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">Event</a>&amp; event);
<a name="l00231"></a>00231 
<a name="l00240"></a>00240     <a class="code" href="classsf_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors.">Vector2i</a> getPosition() <span class="keyword">const</span>;
<a name="l00241"></a>00241 
<a name="l00254"></a>00254     <span class="keywordtype">void</span> setPosition(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm" title="Utility template class for manipulating 2-dimensional vectors.">Vector2i</a>&amp; position);
<a name="l00255"></a>00255 
<a name="l00267"></a>00267     <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a> getSize() <span class="keyword">const</span>;
<a name="l00268"></a>00268 
<a name="l00277"></a>00277     <span class="keywordtype">void</span> setSize(<span class="keyword">const</span> <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a> size);
<a name="l00278"></a>00278 
<a name="l00287"></a>00287     <span class="keywordtype">void</span> setTitle(<span class="keyword">const</span> std::string&amp; title);
<a name="l00288"></a>00288 
<a name="l00304"></a>00304     <span class="keywordtype">void</span> setIcon(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keyword">const</span> Uint8* pixels);
<a name="l00305"></a>00305 
<a name="l00314"></a>00314     <span class="keywordtype">void</span> setVisible(<span class="keywordtype">bool</span> visible);
<a name="l00315"></a>00315 
<a name="l00329"></a>00329     <span class="keywordtype">void</span> setVerticalSyncEnabled(<span class="keywordtype">bool</span> enabled);
<a name="l00330"></a>00330 
<a name="l00339"></a>00339     <span class="keywordtype">void</span> setMouseCursorVisible(<span class="keywordtype">bool</span> visible);
<a name="l00340"></a>00340 
<a name="l00353"></a>00353     <span class="keywordtype">void</span> setKeyRepeatEnabled(<span class="keywordtype">bool</span> enabled);
<a name="l00354"></a>00354 
<a name="l00370"></a>00370     <span class="keywordtype">void</span> setFramerateLimit(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> limit);
<a name="l00371"></a>00371 
<a name="l00383"></a>00383     <span class="keywordtype">void</span> setJoystickThreshold(<span class="keywordtype">float</span> threshold);
<a name="l00384"></a>00384 
<a name="l00400"></a>00400     <span class="keywordtype">bool</span> setActive(<span class="keywordtype">bool</span> active = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00401"></a>00401 
<a name="l00410"></a>00410     <span class="keywordtype">void</span> display();
<a name="l00411"></a>00411 
<a name="l00424"></a>00424     WindowHandle getSystemHandle() <span class="keyword">const</span>;
<a name="l00425"></a>00425 
<a name="l00426"></a>00426 <span class="keyword">protected</span> :
<a name="l00427"></a>00427 
<a name="l00436"></a>00436     <span class="keyword">virtual</span> <span class="keywordtype">void</span> onCreate();
<a name="l00437"></a>00437 
<a name="l00445"></a>00445     <span class="keyword">virtual</span> <span class="keywordtype">void</span> onResize();
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 <span class="keyword">private</span>:
<a name="l00448"></a>00448 
<a name="l00461"></a>00461     <span class="keywordtype">bool</span> filterEvent(<span class="keyword">const</span> <a class="code" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">Event</a>&amp; event);
<a name="l00462"></a>00462 
<a name="l00467"></a>00467     <span class="keywordtype">void</span> initialize();
<a name="l00468"></a>00468 
<a name="l00470"></a>00470     <span class="comment">// Member data</span>
<a name="l00472"></a>00472 <span class="comment"></span>    priv::WindowImpl* m_impl;           
<a name="l00473"></a>00473     priv::GlContext*  m_context;        
<a name="l00474"></a>00474     <a class="code" href="classsf_1_1Clock.htm" title="Utility class that measures the elapsed time.">Clock</a>             m_clock;          
<a name="l00475"></a>00475     <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a>              m_frameTimeLimit; 
<a name="l00476"></a>00476 };
<a name="l00477"></a>00477 
<a name="l00478"></a>00478 } <span class="comment">// namespace sf</span>
<a name="l00479"></a>00479 
<a name="l00480"></a>00480 
<a name="l00481"></a>00481 <span class="preprocessor">#endif // SFML_WINDOW_HPP</span>
<a name="l00482"></a>00482 <span class="preprocessor"></span>
<a name="l00483"></a>00483 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
