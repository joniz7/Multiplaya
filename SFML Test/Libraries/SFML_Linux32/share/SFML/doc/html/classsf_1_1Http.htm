<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Http.htm">Http</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Http Class Reference<div class="ingroups"><a class="el" href="group__network.htm">Network module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Http" --><!-- doxytag: inherits="sf::NonCopyable" -->
<p>A HTTP client.  
 <a href="classsf_1_1Http.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Http_8hpp_source.htm">Http.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Http:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Http.png" usemap="#sf::Http_map" alt=""/>
  <map id="sf::Http_map" name="sf::Http_map">
<area href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable." alt="sf::NonCopyable" shape="rect" coords="0,0,105,24"/>
</map>
 </div></div>

<p><a href="classsf_1_1Http-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http_1_1Request.htm">Request</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a HTTP request.  <a href="classsf_1_1Http_1_1Request.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http_1_1Response.htm">Response</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a HTTP response.  <a href="classsf_1_1Http_1_1Response.htm#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.htm#abe2360194f99bdde402c9f97a85cf067">Http</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#abe2360194f99bdde402c9f97a85cf067"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.htm#a79efd844a735f083fcce0edbf1092385">Http</a> (const std::string &amp;host, unsigned short port=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the HTTP client with the target host.  <a href="#a79efd844a735f083fcce0edbf1092385"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.htm#a55121d543b61c41cf20b885a97b04e65">setHost</a> (const std::string &amp;host, unsigned short port=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the target host.  <a href="#a55121d543b61c41cf20b885a97b04e65"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Http_1_1Response.htm">Response</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Http.htm#aaf09ebfb5e00dcc82e0d494d5c6a9e2a">sendRequest</a> (const <a class="el" href="classsf_1_1Http_1_1Request.htm">Request</a> &amp;request, <a class="el" href="classsf_1_1Time.htm">Time</a> timeout=<a class="el" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0">Time::Zero</a>)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Send a HTTP request and return the server's response.  <a href="#aaf09ebfb5e00dcc82e0d494d5c6a9e2a"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A HTTP client. </p>
<p><a class="el" href="classsf_1_1Http.htm" title="A HTTP client.">sf::Http</a> is a very simple HTTP client that allows you to communicate with a web server.</p>
<p>You can retrieve web pages, send data to an interactive resource, download a remote file, etc.</p>
<p>The HTTP client is split into 3 classes: </p>
<ul>
<li><a class="el" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">sf::Http::Request</a> </li>
<li><a class="el" href="classsf_1_1Http_1_1Response.htm" title="Define a HTTP response.">sf::Http::Response</a> </li>
<li><a class="el" href="classsf_1_1Http.htm" title="A HTTP client.">sf::Http</a></li>
</ul>
<p><a class="el" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">sf::Http::Request</a> builds the request that will be sent to the server. A request is made of: </p>
<ul>
<li>a method (what you want to do) </li>
<li>a target URI (usually the name of the web page or file) </li>
<li>one or more header fields (options that you can pass to the server) </li>
<li>an optional body (for POST requests)</li>
</ul>
<p><a class="el" href="classsf_1_1Http_1_1Response.htm" title="Define a HTTP response.">sf::Http::Response</a> parse the response from the web server and provides getters to read them. The response contains: </p>
<ul>
<li>a status code </li>
<li>header fields (that may be answers to the ones that you requested) </li>
<li>a body, which contains the contents of the requested resource</li>
</ul>
<p><a class="el" href="classsf_1_1Http.htm" title="A HTTP client.">sf::Http</a> provides a simple function, SendRequest, to send a <a class="el" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">sf::Http::Request</a> and return the corresponding <a class="el" href="classsf_1_1Http_1_1Response.htm" title="Define a HTTP response.">sf::Http::Response</a> from the server.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <span class="comment">// Create a new HTTP client</span>
 <a class="code" href="classsf_1_1Http.htm" title="A HTTP client.">sf::Http</a> http;

 <span class="comment">// We&#39;ll work on http://www.sfml-dev.org</span>
 http.<a class="code" href="classsf_1_1Http.htm#a55121d543b61c41cf20b885a97b04e65" title="Set the target host.">setHost</a>(<span class="stringliteral">&quot;http://www.sfml-dev.org&quot;</span>);

 <span class="comment">// Prepare a request to get the &#39;features.php&#39; page</span>
 <a class="code" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">sf::Http::Request</a> request(<span class="stringliteral">&quot;features.php&quot;</span>);

 <span class="comment">// Send the request</span>
 <a class="code" href="classsf_1_1Http_1_1Response.htm" title="Define a HTTP response.">sf::Http::Response</a> response = http.<a class="code" href="classsf_1_1Http.htm#aaf09ebfb5e00dcc82e0d494d5c6a9e2a" title="Send a HTTP request and return the server&#39;s response.">sendRequest</a>(request);

 <span class="comment">// Check the status code and display the result</span>
 <a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8" title="Enumerate all the valid status codes for a response.">sf::Http::Response::Status</a> status = response.<a class="code" href="classsf_1_1Http_1_1Response.htm#a542e9856b1dd260a83940eb982b7f19a" title="Get the response status code.">getStatus</a>();
 <span class="keywordflow">if</span> (status == <a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a0158f932254d3f09647dd1f64bd43832" title="Most common code returned when operation was successful.">sf::Http::Response::Ok</a>)
 {
     std::cout &lt;&lt; response.<a class="code" href="classsf_1_1Http_1_1Response.htm#a6b74ef73051a16ebb20041495c758e22" title="Get the body of the response.">getBody</a>() &lt;&lt; std::endl;
 }
 <span class="keywordflow">else</span>
 {
     std::cout &lt;&lt; <span class="stringliteral">&quot;Error &quot;</span> &lt;&lt; status &lt;&lt; std::endl;
 }
</pre></div> 
<p>Definition at line <a class="el" href="Http_8hpp_source.htm#l00046">46</a> of file <a class="el" href="Http_8hpp_source.htm">Http.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="abe2360194f99bdde402c9f97a85cf067"></a><!-- doxytag: member="sf::Http::Http" ref="abe2360194f99bdde402c9f97a85cf067" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Http.htm#abe2360194f99bdde402c9f97a85cf067">sf::Http::Http</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a79efd844a735f083fcce0edbf1092385"></a><!-- doxytag: member="sf::Http::Http" ref="a79efd844a735f083fcce0edbf1092385" args="(const std::string &amp;host, unsigned short port=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Http.htm#abe2360194f99bdde402c9f97a85cf067">sf::Http::Http</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>port</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct the HTTP client with the target host. </p>
<p>This is equivalent to calling SetHost(host, port). The port has a default value of 0, which means that the HTTP client will use the right port according to the protocol used (80 for HTTP, 443 for HTTPS). You should leave it like this unless you really need a port other than the standard one, or use an unknown protocol.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">host</td><td>Web server to connect to </td></tr>
    <tr><td class="paramname">port</td><td>Port to use for connection </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="aaf09ebfb5e00dcc82e0d494d5c6a9e2a"></a><!-- doxytag: member="sf::Http::sendRequest" ref="aaf09ebfb5e00dcc82e0d494d5c6a9e2a" args="(const Request &amp;request, Time timeout=Time::Zero)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Http_1_1Response.htm">Response</a> <a class="el" href="classsf_1_1Http.htm#aaf09ebfb5e00dcc82e0d494d5c6a9e2a">sf::Http::sendRequest</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Http_1_1Request.htm">Request</a> &amp;&#160;</td>
          <td class="paramname"><em>request</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeout</em> = <code><a class="el" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0">Time::Zero</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Send a HTTP request and return the server's response. </p>
<p>You must have a valid host before sending a request (see SetHost). Any missing mandatory header field in the request will be added with an appropriate value. Warning: this function waits for the server's response and may not return instantly; use a thread if you don't want to block your application, or use a timeout to limit the time to wait. A value of <a class="el" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0" title="Predefined &quot;zero&quot; time value.">Time::Zero</a> means that the client will use the system defaut timeout (which is usually pretty long).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">request</td><td><a class="el" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">Request</a> to send </td></tr>
    <tr><td class="paramname">timeout</td><td>Maximum time to wait</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Server's response </dd></dl>

</div>
</div>
<a class="anchor" id="a55121d543b61c41cf20b885a97b04e65"></a><!-- doxytag: member="sf::Http::setHost" ref="a55121d543b61c41cf20b885a97b04e65" args="(const std::string &amp;host, unsigned short port=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Http.htm#a55121d543b61c41cf20b885a97b04e65">sf::Http::setHost</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>port</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the target host. </p>
<p>This function just stores the host address and port, it doesn't actually connect to it until you send a request. The port has a default value of 0, which means that the HTTP client will use the right port according to the protocol used (80 for HTTP, 443 for HTTPS). You should leave it like this unless you really need a port other than the standard one, or use an unknown protocol.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">host</td><td>Web server to connect to </td></tr>
    <tr><td class="paramname">port</td><td>Port to use for connection </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Http_8hpp_source.htm">Http.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
