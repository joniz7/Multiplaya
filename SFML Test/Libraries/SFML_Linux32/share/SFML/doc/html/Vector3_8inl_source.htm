<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Vector3.inl</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00027"></a>00027 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00028"></a>00028 <span class="keyword">inline</span> Vector3&lt;T&gt;::Vector3() :
<a name="l00029"></a>00029 x(0),
<a name="l00030"></a>00030 y(0),
<a name="l00031"></a>00031 z(0)
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 }
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00038"></a>00038 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00039"></a>00039 <span class="keyword">inline</span> <a class="code" href="classsf_1_1Vector3.htm#aee8be1985c6e45e381ad4071265636f9" title="Default constructor.">Vector3&lt;T&gt;::Vector3</a>(T X, T Y, T Z) :
<a name="l00040"></a>00040 x(X),
<a name="l00041"></a>00041 y(Y),
<a name="l00042"></a>00042 z(Z)
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00049"></a>00049 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00050"></a>00050 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;
<a name="l00051"></a>00051 <span class="keyword">inline</span> <a class="code" href="classsf_1_1Vector3.htm#aee8be1985c6e45e381ad4071265636f9" title="Default constructor.">Vector3&lt;T&gt;::Vector3</a>(<span class="keyword">const</span> Vector3&lt;U&gt;&amp; vector) :
<a name="l00052"></a>00052 x(static_cast&lt;T&gt;(vector.x)),
<a name="l00053"></a>00053 y(static_cast&lt;T&gt;(vector.y)),
<a name="l00054"></a>00054 z(static_cast&lt;T&gt;(vector.z))
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056 }
<a name="l00057"></a>00057 
<a name="l00058"></a>00058 
<a name="l00060"></a>00060 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00061"></a>00061 <span class="keyword">inline</span> Vector3&lt;T&gt; operator -(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left)
<a name="l00062"></a>00062 {
<a name="l00063"></a>00063     <span class="keywordflow">return</span> Vector3&lt;T&gt;(-left.x, -left.y, -left.z);
<a name="l00064"></a>00064 }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066 
<a name="l00068"></a>00068 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00069"></a>00069 <span class="keyword">inline</span> Vector3&lt;T&gt;&amp; operator +=(Vector3&lt;T&gt;&amp; left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071     left.x += right.x;
<a name="l00072"></a>00072     left.y += right.y;
<a name="l00073"></a>00073     left.z += right.z;
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="keywordflow">return</span> left;
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00080"></a>00080 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00081"></a>00081 <span class="keyword">inline</span> Vector3&lt;T&gt;&amp; operator -=(Vector3&lt;T&gt;&amp; left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083     left.x -= right.x;
<a name="l00084"></a>00084     left.y -= right.y;
<a name="l00085"></a>00085     left.z -= right.z;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087     <span class="keywordflow">return</span> left;
<a name="l00088"></a>00088 }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 
<a name="l00092"></a>00092 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00093"></a>00093 <span class="keyword">inline</span> Vector3&lt;T&gt; operator +(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00094"></a>00094 {
<a name="l00095"></a>00095     <span class="keywordflow">return</span> Vector3&lt;T&gt;(left.x + right.x, left.y + right.y, left.z + right.z);
<a name="l00096"></a>00096 }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 
<a name="l00100"></a>00100 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00101"></a>00101 <span class="keyword">inline</span> Vector3&lt;T&gt; operator -(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00102"></a>00102 {
<a name="l00103"></a>00103     <span class="keywordflow">return</span> Vector3&lt;T&gt;(left.x - right.x, left.y - right.y, left.z - right.z);
<a name="l00104"></a>00104 }
<a name="l00105"></a>00105 
<a name="l00106"></a>00106 
<a name="l00108"></a>00108 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00109"></a>00109 <span class="keyword">inline</span> Vector3&lt;T&gt; operator *(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left, T right)
<a name="l00110"></a>00110 {
<a name="l00111"></a>00111     <span class="keywordflow">return</span> Vector3&lt;T&gt;(left.x * right, left.y * right, left.z * right);
<a name="l00112"></a>00112 }
<a name="l00113"></a>00113 
<a name="l00114"></a>00114 
<a name="l00116"></a>00116 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00117"></a>00117 <span class="keyword">inline</span> Vector3&lt;T&gt; operator *(T left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00118"></a>00118 {
<a name="l00119"></a>00119     <span class="keywordflow">return</span> Vector3&lt;T&gt;(right.x * left, right.y * left, right.z * left);
<a name="l00120"></a>00120 }
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00124"></a>00124 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00125"></a>00125 <span class="keyword">inline</span> Vector3&lt;T&gt;&amp; operator *=(Vector3&lt;T&gt;&amp; left, T right)
<a name="l00126"></a>00126 {
<a name="l00127"></a>00127     left.x *= right;
<a name="l00128"></a>00128     left.y *= right;
<a name="l00129"></a>00129     left.z *= right;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="keywordflow">return</span> left;
<a name="l00132"></a>00132 }
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00136"></a>00136 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00137"></a>00137 <span class="keyword">inline</span> Vector3&lt;T&gt; operator /(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left, T right)
<a name="l00138"></a>00138 {
<a name="l00139"></a>00139     <span class="keywordflow">return</span> Vector3&lt;T&gt;(left.x / right, left.y / right, left.z / right);
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 
<a name="l00144"></a>00144 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00145"></a>00145 <span class="keyword">inline</span> Vector3&lt;T&gt;&amp; operator /=(Vector3&lt;T&gt;&amp; left, T right)
<a name="l00146"></a>00146 {
<a name="l00147"></a>00147     left.x /= right;
<a name="l00148"></a>00148     left.y /= right;
<a name="l00149"></a>00149     left.z /= right;
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     <span class="keywordflow">return</span> left;
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 
<a name="l00156"></a>00156 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00157"></a>00157 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator ==(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159     <span class="keywordflow">return</span> (left.x == right.x) &amp;&amp; (left.y == right.y) &amp;&amp; (left.z == right.z);
<a name="l00160"></a>00160 }
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 
<a name="l00164"></a>00164 <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;
<a name="l00165"></a>00165 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator !=(<span class="keyword">const</span> Vector3&lt;T&gt;&amp; left, <span class="keyword">const</span> Vector3&lt;T&gt;&amp; right)
<a name="l00166"></a>00166 {
<a name="l00167"></a>00167     <span class="keywordflow">return</span> (left.x != right.x) || (left.y != right.y) || (left.z != right.z);
<a name="l00168"></a>00168 }
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
