<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li class="current"><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Class List</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock">Here are the classes, structs, unions and interfaces with brief descriptions:</div><table>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm">sf::SoundStream::Chunk</a></td><td class="indexvalue">Structure defining a chunk of audio data to stream </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1CircleShape.htm">sf::CircleShape</a></td><td class="indexvalue">Specialized shape representing a circle </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Clock.htm">sf::Clock</a></td><td class="indexvalue">Utility class that measures the elapsed time </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Color.htm">sf::Color</a></td><td class="indexvalue">Utility class for manpulating RGBA colors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Context.htm">sf::Context</a></td><td class="indexvalue">Class holding a valid drawing context </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1ContextSettings.htm">sf::ContextSettings</a></td><td class="indexvalue">Structure defining the settings of the OpenGL context attached to a window </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1ConvexShape.htm">sf::ConvexShape</a></td><td class="indexvalue">Specialized shape representing a convex polygon </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Shader_1_1CurrentTextureType.htm">sf::Shader::CurrentTextureType</a></td><td class="indexvalue">Special type/value that can be passed to setParameter, and that represents the texture of the object being drawn </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp_1_1DirectoryResponse.htm">sf::Ftp::DirectoryResponse</a></td><td class="indexvalue">Specialization of FTP response returning a directory </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Drawable.htm">sf::Drawable</a></td><td class="indexvalue">Abstract base class for objects that can be drawn to a render target </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Event.htm">sf::Event</a></td><td class="indexvalue">Defines a system event and its parameters </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Font.htm">sf::Font</a></td><td class="indexvalue">Class for loading and manipulating character fonts </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp.htm">sf::Ftp</a></td><td class="indexvalue">A FTP client </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1GlResource.htm">sf::GlResource</a></td><td class="indexvalue">Base class for classes that require an OpenGL context </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Glyph.htm">sf::Glyph</a></td><td class="indexvalue">Structure describing a glyph </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Http.htm">sf::Http</a></td><td class="indexvalue">A HTTP client </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Image.htm">sf::Image</a></td><td class="indexvalue">Class for loading, manipulating and saving images </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1InputStream.htm">sf::InputStream</a></td><td class="indexvalue">Abstract class for custom file input streams </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1IpAddress.htm">sf::IpAddress</a></td><td class="indexvalue">Encapsulate an IPv4 network address </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Joystick.htm">sf::Joystick</a></td><td class="indexvalue">Give access to the real-time state of the joysticks </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1JoystickButtonEvent.htm">sf::Event::JoystickButtonEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Joystick.htm" title="Give access to the real-time state of the joysticks.">Joystick</a> buttons events parameters (JoystickButtonPressed, JoystickButtonReleased) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1JoystickConnectEvent.htm">sf::Event::JoystickConnectEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Joystick.htm" title="Give access to the real-time state of the joysticks.">Joystick</a> connection events parameters (JoystickConnected, JoystickDisconnected) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1JoystickMoveEvent.htm">sf::Event::JoystickMoveEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Joystick.htm" title="Give access to the real-time state of the joysticks.">Joystick</a> axis move event parameters (JoystickMoved) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Keyboard.htm">sf::Keyboard</a></td><td class="indexvalue">Give access to the real-time state of the keyboard </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1KeyEvent.htm">sf::Event::KeyEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Keyboard.htm" title="Give access to the real-time state of the keyboard.">Keyboard</a> event parameters (KeyPressed, KeyReleased) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Listener.htm">sf::Listener</a></td><td class="indexvalue">The audio listener is the point in the scene from where all the sounds are heard </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp_1_1ListingResponse.htm">sf::Ftp::ListingResponse</a></td><td class="indexvalue">Specialization of FTP response returning a filename lisiting </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Lock.htm">sf::Lock</a></td><td class="indexvalue">Automatic wrapper for locking and unlocking mutexes </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Mouse.htm">sf::Mouse</a></td><td class="indexvalue">Give access to the real-time state of the mouse </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1MouseButtonEvent.htm">sf::Event::MouseButtonEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Mouse.htm" title="Give access to the real-time state of the mouse.">Mouse</a> buttons events parameters (MouseButtonPressed, MouseButtonReleased) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1MouseMoveEvent.htm">sf::Event::MouseMoveEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Mouse.htm" title="Give access to the real-time state of the mouse.">Mouse</a> move event parameters (MouseMoved) </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1MouseWheelEvent.htm">sf::Event::MouseWheelEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Mouse.htm" title="Give access to the real-time state of the mouse.">Mouse</a> wheel events parameters (MouseWheelMoved) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Music.htm">sf::Music</a></td><td class="indexvalue">Streamed music played from an audio file </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Mutex.htm">sf::Mutex</a></td><td class="indexvalue">Blocks concurrent access to shared resources from multiple threads </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1NonCopyable.htm">sf::NonCopyable</a></td><td class="indexvalue">Utility class that makes any derived class non-copyable </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Packet.htm">sf::Packet</a></td><td class="indexvalue">Utility class to build blocks of data to transfer over the network </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Rect.htm">sf::Rect&lt; T &gt;</a></td><td class="indexvalue">Utility class for manipulating 2D axis aligned rectangles </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RectangleShape.htm">sf::RectangleShape</a></td><td class="indexvalue">Specialized shape representing a rectangle </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RenderStates.htm">sf::RenderStates</a></td><td class="indexvalue">Define the states used for drawing to a <a class="el" href="classsf_1_1RenderTarget.htm" title="Base class for all render targets (window, texture, ...)">RenderTarget</a> </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td class="indexvalue">Base class for all render targets (window, texture, ...) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RenderTexture.htm">sf::RenderTexture</a></td><td class="indexvalue">Target for off-screen 2D rendering into an texture </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> that can serve as a target for 2D drawing </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Http_1_1Request.htm">sf::Http::Request</a></td><td class="indexvalue">Define a HTTP request </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Http_1_1Response.htm">sf::Http::Response</a></td><td class="indexvalue">Define a HTTP response </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Ftp_1_1Response.htm">sf::Ftp::Response</a></td><td class="indexvalue">Define a FTP response </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Shader.htm" title="Shader class (vertex and fragment)">Shader</a> class (vertex and fragment) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Shape.htm">sf::Shape</a></td><td class="indexvalue">Base class for textured shapes with outline </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1SizeEvent.htm">sf::Event::SizeEvent</a></td><td class="indexvalue">Size events parameters (Resized) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Socket.htm">sf::Socket</a></td><td class="indexvalue">Base class for all the socket types </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SocketSelector.htm">sf::SocketSelector</a></td><td class="indexvalue">Multiplexer that allows to read from multiple sockets </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Sound.htm">sf::Sound</a></td><td class="indexvalue">Regular sound that can be played in the audio environment </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundBuffer.htm">sf::SoundBuffer</a></td><td class="indexvalue">Storage for audio samples defining a sound </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundBufferRecorder.htm">sf::SoundBufferRecorder</a></td><td class="indexvalue">Specialized <a class="el" href="classsf_1_1SoundRecorder.htm" title="Abstract base class for capturing sound data.">SoundRecorder</a> which stores the captured audio data into a sound buffer </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundRecorder.htm">sf::SoundRecorder</a></td><td class="indexvalue">Abstract base class for capturing sound data </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundSource.htm">sf::SoundSource</a></td><td class="indexvalue">Base class defining a sound's properties </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1SoundStream.htm">sf::SoundStream</a></td><td class="indexvalue">Abstract base class for streamed audio sources </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Sprite.htm">sf::Sprite</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Drawable.htm" title="Abstract base class for objects that can be drawn to a render target.">Drawable</a> representation of a texture, with its own transformations, color, etc </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1String.htm">sf::String</a></td><td class="indexvalue">Utility string class that automatically handles conversions between types and encodings </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1TcpListener.htm">sf::TcpListener</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Socket.htm" title="Base class for all the socket types.">Socket</a> that listens to new TCP connections </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1TcpSocket.htm">sf::TcpSocket</a></td><td class="indexvalue">Specialized socket using the TCP protocol </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Text.htm">sf::Text</a></td><td class="indexvalue">Graphical text that can be drawn to a render target </td></tr>
  <tr><td class="indexkey"><a class="el" href="structsf_1_1Event_1_1TextEvent.htm">sf::Event::TextEvent</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Text.htm" title="Graphical text that can be drawn to a render target.">Text</a> event parameters (TextEntered) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Texture.htm">sf::Texture</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a> living on the graphics card that can be used for drawing </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Thread.htm">sf::Thread</a></td><td class="indexvalue">Utility class to manipulate threads </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1ThreadLocal.htm">sf::ThreadLocal</a></td><td class="indexvalue">Defines variables with thread-local storage </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr&lt; T &gt;</a></td><td class="indexvalue">Pointer to a thread-local variable </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Time.htm">sf::Time</a></td><td class="indexvalue">Represents a time value </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td class="indexvalue">Define a 3x3 transform matrix </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Transformable.htm">sf::Transformable</a></td><td class="indexvalue">Decomposed transform defined by a position, a rotation and a scale </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1UdpSocket.htm">sf::UdpSocket</a></td><td class="indexvalue">Specialized socket using the UDP protocol </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Utf.htm">sf::Utf</a></td><td class="indexvalue">Utility class providing generic functions for UTF conversions </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Utf_3_0116_01_4.htm">sf::Utf&lt; 16 &gt;</a></td><td class="indexvalue">Specialization of the <a class="el" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">Utf</a> template for UTF-16 </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Utf_3_0132_01_4.htm">sf::Utf&lt; 32 &gt;</a></td><td class="indexvalue">Specialization of the <a class="el" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">Utf</a> template for UTF-32 </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Utf_3_018_01_4.htm">sf::Utf&lt; 8 &gt;</a></td><td class="indexvalue">Specialization of the <a class="el" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">Utf</a> template for UTF-8 </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2&lt; T &gt;</a></td><td class="indexvalue">Utility template class for manipulating 2-dimensional vectors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Vector3.htm">sf::Vector3&lt; T &gt;</a></td><td class="indexvalue">Utility template class for manipulating 3-dimensional vectors </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Vertex.htm">sf::Vertex</a></td><td class="indexvalue">Define a point with color and texture coordinates </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1VertexArray.htm">sf::VertexArray</a></td><td class="indexvalue">Define a set of one or more 2D primitives </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1VideoMode.htm">sf::VideoMode</a></td><td class="indexvalue"><a class="el" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp)">VideoMode</a> defines a video mode (width, height, bpp) </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1View.htm">sf::View</a></td><td class="indexvalue">2D camera that defines what region is shown on screen </td></tr>
  <tr><td class="indexkey"><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td class="indexvalue"><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> that serves as a target for OpenGL rendering </td></tr>
</table>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
