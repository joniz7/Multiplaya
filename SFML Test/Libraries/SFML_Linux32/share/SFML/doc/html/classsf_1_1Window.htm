<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Window.htm">Window</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Window Class Reference<div class="ingroups"><a class="el" href="group__window.htm">Window module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Window" --><!-- doxytag: inherits="sf::GlResource,sf::NonCopyable" -->
<p><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> that serves as a target for OpenGL rendering.  
 <a href="classsf_1_1Window.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Window_2Window_8hpp_source.htm">Window.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::Window:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1Window.png" usemap="#sf::Window_map" alt=""/>
  <map id="sf::Window_map" name="sf::Window_map">
<area href="classsf_1_1GlResource.htm" title="Base class for classes that require an OpenGL context." alt="sf::GlResource" shape="rect" coords="0,0,113,24"/>
<area href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable." alt="sf::NonCopyable" shape="rect" coords="123,0,236,24"/>
<area href="classsf_1_1RenderWindow.htm" title="Window that can serve as a target for 2D drawing." alt="sf::RenderWindow" shape="rect" coords="61,112,174,136"/>
</map>
 </div></div>

<p><a href="classsf_1_1Window-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a5359122166b4dc492c3d25caf08ccfc4">Window</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a5359122166b4dc492c3d25caf08ccfc4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a33341e43c1282a698a39c587f14a2b72">Window</a> (<a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a> mode, const std::string &amp;title, Uint32 style=Style::Default, const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;settings=<a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a new window.  <a href="#a33341e43c1282a698a39c587f14a2b72"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a6d60912633bff9d33cf3ade4e0201de4">Window</a> (WindowHandle handle, const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;settings=<a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the window from an existing control.  <a href="#a6d60912633bff9d33cf3ade4e0201de4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#ac30eb6ea5f5594204944d09d4bd69a97">~Window</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#ac30eb6ea5f5594204944d09d4bd69a97"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a21c51afab5ae676c9c8b325d453958d5">create</a> (<a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a> mode, const std::string &amp;title, Uint32 style=Style::Default, const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;settings=<a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create (or recreate) the window.  <a href="#a21c51afab5ae676c9c8b325d453958d5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#acf67483dc21f08d65c8835b3889b41b2">create</a> (WindowHandle handle, const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;settings=<a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create (or recreate) the window from an existing control.  <a href="#acf67483dc21f08d65c8835b3889b41b2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a99d1e030387b0c26f5995670504fe7b5">close</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Close the window and destroy all the attached resources.  <a href="#a99d1e030387b0c26f5995670504fe7b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a5aa9c2b2b0e51d3423c2b66c80253337">isOpen</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether or not the window is open.  <a href="#a5aa9c2b2b0e51d3423c2b66c80253337"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a5a9d5c15facf25ad4d9b2b30caa0a2db">getSettings</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the settings of the OpenGL context of the window.  <a href="#a5a9d5c15facf25ad4d9b2b30caa0a2db"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7">pollEvent</a> (<a class="el" href="classsf_1_1Event.htm">Event</a> &amp;event)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pop the event on top of events stack, if any, and return it.  <a href="#a338e996585faf82e93069858e3b531b7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#aaf02ab64fbc1d374eef3696df54137bc">waitEvent</a> (<a class="el" href="classsf_1_1Event.htm">Event</a> &amp;event)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait for an event and return it.  <a href="#aaf02ab64fbc1d374eef3696df54137bc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2i</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a2e6bc12612ea289afea8268fe37c8678">getPosition</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the position of the window.  <a href="#a2e6bc12612ea289afea8268fe37c8678"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a6c4078bfbf61c29bfc4b4732ce764f17">setPosition</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2i</a> &amp;position)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the position of the window on screen.  <a href="#a6c4078bfbf61c29bfc4b4732ce764f17"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2u</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#ad2b55a731ba1680fe67292991ef1610e">getSize</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the rendering region of the window.  <a href="#ad2b55a731ba1680fe67292991ef1610e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#ad6513418bb2963347cd1819a1810524d">setSize</a> (const <a class="el" href="classsf_1_1Vector2.htm">Vector2u</a> size)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the size of the rendering region of the window.  <a href="#ad6513418bb2963347cd1819a1810524d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a7f419f99a799424376aba838abfbd273">setTitle</a> (const std::string &amp;title)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the title of the window.  <a href="#a7f419f99a799424376aba838abfbd273"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a63af61e026fba08e3153fd013620bcc0">setIcon</a> (unsigned int width, unsigned int height, const Uint8 *pixels)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the window's icon.  <a href="#a63af61e026fba08e3153fd013620bcc0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a160f7f11a207603d7e99ce606e749703">setVisible</a> (bool visible)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Show or hide the window.  <a href="#a160f7f11a207603d7e99ce606e749703"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a59041c4556e0351048f8aff366034f61">setVerticalSyncEnabled</a> (bool enabled)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable vertical synchronization.  <a href="#a59041c4556e0351048f8aff366034f61"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#aad3991c25e0a83afbb4d62febf9b7b14">setMouseCursorVisible</a> (bool visible)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Show or hide the mouse cursor.  <a href="#aad3991c25e0a83afbb4d62febf9b7b14"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#aef9f2b14c10ecba8a8df95dd51c5bb73">setKeyRepeatEnabled</a> (bool enabled)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enable or disable automatic key-repeat.  <a href="#aef9f2b14c10ecba8a8df95dd51c5bb73"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#af4322d315baf93405bf0d5087ad5e784">setFramerateLimit</a> (unsigned int limit)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Limit the framerate to a maximum fixed frequency.  <a href="#af4322d315baf93405bf0d5087ad5e784"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#aa45b8f54e29a6f59f1fc7ee66b2fab68">setJoystickThreshold</a> (float threshold)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the joystick threshold.  <a href="#aa45b8f54e29a6f59f1fc7ee66b2fab68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a17ccf8ece0ce0bf2f1e6698bcfa29731">setActive</a> (bool active=true) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Activate or deactivate the window as the current target for OpenGL rendering.  <a href="#a17ccf8ece0ce0bf2f1e6698bcfa29731"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#adabf839cb103ac96cfc82f781638772a">display</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Display on screen what has been rendered to the window so far.  <a href="#adabf839cb103ac96cfc82f781638772a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">WindowHandle&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a26368e7162229f8637c34d80ab0f138e">getSystemHandle</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the OS-specific handle of the window.  <a href="#a26368e7162229f8637c34d80ab0f138e"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a106633b9be49b27f83d4712689b493eb">onCreate</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Function called after the window has been created.  <a href="#a106633b9be49b27f83d4712689b493eb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Window.htm#a10f567a387da7b49f417f73321fcf64d">onResize</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Function called after the window has been resized.  <a href="#a10f567a387da7b49f417f73321fcf64d"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1GlResource.htm#ae0efa7935241644608ca32ba47b22a33">ensureGlContext</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make sure that a valid OpenGL context exists in the current thread.  <a href="#ae0efa7935241644608ca32ba47b22a33"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> that serves as a target for OpenGL rendering. </p>
<p><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">sf::Window</a> is the main class of the <a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> module.</p>
<p>It defines an OS window that is able to receive an OpenGL rendering.</p>
<p>A <a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">sf::Window</a> can create its own new window, or be embedded into an already existing control using the create(handle) function. This can be useful for embedding an OpenGL rendering area into a view which is part of a bigger GUI with existing windows, controls, etc. It can also serve as embedding an OpenGL rendering area into a window created by another (probably richer) GUI library like Qt or wxWidgets.</p>
<p>The <a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">sf::Window</a> class provides a simple interface for manipulating the window: move, resize, show/hide, control mouse cursor, etc. It also provides event handling through its <a class="el" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7" title="Pop the event on top of events stack, if any, and return it.">pollEvent()</a> and <a class="el" href="classsf_1_1Window.htm#aaf02ab64fbc1d374eef3696df54137bc" title="Wait for an event and return it.">waitEvent()</a> functions.</p>
<p>Note that OpenGL experts can pass their own parameters (antialiasing level, bits for the depth and stencil buffers, etc.) to the OpenGL context attached to the window, with the <a class="el" href="structsf_1_1ContextSettings.htm" title="Structure defining the settings of the OpenGL context attached to a window.">sf::ContextSettings</a> structure which is passed as an optional argument when creating the window.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <span class="comment">// Declare and create a new window</span>
 <a class="code" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">sf::Window</a> window(<a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp)">sf::VideoMode</a>(800, 600), <span class="stringliteral">&quot;SFML window&quot;</span>);

 <span class="comment">// Limit the framerate to 60 frames per second (this step is optional)</span>
 window.<a class="code" href="classsf_1_1Window.htm#af4322d315baf93405bf0d5087ad5e784" title="Limit the framerate to a maximum fixed frequency.">setFramerateLimit</a>(60);

 <span class="comment">// The main loop - ends as soon as the window is closed</span>
 <span class="keywordflow">while</span> (window.<a class="code" href="classsf_1_1Window.htm#a5aa9c2b2b0e51d3423c2b66c80253337" title="Tell whether or not the window is open.">isOpen</a>())
 {
    <span class="comment">// Event processing</span>
    <a class="code" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">sf::Event</a> event;
    <span class="keywordflow">while</span> (window.<a class="code" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7" title="Pop the event on top of events stack, if any, and return it.">pollEvent</a>(event))
    {
        <span class="comment">// Request for closing the window</span>
        <span class="keywordflow">if</span> (event.<a class="code" href="classsf_1_1Event.htm#adf2f8044f713fd9d6019077b0d1ffe0a" title="Type of the event.">type</a> == <a class="code" href="classsf_1_1Event.htm#af41fa9ed45c02449030699f671331d4aa316e4212e083f1dce79efd8d9e9c0a95" title="The window requested to be closed.">sf::Event::Closed</a>)
            window.<a class="code" href="classsf_1_1Window.htm#a99d1e030387b0c26f5995670504fe7b5" title="Close the window and destroy all the attached resources.">close</a>();
    }

    <span class="comment">// Activate the window for OpenGL rendering</span>
    window.<a class="code" href="classsf_1_1Window.htm#a17ccf8ece0ce0bf2f1e6698bcfa29731" title="Activate or deactivate the window as the current target for OpenGL rendering.">setActive</a>();

    <span class="comment">// OpenGL drawing commands go here...</span>

    <span class="comment">// End the current frame and display its contents on screen</span>
    window.<a class="code" href="classsf_1_1Window.htm#adabf839cb103ac96cfc82f781638772a" title="Display on screen what has been rendered to the window so far.">display</a>();
 }
</pre></div> 
<p>Definition at line <a class="el" href="Window_2Window_8hpp_source.htm#l00057">57</a> of file <a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a5359122166b4dc492c3d25caf08ccfc4"></a><!-- doxytag: member="sf::Window::Window" ref="a5359122166b4dc492c3d25caf08ccfc4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Window.htm#a5359122166b4dc492c3d25caf08ccfc4">sf::Window::Window</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>This constructor doesn't actually create the window, use the other constructors or call create to do so. </p>

</div>
</div>
<a class="anchor" id="a33341e43c1282a698a39c587f14a2b72"></a><!-- doxytag: member="sf::Window::Window" ref="a33341e43c1282a698a39c587f14a2b72" args="(VideoMode mode, const std::string &amp;title, Uint32 style=Style::Default, const ContextSettings &amp;settings=ContextSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Window.htm#a5359122166b4dc492c3d25caf08ccfc4">sf::Window::Window</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>style</em> = <code>Style::Default</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em> = <code><a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a new window. </p>
<p>This constructor creates the window with the size and pixel depth defined in <em>mode</em>. An optional style can be passed to customize the look and behaviour of the window (borders, title bar, resizable, closable, ...). If <em>style</em> contains Style::Fullscreen, then <em>mode</em> must be a valid video mode.</p>
<p>The fourth parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>Video mode to use (defines the width, height and depth of the rendering area of the window) </td></tr>
    <tr><td class="paramname">title</td><td>Title of the window </td></tr>
    <tr><td class="paramname">style</td><td><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> style </td></tr>
    <tr><td class="paramname">settings</td><td>Additional settings for the underlying OpenGL context </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6d60912633bff9d33cf3ade4e0201de4"></a><!-- doxytag: member="sf::Window::Window" ref="a6d60912633bff9d33cf3ade4e0201de4" args="(WindowHandle handle, const ContextSettings &amp;settings=ContextSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Window.htm#a5359122166b4dc492c3d25caf08ccfc4">sf::Window::Window</a> </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&#160;</td>
          <td class="paramname"><em>handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em> = <code><a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct the window from an existing control. </p>
<p>Use this constructor if you want to create an OpenGL rendering area into an already existing control.</p>
<p>The second parameter is an optional structure specifying advanced OpenGL context settings such as antialiasing, depth-buffer bits, etc.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>Platform-specific handle of the control </td></tr>
    <tr><td class="paramname">settings</td><td>Additional settings for the underlying OpenGL context </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac30eb6ea5f5594204944d09d4bd69a97"></a><!-- doxytag: member="sf::Window::~Window" ref="ac30eb6ea5f5594204944d09d4bd69a97" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classsf_1_1Window.htm#ac30eb6ea5f5594204944d09d4bd69a97">sf::Window::~Window</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>
<p>Closes the window and free all the resources attached to it. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a99d1e030387b0c26f5995670504fe7b5"></a><!-- doxytag: member="sf::Window::close" ref="a99d1e030387b0c26f5995670504fe7b5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a99d1e030387b0c26f5995670504fe7b5">sf::Window::close</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Close the window and destroy all the attached resources. </p>
<p>After calling this function, the <a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">sf::Window</a> instance remains valid and you can call <a class="el" href="classsf_1_1Window.htm#a21c51afab5ae676c9c8b325d453958d5" title="Create (or recreate) the window.">create()</a> to recreate the window. All other functions such as <a class="el" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7" title="Pop the event on top of events stack, if any, and return it.">pollEvent()</a> or <a class="el" href="classsf_1_1Window.htm#adabf839cb103ac96cfc82f781638772a" title="Display on screen what has been rendered to the window so far.">display()</a> will still work (i.e. you don't have to test <a class="el" href="classsf_1_1Window.htm#a5aa9c2b2b0e51d3423c2b66c80253337" title="Tell whether or not the window is open.">isOpen()</a> every time), and will have no effect on closed windows. </p>

</div>
</div>
<a class="anchor" id="a21c51afab5ae676c9c8b325d453958d5"></a><!-- doxytag: member="sf::Window::create" ref="a21c51afab5ae676c9c8b325d453958d5" args="(VideoMode mode, const std::string &amp;title, Uint32 style=Style::Default, const ContextSettings &amp;settings=ContextSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a21c51afab5ae676c9c8b325d453958d5">sf::Window::create</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1VideoMode.htm">VideoMode</a>&#160;</td>
          <td class="paramname"><em>mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>style</em> = <code>Style::Default</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em> = <code><a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create (or recreate) the window. </p>
<p>If the window was already created, it closes it first. If <em>style</em> contains Style::Fullscreen, then <em>mode</em> must be a valid video mode.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mode</td><td>Video mode to use (defines the width, height and depth of the rendering area of the window) </td></tr>
    <tr><td class="paramname">title</td><td>Title of the window </td></tr>
    <tr><td class="paramname">style</td><td><a class="el" href="classsf_1_1Window.htm" title="Window that serves as a target for OpenGL rendering.">Window</a> style </td></tr>
    <tr><td class="paramname">settings</td><td>Additional settings for the underlying OpenGL context </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acf67483dc21f08d65c8835b3889b41b2"></a><!-- doxytag: member="sf::Window::create" ref="acf67483dc21f08d65c8835b3889b41b2" args="(WindowHandle handle, const ContextSettings &amp;settings=ContextSettings())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a21c51afab5ae676c9c8b325d453958d5">sf::Window::create</a> </td>
          <td>(</td>
          <td class="paramtype">WindowHandle&#160;</td>
          <td class="paramname"><em>handle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a> &amp;&#160;</td>
          <td class="paramname"><em>settings</em> = <code><a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create (or recreate) the window from an existing control. </p>
<p>Use this function if you want to create an OpenGL rendering area into an already existing control. If the window was already created, it closes it first.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">handle</td><td>Platform-specific handle of the control </td></tr>
    <tr><td class="paramname">settings</td><td>Additional settings for the underlying OpenGL context </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adabf839cb103ac96cfc82f781638772a"></a><!-- doxytag: member="sf::Window::display" ref="adabf839cb103ac96cfc82f781638772a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#adabf839cb103ac96cfc82f781638772a">sf::Window::display</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Display on screen what has been rendered to the window so far. </p>
<p>This function is typically called after all OpenGL rendering has been done for the current frame, in order to show it on screen. </p>

</div>
</div>
<a class="anchor" id="a2e6bc12612ea289afea8268fe37c8678"></a><!-- doxytag: member="sf::Window::getPosition" ref="a2e6bc12612ea289afea8268fe37c8678" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2i</a> <a class="el" href="classsf_1_1Window.htm#a2e6bc12612ea289afea8268fe37c8678">sf::Window::getPosition</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the position of the window. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Position of the window, in pixels</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#a6c4078bfbf61c29bfc4b4732ce764f17" title="Change the position of the window on screen.">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5a9d5c15facf25ad4d9b2b30caa0a2db"></a><!-- doxytag: member="sf::Window::getSettings" ref="a5a9d5c15facf25ad4d9b2b30caa0a2db" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="structsf_1_1ContextSettings.htm">ContextSettings</a>&amp; <a class="el" href="classsf_1_1Window.htm#a5a9d5c15facf25ad4d9b2b30caa0a2db">sf::Window::getSettings</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the settings of the OpenGL context of the window. </p>
<p>Note that these settings may be different from what was passed to the constructor or the <a class="el" href="classsf_1_1Window.htm#a21c51afab5ae676c9c8b325d453958d5" title="Create (or recreate) the window.">create()</a> function, if one or more settings were not supported. In this case, SFML chose the closest match.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Structure containing the OpenGL context settings </dd></dl>

</div>
</div>
<a class="anchor" id="ad2b55a731ba1680fe67292991ef1610e"></a><!-- doxytag: member="sf::Window::getSize" ref="ad2b55a731ba1680fe67292991ef1610e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2u</a> <a class="el" href="classsf_1_1Window.htm#ad2b55a731ba1680fe67292991ef1610e">sf::Window::getSize</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the size of the rendering region of the window. </p>
<p>The size doesn't include the titlebar and borders of the window.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Size in pixels</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#ad6513418bb2963347cd1819a1810524d" title="Change the size of the rendering region of the window.">setSize</a> </dd></dl>

<p>Reimplemented in <a class="el" href="classsf_1_1RenderWindow.htm#a2c7ff414be32621a453745cf2a0f8a3e">sf::RenderWindow</a>.</p>

</div>
</div>
<a class="anchor" id="a26368e7162229f8637c34d80ab0f138e"></a><!-- doxytag: member="sf::Window::getSystemHandle" ref="a26368e7162229f8637c34d80ab0f138e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">WindowHandle <a class="el" href="classsf_1_1Window.htm#a26368e7162229f8637c34d80ab0f138e">sf::Window::getSystemHandle</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the OS-specific handle of the window. </p>
<p>The type of the returned handle is sf::WindowHandle, which is a typedef to the handle type defined by the OS. You shouldn't need to use this function, unless you have very specific stuff to implement that SFML doesn't support, or implement a temporary workaround until a bug is fixed.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>System handle of the window </dd></dl>

</div>
</div>
<a class="anchor" id="a5aa9c2b2b0e51d3423c2b66c80253337"></a><!-- doxytag: member="sf::Window::isOpen" ref="a5aa9c2b2b0e51d3423c2b66c80253337" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Window.htm#a5aa9c2b2b0e51d3423c2b66c80253337">sf::Window::isOpen</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Tell whether or not the window is open. </p>
<p>This function returns whether or not the window exists. Note that a hidden window (setVisible(false)) is open (therefore this function would return true).</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the window is open, false if it has been closed </dd></dl>

</div>
</div>
<a class="anchor" id="a106633b9be49b27f83d4712689b493eb"></a><!-- doxytag: member="sf::Window::onCreate" ref="a106633b9be49b27f83d4712689b493eb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classsf_1_1Window.htm#a106633b9be49b27f83d4712689b493eb">sf::Window::onCreate</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Function called after the window has been created. </p>
<p>This function is called so that derived classes can perform their own specific initialization as soon as the window is created. </p>

<p>Reimplemented in <a class="el" href="classsf_1_1RenderWindow.htm#a5bef0040b0fa87bed9fbd459c980d53a">sf::RenderWindow</a>.</p>

</div>
</div>
<a class="anchor" id="a10f567a387da7b49f417f73321fcf64d"></a><!-- doxytag: member="sf::Window::onResize" ref="a10f567a387da7b49f417f73321fcf64d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classsf_1_1Window.htm#a10f567a387da7b49f417f73321fcf64d">sf::Window::onResize</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Function called after the window has been resized. </p>
<p>This function is called so that derived classes can perform custom actions when the size of the window changes. </p>

<p>Reimplemented in <a class="el" href="classsf_1_1RenderWindow.htm#a5c85fe482313562d33ffd24a194b6fef">sf::RenderWindow</a>.</p>

</div>
</div>
<a class="anchor" id="a338e996585faf82e93069858e3b531b7"></a><!-- doxytag: member="sf::Window::pollEvent" ref="a338e996585faf82e93069858e3b531b7" args="(Event &amp;event)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7">sf::Window::pollEvent</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Event.htm">Event</a> &amp;&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pop the event on top of events stack, if any, and return it. </p>
<p>This function is not blocking: if there's no pending event then it will return false and leave <em>event</em> unmodified. Note that more than one event may be present in the events stack, thus you should always call this function in a loop to make sure that you process every pending event. </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">sf::Event</a> event;
 <span class="keywordflow">while</span> (window.<a class="code" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7" title="Pop the event on top of events stack, if any, and return it.">pollEvent</a>(event))
 {
    <span class="comment">// process event...</span>
 }
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td><a class="el" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">Event</a> to be returned</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if an event was returned, or false if the events stack was empty</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#aaf02ab64fbc1d374eef3696df54137bc" title="Wait for an event and return it.">waitEvent</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a17ccf8ece0ce0bf2f1e6698bcfa29731"></a><!-- doxytag: member="sf::Window::setActive" ref="a17ccf8ece0ce0bf2f1e6698bcfa29731" args="(bool active=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Window.htm#a17ccf8ece0ce0bf2f1e6698bcfa29731">sf::Window::setActive</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>active</em> = <code>true</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Activate or deactivate the window as the current target for OpenGL rendering. </p>
<p>A window is active only on the current thread, if you want to make it active on another thread you have to deactivate it on the previous thread first if it was active. Only one window can be active on a thread at a time, thus the window previously active (if any) automatically gets deactivated.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">active</td><td>True to activate, false to deactivate</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if operation was successful, false otherwise </dd></dl>

</div>
</div>
<a class="anchor" id="af4322d315baf93405bf0d5087ad5e784"></a><!-- doxytag: member="sf::Window::setFramerateLimit" ref="af4322d315baf93405bf0d5087ad5e784" args="(unsigned int limit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#af4322d315baf93405bf0d5087ad5e784">sf::Window::setFramerateLimit</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>limit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Limit the framerate to a maximum fixed frequency. </p>
<p>If a limit is set, the window will use a small delay after each call to <a class="el" href="classsf_1_1Window.htm#adabf839cb103ac96cfc82f781638772a" title="Display on screen what has been rendered to the window so far.">display()</a> to ensure that the current frame lasted long enough to match the framerate limit. SFML will try to match the given limit as much as it can, but since it internally uses sf::sleep, whose precision depends on the underlying OS, the results may be a little unprecise as well (for example, you can get 65 FPS when requesting 60).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">limit</td><td>Framerate limit, in frames per seconds (use 0 to disable limit) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a63af61e026fba08e3153fd013620bcc0"></a><!-- doxytag: member="sf::Window::setIcon" ref="a63af61e026fba08e3153fd013620bcc0" args="(unsigned int width, unsigned int height, const Uint8 *pixels)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a63af61e026fba08e3153fd013620bcc0">sf::Window::setIcon</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&#160;</td>
          <td class="paramname"><em>pixels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the window's icon. </p>
<p><em>pixels</em> must be an array of <em>width</em> x <em>height</em> pixels in 32-bits RGBA format.</p>
<p>The OS default icon is used by default.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>Icon's width, in pixels </td></tr>
    <tr><td class="paramname">height</td><td>Icon's height, in pixels </td></tr>
    <tr><td class="paramname">pixels</td><td>Pointer to the array of pixels in memory</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#a7f419f99a799424376aba838abfbd273" title="Change the title of the window.">setTitle</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa45b8f54e29a6f59f1fc7ee66b2fab68"></a><!-- doxytag: member="sf::Window::setJoystickThreshold" ref="aa45b8f54e29a6f59f1fc7ee66b2fab68" args="(float threshold)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#aa45b8f54e29a6f59f1fc7ee66b2fab68">sf::Window::setJoystickThreshold</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>threshold</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the joystick threshold. </p>
<p>The joystick threshold is the value below which no JoystickMoved event will be generated.</p>
<p>The threshold value is 0.1 by default.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">threshold</td><td>New threshold, in the range [0, 100] </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aef9f2b14c10ecba8a8df95dd51c5bb73"></a><!-- doxytag: member="sf::Window::setKeyRepeatEnabled" ref="aef9f2b14c10ecba8a8df95dd51c5bb73" args="(bool enabled)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#aef9f2b14c10ecba8a8df95dd51c5bb73">sf::Window::setKeyRepeatEnabled</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enabled</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable automatic key-repeat. </p>
<p>If key repeat is enabled, you will receive repeated KeyPressed events while keeping a key pressed. If it is disabled, you will only get a single event when the key is pressed.</p>
<p>Key repeat is enabled by default.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">enabled</td><td>True to enable, false to disable </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aad3991c25e0a83afbb4d62febf9b7b14"></a><!-- doxytag: member="sf::Window::setMouseCursorVisible" ref="aad3991c25e0a83afbb4d62febf9b7b14" args="(bool visible)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#aad3991c25e0a83afbb4d62febf9b7b14">sf::Window::setMouseCursorVisible</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>visible</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Show or hide the mouse cursor. </p>
<p>The mouse cursor is visible by default.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">visible</td><td>True to show the mouse cursor, false to hide it </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6c4078bfbf61c29bfc4b4732ce764f17"></a><!-- doxytag: member="sf::Window::setPosition" ref="a6c4078bfbf61c29bfc4b4732ce764f17" args="(const Vector2i &amp;position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a6c4078bfbf61c29bfc4b4732ce764f17">sf::Window::setPosition</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2i</a> &amp;&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the position of the window on screen. </p>
<p>This function only works for top-level windows (i.e. it will be ignored for windows created from the handle of a child window/control).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>New position, in pixels</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#a2e6bc12612ea289afea8268fe37c8678" title="Get the position of the window.">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad6513418bb2963347cd1819a1810524d"></a><!-- doxytag: member="sf::Window::setSize" ref="ad6513418bb2963347cd1819a1810524d" args="(const Vector2u size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#ad6513418bb2963347cd1819a1810524d">sf::Window::setSize</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector2.htm">Vector2u</a>&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the size of the rendering region of the window. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>New size, in pixels</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#ad2b55a731ba1680fe67292991ef1610e" title="Get the size of the rendering region of the window.">getSize</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7f419f99a799424376aba838abfbd273"></a><!-- doxytag: member="sf::Window::setTitle" ref="a7f419f99a799424376aba838abfbd273" args="(const std::string &amp;title)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a7f419f99a799424376aba838abfbd273">sf::Window::setTitle</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the title of the window. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">title</td><td>New title</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#a63af61e026fba08e3153fd013620bcc0" title="Change the window&#39;s icon.">setIcon</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a59041c4556e0351048f8aff366034f61"></a><!-- doxytag: member="sf::Window::setVerticalSyncEnabled" ref="a59041c4556e0351048f8aff366034f61" args="(bool enabled)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a59041c4556e0351048f8aff366034f61">sf::Window::setVerticalSyncEnabled</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>enabled</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable vertical synchronization. </p>
<p>Activating vertical synchronization will limit the number of frames displayed to the refresh rate of the monitor. This can avoid some visual artifacts, and limit the framerate to a good value (but not constant across different computers).</p>
<p>Vertical synchronization is disabled by default.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">enabled</td><td>True to enable v-sync, false to deactivate it </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a160f7f11a207603d7e99ce606e749703"></a><!-- doxytag: member="sf::Window::setVisible" ref="a160f7f11a207603d7e99ce606e749703" args="(bool visible)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Window.htm#a160f7f11a207603d7e99ce606e749703">sf::Window::setVisible</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>visible</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Show or hide the window. </p>
<p>The window is shown by default.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">visible</td><td>True to show the window, false to hide it </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aaf02ab64fbc1d374eef3696df54137bc"></a><!-- doxytag: member="sf::Window::waitEvent" ref="aaf02ab64fbc1d374eef3696df54137bc" args="(Event &amp;event)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Window.htm#aaf02ab64fbc1d374eef3696df54137bc">sf::Window::waitEvent</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Event.htm">Event</a> &amp;&#160;</td>
          <td class="paramname"><em>event</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Wait for an event and return it. </p>
<p>This function is blocking: if there's no pending event then it will wait until an event is received. After this function returns (and no error occured), the <em>event</em> object is always valid and filled properly. This function is typically used when you have a thread that is dedicated to events handling: you want to make this thread sleep as long as no new event is received. </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">sf::Event</a> event;
 <span class="keywordflow">if</span> (window.<a class="code" href="classsf_1_1Window.htm#aaf02ab64fbc1d374eef3696df54137bc" title="Wait for an event and return it.">waitEvent</a>(event))
 {
    <span class="comment">// process event...</span>
 }
</pre></div><dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">event</td><td><a class="el" href="classsf_1_1Event.htm" title="Defines a system event and its parameters.">Event</a> to be returned</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>False if any error occured</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7" title="Pop the event on top of events stack, if any, and return it.">pollEvent</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Window_2Window_8hpp_source.htm">Window/Window.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
