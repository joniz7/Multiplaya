<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Shader.htm">Shader</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">sf::Shader Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsf_1_1Shader.htm">sf::Shader</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#ab170f43610b4fcc7c69a55575650fb95">bind</a>() const </td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr bgcolor="#f0f0f0"><td><b>CurrentTexture</b> (defined in <a class="el" href="classsf_1_1Shader.htm">sf::Shader</a>)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1GlResource.htm#ae0efa7935241644608ca32ba47b22a33">ensureGlContext</a>()</td><td><a class="el" href="classsf_1_1GlResource.htm">sf::GlResource</a></td><td><code> [private, static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3ace6e88eec3a56b2e55ee3c8e64e9b89a">Fragment</a> enum value</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1GlResource.htm#ad8fb7a0674f0f77e530dacc2a3b0dc6a">GlResource</a>()</td><td><a class="el" href="classsf_1_1GlResource.htm">sf::GlResource</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#ad22474690bafe4a305c1b9826b1bd86a">isAvailable</a>()</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a053a5632848ebaca2fcd8ba29abe9e6e">loadFromFile</a>(const std::string &amp;filename, Type type)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#ac9d7289966fcef562eeb92271c03e3dc">loadFromFile</a>(const std::string &amp;vertexShaderFilename, const std::string &amp;fragmentShaderFilename)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#ac92d46bf71dff2d791117e4e472148aa">loadFromMemory</a>(const std::string &amp;shader, Type type)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#ae34e94070d7547a890166b7993658a9b">loadFromMemory</a>(const std::string &amp;vertexShader, const std::string &amp;fragmentShader)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a2ee1b130c0606e4f8bcdf65c1efc2a53">loadFromStream</a>(InputStream &amp;stream, Type type)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a3b7958159ffb5596c4babc3052e35465">loadFromStream</a>(InputStream &amp;vertexShaderStream, InputStream &amp;fragmentShaderStream)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1NonCopyable.htm#a2110add170580fdb946f887719da6860">NonCopyable</a>()</td><td><a class="el" href="classsf_1_1NonCopyable.htm">sf::NonCopyable</a></td><td><code> [inline, private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a47e4dd78f0752ae08664b4ee616db1cf">setParameter</a>(const std::string &amp;name, float x)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#ab8d379f40810b8e3eadebee81aedd231">setParameter</a>(const std::string &amp;name, float x, float y)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a7e36e044d6b8adca8339f40c5a4b1801">setParameter</a>(const std::string &amp;name, float x, float y, float z)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#aeb468f1bc2d26750b96b74f1e19027fb">setParameter</a>(const std::string &amp;name, float x, float y, float z, float w)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a3ac473ece2c6fa26dc5032c07fd7288e">setParameter</a>(const std::string &amp;name, const Vector2f &amp;vector)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a87d4a0c6dc70ae68aecc0dda3f343c07">setParameter</a>(const std::string &amp;name, const Vector3f &amp;vector)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#aa8618119ed4399df3fd33e78ee96b4fc">setParameter</a>(const std::string &amp;name, const Color &amp;color)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a39c387cc30e249b22a0c478703b8cc9a">setParameter</a>(const std::string &amp;name, const sf::Transform &amp;transform)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a7f58ab5c0a1084f238dfcec86602daa1">setParameter</a>(const std::string &amp;name, const Texture &amp;texture)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#af06b4cba0bab915fa01032b063909044">setParameter</a>(const std::string &amp;name, CurrentTextureType)</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a1d7f28f26b4122959fcafec871c2c3c5">Shader</a>()</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3">Type</a> enum name</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a86f6ce37c2ad74250c9ee9fdd18452a5">unbind</a>() const </td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#afaa1aa65e5de37b74d047da9def9f9b3a8718008f827eb32e29bbdd1791c62dce">Vertex</a> enum value</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1GlResource.htm#ab99035b67052331d1e8cf67abd93de98">~GlResource</a>()</td><td><a class="el" href="classsf_1_1GlResource.htm">sf::GlResource</a></td><td><code> [private]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Shader.htm#a4bac6cc8b046ecd8fb967c145a2380e6">~Shader</a>()</td><td><a class="el" href="classsf_1_1Shader.htm">sf::Shader</a></td><td></td></tr>
</table></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
