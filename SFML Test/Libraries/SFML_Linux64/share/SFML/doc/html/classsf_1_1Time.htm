<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Time.htm">Time</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Time Class Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Time" -->
<p>Represents a time value.  
 <a href="classsf_1_1Time.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Time_8hpp_source.htm">Time.hpp</a>&gt;</code></p>

<p><a href="classsf_1_1Time-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#acba0cfbc49e3a09a22a8e079eb67a05c">Time</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#acba0cfbc49e3a09a22a8e079eb67a05c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a7538140d095e48da9d7eee015dd455a9">asSeconds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the time value as a number of seconds.  <a href="#a7538140d095e48da9d7eee015dd455a9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Int32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a85e6deb41fa71896508ce0f64059a6ae">asMilliseconds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the time value as a number of milliseconds.  <a href="#a85e6deb41fa71896508ce0f64059a6ae"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Int64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ae41a7e0ca73ceea771b3c150c12abdd2">asMicroseconds</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the time value as a number of microseconds.  <a href="#ae41a7e0ca73ceea771b3c150c12abdd2"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0">Zero</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Predefined "zero" time value.  <a href="#a8db127b632fa8da21550e7282af11fa0"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abe757d058fd820b4c84232c1451c1efa"></a><!-- doxytag: member="sf::Time::seconds" ref="abe757d058fd820b4c84232c1451c1efa" args="(float)" -->
SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><b>seconds</b> (float)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8dc1cb5f5fdde2ed2221d5af80cce853"></a><!-- doxytag: member="sf::Time::milliseconds" ref="a8dc1cb5f5fdde2ed2221d5af80cce853" args="(Int32)" -->
SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><b>milliseconds</b> (Int32)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab4f5b719ece75ebd11593f935fbe3bcb"></a><!-- doxytag: member="sf::Time::microseconds" ref="ab4f5b719ece75ebd11593f935fbe3bcb" args="(Int64)" -->
SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><b>microseconds</b> (Int64)</td></tr>
<tr><td colspan="2"><h2><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ae36b9ef700f0ed0516abf0194ceb546b">seconds</a> (float amount)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a time value from a number of seconds.  <a href="#ae36b9ef700f0ed0516abf0194ceb546b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ae379d420bc07170668f51522023957b9">milliseconds</a> (Int32 amount)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a time value from a number of milliseconds.  <a href="#ae379d420bc07170668f51522023957b9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a951fd7219641f1e8191887f5dfe0dc31">microseconds</a> (Int64 amount)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a time value from a number of microseconds.  <a href="#a951fd7219641f1e8191887f5dfe0dc31"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a2b8453227f651e9d5db3663fa08c47e2">operator==</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of == operator to compare two time values.  <a href="#a2b8453227f651e9d5db3663fa08c47e2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ae06b561f6422ec8ca414d400efd2cf4b">operator!=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of != operator to compare two time values.  <a href="#ae06b561f6422ec8ca414d400efd2cf4b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ac222933174ddcff5d14c3ac7d1020d54">operator&lt;</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &lt; operator to compare two time values.  <a href="#ac222933174ddcff5d14c3ac7d1020d54"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a23978402846bf3c7ac54a3f2c6b397a2">operator&gt;</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &gt; operator to compare two time values.  <a href="#a23978402846bf3c7ac54a3f2c6b397a2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a2c22369869bf903578635bc6517c44d4">operator&lt;=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &lt;= operator to compare two time values.  <a href="#a2c22369869bf903578635bc6517c44d4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ad69edc80cd01b7a03f5673b4276181eb">operator&gt;=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &gt;= operator to compare two time values.  <a href="#ad69edc80cd01b7a03f5673b4276181eb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a1b23b91cf367764338c2ff922c65da4e">operator-</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of unary - operator to negate a time value.  <a href="#a1b23b91cf367764338c2ff922c65da4e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a7155e965f238f8c32d63649b0189ef47">operator+</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary + operator to add two time values.  <a href="#a7155e965f238f8c32d63649b0189ef47"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a831c8df4b7b9b47eaa0c5a52a1be654c">operator+=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> &amp;left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary += operator to add/assign two time values.  <a href="#a831c8df4b7b9b47eaa0c5a52a1be654c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ace92ab9bc7aec80239af7218cd89cc80">operator-</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary - operator to subtract two time values.  <a href="#ace92ab9bc7aec80239af7218cd89cc80"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#aaf7888302cf4847f97cfc26875367b94">operator-=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> &amp;left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary -= operator to subtract/assign two time values.  <a href="#aaf7888302cf4847f97cfc26875367b94"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ac1386c6360872d354b9b59eadcd9778d">operator*</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, float right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary * operator to scale a time value.  <a href="#ac1386c6360872d354b9b59eadcd9778d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#acd021b3ebb108053d7dec56869e27385">operator*</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, Int64 right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary * operator to scale a time value.  <a href="#acd021b3ebb108053d7dec56869e27385"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a63723c9e9c5ff6151377ec4350c6f36e">operator*</a> (float left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary * operator to scale a time value.  <a href="#a63723c9e9c5ff6151377ec4350c6f36e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a40a6d0938fb4a43731d54fd90bfc6476">operator*</a> (Int64 left, <a class="el" href="classsf_1_1Time.htm">Time</a> right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary * operator to scale a time value.  <a href="#a40a6d0938fb4a43731d54fd90bfc6476"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a8996b6a6fcb8f3854b486b8e43949b50">operator*=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> &amp;left, float right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary *= operator to scale/assign a time value.  <a href="#a8996b6a6fcb8f3854b486b8e43949b50"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a6656a0a1a1802009a72d93fbba61f24a">operator*=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> &amp;left, Int64 right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary *= operator to scale/assign a time value.  <a href="#a6656a0a1a1802009a72d93fbba61f24a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a3386c392dbc62e51dfa59730854d1ed2">operator/</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, float right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary / operator to scale a time value.  <a href="#a3386c392dbc62e51dfa59730854d1ed2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ab72f2de3e2bb592b4b4008dc1ac79056">operator/</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> left, Int64 right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary / operator to scale a time value.  <a href="#ab72f2de3e2bb592b4b4008dc1ac79056"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#a9835490c54cab06492ec3aa9e9275ef9">operator/=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> &amp;left, float right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary /= operator to scale/assign a time value.  <a href="#a9835490c54cab06492ec3aa9e9275ef9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm#ad51871e3db77def834ae8688e64504ff">operator/=</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> &amp;left, Int64 right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary /= operator to scale/assign a time value.  <a href="#ad51871e3db77def834ae8688e64504ff"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Represents a time value. </p>
<p><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">sf::Time</a> encapsulates a time value in a flexible way.</p>
<p>It allows to define a time value either as a number of seconds, milliseconds or microseconds. It also works the other way round: you can read a time value as either a number of seconds, milliseconds or microseconds.</p>
<p>By using such a flexible interface, the API doesn't impose any fixed type or resolution for time values, and let the user choose its own favorite representation.</p>
<p><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> values support the usual mathematical operations: you can add or subtract two times, multiply or divide a time by a number, compare two times, etc.</p>
<p>Since they represent a time span and not an absolute time value, times can also be negative.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">sf::Time</a> t1 = sf::seconds(0.1f);
 Int32 milli = t1.<a class="code" href="classsf_1_1Time.htm#a85e6deb41fa71896508ce0f64059a6ae" title="Return the time value as a number of milliseconds.">asMilliseconds</a>(); <span class="comment">// 100</span>

 <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">sf::Time</a> t2 = sf::milliseconds(30);
 Int64 micro = t2.<a class="code" href="classsf_1_1Time.htm#ae41a7e0ca73ceea771b3c150c12abdd2" title="Return the time value as a number of microseconds.">asMicroseconds</a>(); <span class="comment">// 30000</span>

 <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">sf::Time</a> t3 = sf::microseconds(-800000);
 <span class="keywordtype">float</span> sec = t3.<a class="code" href="classsf_1_1Time.htm#a7538140d095e48da9d7eee015dd455a9" title="Return the time value as a number of seconds.">asSeconds</a>(); <span class="comment">// -0.8</span>
</pre></div><div class="fragment"><pre class="fragment"> <span class="keywordtype">void</span> update(<a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">sf::Time</a> elapsed)
 {
    position += speed * elapsed.<a class="code" href="classsf_1_1Time.htm#a7538140d095e48da9d7eee015dd455a9" title="Return the time value as a number of seconds.">asSeconds</a>();
 }

 update(sf::milliseconds(100));
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Clock.htm" title="Utility class that measures the elapsed time.">sf::Clock</a> </dd></dl>

<p>Definition at line <a class="el" href="Time_8hpp_source.htm#l00040">40</a> of file <a class="el" href="Time_8hpp_source.htm">Time.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="acba0cfbc49e3a09a22a8e079eb67a05c"></a><!-- doxytag: member="sf::Time::Time" ref="acba0cfbc49e3a09a22a8e079eb67a05c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Time.htm#acba0cfbc49e3a09a22a8e079eb67a05c">sf::Time::Time</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>Sets the time value to zero. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ae41a7e0ca73ceea771b3c150c12abdd2"></a><!-- doxytag: member="sf::Time::asMicroseconds" ref="ae41a7e0ca73ceea771b3c150c12abdd2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Int64 <a class="el" href="classsf_1_1Time.htm#ae41a7e0ca73ceea771b3c150c12abdd2">sf::Time::asMicroseconds</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the time value as a number of microseconds. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> in microseconds</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Time.htm#a7538140d095e48da9d7eee015dd455a9" title="Return the time value as a number of seconds.">asSeconds</a>, <a class="el" href="classsf_1_1Time.htm#a85e6deb41fa71896508ce0f64059a6ae" title="Return the time value as a number of milliseconds.">asMilliseconds</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a85e6deb41fa71896508ce0f64059a6ae"></a><!-- doxytag: member="sf::Time::asMilliseconds" ref="a85e6deb41fa71896508ce0f64059a6ae" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Int32 <a class="el" href="classsf_1_1Time.htm#a85e6deb41fa71896508ce0f64059a6ae">sf::Time::asMilliseconds</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the time value as a number of milliseconds. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> in milliseconds</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Time.htm#a7538140d095e48da9d7eee015dd455a9" title="Return the time value as a number of seconds.">asSeconds</a>, <a class="el" href="classsf_1_1Time.htm#ae41a7e0ca73ceea771b3c150c12abdd2" title="Return the time value as a number of microseconds.">asMicroseconds</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7538140d095e48da9d7eee015dd455a9"></a><!-- doxytag: member="sf::Time::asSeconds" ref="a7538140d095e48da9d7eee015dd455a9" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classsf_1_1Time.htm#a7538140d095e48da9d7eee015dd455a9">sf::Time::asSeconds</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the time value as a number of seconds. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> in seconds</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Time.htm#a85e6deb41fa71896508ce0f64059a6ae" title="Return the time value as a number of milliseconds.">asMilliseconds</a>, <a class="el" href="classsf_1_1Time.htm#ae41a7e0ca73ceea771b3c150c12abdd2" title="Return the time value as a number of microseconds.">asMicroseconds</a> </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a951fd7219641f1e8191887f5dfe0dc31"></a><!-- doxytag: member="sf::Time::microseconds" ref="a951fd7219641f1e8191887f5dfe0dc31" args="(Int64 amount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> microseconds </td>
          <td>(</td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>amount</em></td><td>)</td>
          <td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a time value from a number of microseconds. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">amount</td><td>Number of microseconds</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> value constructed from the amount of microseconds</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Time.htm#ae36b9ef700f0ed0516abf0194ceb546b" title="Construct a time value from a number of seconds.">seconds</a>, <a class="el" href="classsf_1_1Time.htm#ae379d420bc07170668f51522023957b9" title="Construct a time value from a number of milliseconds.">milliseconds</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae379d420bc07170668f51522023957b9"></a><!-- doxytag: member="sf::Time::milliseconds" ref="ae379d420bc07170668f51522023957b9" args="(Int32 amount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> milliseconds </td>
          <td>(</td>
          <td class="paramtype">Int32&#160;</td>
          <td class="paramname"><em>amount</em></td><td>)</td>
          <td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a time value from a number of milliseconds. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">amount</td><td>Number of milliseconds</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> value constructed from the amount of milliseconds</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Time.htm#ae36b9ef700f0ed0516abf0194ceb546b" title="Construct a time value from a number of seconds.">seconds</a>, <a class="el" href="classsf_1_1Time.htm#a951fd7219641f1e8191887f5dfe0dc31" title="Construct a time value from a number of microseconds.">microseconds</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae06b561f6422ec8ca414d400efd2cf4b"></a><!-- doxytag: member="sf::Time::operator!=" ref="ae06b561f6422ec8ca414d400efd2cf4b" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator!= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of != operator to compare two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if both time values are different </dd></dl>

</div>
</div>
<a class="anchor" id="ac1386c6360872d354b9b59eadcd9778d"></a><!-- doxytag: member="sf::Time::operator*" ref="ac1386c6360872d354b9b59eadcd9778d" args="(Time left, float right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary * operator to scale a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> multiplied by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="acd021b3ebb108053d7dec56869e27385"></a><!-- doxytag: member="sf::Time::operator*" ref="acd021b3ebb108053d7dec56869e27385" args="(Time left, Int64 right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator* </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary * operator to scale a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> multiplied by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a63723c9e9c5ff6151377ec4350c6f36e"></a><!-- doxytag: member="sf::Time::operator*" ref="a63723c9e9c5ff6151377ec4350c6f36e" args="(float left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator* </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary * operator to scale a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a number) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> multiplied by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a40a6d0938fb4a43731d54fd90bfc6476"></a><!-- doxytag: member="sf::Time::operator*" ref="a40a6d0938fb4a43731d54fd90bfc6476" args="(Int64 left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator* </td>
          <td>(</td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary * operator to scale a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a number) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> multiplied by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a8996b6a6fcb8f3854b486b8e43949b50"></a><!-- doxytag: member="sf::Time::operator*=" ref="a8996b6a6fcb8f3854b486b8e43949b50" args="(Time &amp;left, float right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary *= operator to scale/assign a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> multiplied by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a6656a0a1a1802009a72d93fbba61f24a"></a><!-- doxytag: member="sf::Time::operator*=" ref="a6656a0a1a1802009a72d93fbba61f24a" args="(Time &amp;left, Int64 right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary *= operator to scale/assign a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> multiplied by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a7155e965f238f8c32d63649b0189ef47"></a><!-- doxytag: member="sf::Time::operator+" ref="a7155e965f238f8c32d63649b0189ef47" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator+ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary + operator to add two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Sum of the two times values </dd></dl>

</div>
</div>
<a class="anchor" id="a831c8df4b7b9b47eaa0c5a52a1be654c"></a><!-- doxytag: member="sf::Time::operator+=" ref="a831c8df4b7b9b47eaa0c5a52a1be654c" args="(Time &amp;left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp; operator+= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary += operator to add/assign two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Sum of the two times values </dd></dl>

</div>
</div>
<a class="anchor" id="a1b23b91cf367764338c2ff922c65da4e"></a><!-- doxytag: member="sf::Time::operator&#45;" ref="a1b23b91cf367764338c2ff922c65da4e" args="(Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of unary - operator to negate a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Opposite of the time value </dd></dl>

</div>
</div>
<a class="anchor" id="ace92ab9bc7aec80239af7218cd89cc80"></a><!-- doxytag: member="sf::Time::operator&#45;" ref="ace92ab9bc7aec80239af7218cd89cc80" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator- </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary - operator to subtract two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Difference of the two times values </dd></dl>

</div>
</div>
<a class="anchor" id="aaf7888302cf4847f97cfc26875367b94"></a><!-- doxytag: member="sf::Time::operator&#45;=" ref="aaf7888302cf4847f97cfc26875367b94" args="(Time &amp;left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp; operator-= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary -= operator to subtract/assign two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Difference of the two times values </dd></dl>

</div>
</div>
<a class="anchor" id="a3386c392dbc62e51dfa59730854d1ed2"></a><!-- doxytag: member="sf::Time::operator/" ref="a3386c392dbc62e51dfa59730854d1ed2" args="(Time left, float right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator/ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary / operator to scale a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> divided by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ab72f2de3e2bb592b4b4008dc1ac79056"></a><!-- doxytag: member="sf::Time::operator/" ref="ab72f2de3e2bb592b4b4008dc1ac79056" args="(Time left, Int64 right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> operator/ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary / operator to scale a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> divided by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a9835490c54cab06492ec3aa9e9275ef9"></a><!-- doxytag: member="sf::Time::operator/=" ref="a9835490c54cab06492ec3aa9e9275ef9" args="(Time &amp;left, float right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary /= operator to scale/assign a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> divided by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ad51871e3db77def834ae8688e64504ff"></a><!-- doxytag: member="sf::Time::operator/=" ref="ad51871e3db77def834ae8688e64504ff" args="(Time &amp;left, Int64 right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> &amp; operator/= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Int64&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary /= operator to scale/assign a time value. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a number)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><em>left</em> divided by <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ac222933174ddcff5d14c3ac7d1020d54"></a><!-- doxytag: member="sf::Time::operator&lt;" ref="ac222933174ddcff5d14c3ac7d1020d54" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &lt; operator to compare two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is lesser than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a2c22369869bf903578635bc6517c44d4"></a><!-- doxytag: member="sf::Time::operator&lt;=" ref="a2c22369869bf903578635bc6517c44d4" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&lt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &lt;= operator to compare two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is lesser or equal than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a2b8453227f651e9d5db3663fa08c47e2"></a><!-- doxytag: member="sf::Time::operator==" ref="a2b8453227f651e9d5db3663fa08c47e2" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator== </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of == operator to compare two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if both time values are equal </dd></dl>

</div>
</div>
<a class="anchor" id="a23978402846bf3c7ac54a3f2c6b397a2"></a><!-- doxytag: member="sf::Time::operator&gt;" ref="a23978402846bf3c7ac54a3f2c6b397a2" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &gt; operator to compare two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is greater than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ad69edc80cd01b7a03f5673b4276181eb"></a><!-- doxytag: member="sf::Time::operator&gt;=" ref="ad69edc80cd01b7a03f5673b4276181eb" args="(Time left, Time right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&gt;= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &gt;= operator to compare two time values. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a time) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a time)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is greater or equal than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="ae36b9ef700f0ed0516abf0194ceb546b"></a><!-- doxytag: member="sf::Time::seconds" ref="ae36b9ef700f0ed0516abf0194ceb546b" args="(float amount)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1Time.htm">Time</a> seconds </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>amount</em></td><td>)</td>
          <td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct a time value from a number of seconds. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">amount</td><td>Number of seconds</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> value constructed from the amount of seconds</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Time.htm#ae379d420bc07170668f51522023957b9" title="Construct a time value from a number of milliseconds.">milliseconds</a>, <a class="el" href="classsf_1_1Time.htm#a951fd7219641f1e8191887f5dfe0dc31" title="Construct a time value from a number of microseconds.">microseconds</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a8db127b632fa8da21550e7282af11fa0"></a><!-- doxytag: member="sf::Time::Zero" ref="a8db127b632fa8da21550e7282af11fa0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Time.htm">Time</a> <a class="el" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0">sf::Time::Zero</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Predefined "zero" time value. </p>

<p>Definition at line <a class="el" href="Time_8hpp_source.htm#l00085">85</a> of file <a class="el" href="Time_8hpp_source.htm">Time.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Time_8hpp_source.htm">Time.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
