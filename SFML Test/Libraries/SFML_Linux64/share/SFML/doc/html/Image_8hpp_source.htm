<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Image.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_IMAGE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_IMAGE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Color.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Rect.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 <span class="keyword">class </span>InputStream;
<a name="l00041"></a>00041 
<a name="l00046"></a><a class="code" href="classsf_1_1Image.htm">00046</a> <span class="keyword">class </span>SFML_GRAPHICS_API <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a>
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048 <span class="keyword">public</span> :
<a name="l00049"></a>00049 
<a name="l00056"></a>00056     <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a>();
<a name="l00057"></a>00057 
<a name="l00066"></a>00066     <span class="keywordtype">void</span> create(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; color = <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>(0, 0, 0));
<a name="l00067"></a>00067 
<a name="l00081"></a>00081     <span class="keywordtype">void</span> create(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> height, <span class="keyword">const</span> Uint8* pixels);
<a name="l00082"></a>00082 
<a name="l00098"></a>00098     <span class="keywordtype">bool</span> loadFromFile(<span class="keyword">const</span> std::string&amp; filename);
<a name="l00099"></a>00099 
<a name="l00116"></a>00116     <span class="keywordtype">bool</span> loadFromMemory(<span class="keyword">const</span> <span class="keywordtype">void</span>* data, std::size_t size);
<a name="l00117"></a>00117 
<a name="l00133"></a>00133     <span class="keywordtype">bool</span> loadFromStream(<a class="code" href="classsf_1_1InputStream.htm" title="Abstract class for custom file input streams.">InputStream</a>&amp; stream);
<a name="l00134"></a>00134 
<a name="l00150"></a>00150     <span class="keywordtype">bool</span> saveToFile(<span class="keyword">const</span> std::string&amp; filename) <span class="keyword">const</span>;
<a name="l00151"></a>00151 
<a name="l00158"></a>00158     <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a> getSize() <span class="keyword">const</span>;
<a name="l00159"></a>00159 
<a name="l00171"></a>00171     <span class="keywordtype">void</span> createMaskFromColor(<span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; color, Uint8 alpha = 0);
<a name="l00172"></a>00172 
<a name="l00193"></a>00193     <span class="keywordtype">void</span> copy(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">Image</a>&amp; source, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> destX, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> destY, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; sourceRect = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>(0, 0, 0, 0), <span class="keywordtype">bool</span> applyAlpha = <span class="keyword">false</span>);
<a name="l00194"></a>00194 
<a name="l00209"></a>00209     <span class="keywordtype">void</span> setPixel(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a>&amp; color);
<a name="l00210"></a>00210 
<a name="l00226"></a>00226     <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a> getPixel(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y) <span class="keyword">const</span>;
<a name="l00227"></a>00227 
<a name="l00241"></a>00241     <span class="keyword">const</span> Uint8* getPixelsPtr() <span class="keyword">const</span>;
<a name="l00242"></a>00242 
<a name="l00247"></a>00247     <span class="keywordtype">void</span> flipHorizontally();
<a name="l00248"></a>00248 
<a name="l00253"></a>00253     <span class="keywordtype">void</span> flipVertically();
<a name="l00254"></a>00254 
<a name="l00255"></a>00255 <span class="keyword">private</span> :
<a name="l00256"></a>00256 
<a name="l00258"></a>00258     <span class="comment">// Member data</span>
<a name="l00260"></a>00260 <span class="comment"></span>    <a class="code" href="classsf_1_1Vector2.htm">Vector2u</a>           m_size;   
<a name="l00261"></a>00261     std::vector&lt;Uint8&gt; m_pixels; 
<a name="l00262"></a>00262 };
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 } <span class="comment">// namespace sf</span>
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 
<a name="l00267"></a>00267 <span class="preprocessor">#endif // SFML_IMAGE_HPP</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span>
<a name="l00269"></a>00269 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
