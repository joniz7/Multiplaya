<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1String.htm">String</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="#related">Related Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::String Class Reference<div class="ingroups"><a class="el" href="group__system.htm">System module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::String" -->
<p>Utility string class that automatically handles conversions between types and encodings.  
 <a href="classsf_1_1String.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="String_8hpp_source.htm">String.hpp</a>&gt;</code></p>

<p><a href="classsf_1_1String-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::basic_string<br class="typebreak"/>
&lt; Uint32 &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">Iterator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator type.  <a href="#ac90f2b7b28f703020f8d027e98806235"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::basic_string<br class="typebreak"/>
&lt; Uint32 &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">ConstIterator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constant iterator type.  <a href="#a8e18efc2e8464f6eb82818902d527efa"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">String</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a9563a4e93f692e0c8e8702b374ef8692"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ac9df7f7696cff164794e338f3c89ccc5">String</a> (char ansiChar, const std::locale &amp;locale=std::locale())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a single ANSI character and a locale.  <a href="#ac9df7f7696cff164794e338f3c89ccc5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#aefaa202d2aa5ff85b4f75a5983367e86">String</a> (wchar_t wideChar)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from single wide character.  <a href="#aefaa202d2aa5ff85b4f75a5983367e86"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a8e1a5027416d121187908e2ed77079ff">String</a> (Uint32 utf32Char)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from single UTF-32 character.  <a href="#a8e1a5027416d121187908e2ed77079ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a57d2b8c289f9894f859564cad034bfc7">String</a> (const char *ansiString, const std::locale &amp;locale=std::locale())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a null-terminated C-style ANSI string and a locale.  <a href="#a57d2b8c289f9894f859564cad034bfc7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a0aa41dcbd17b0c36c74d03d3b0147f1e">String</a> (const std::string &amp;ansiString, const std::locale &amp;locale=std::locale())</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from an ANSI string and a locale.  <a href="#a0aa41dcbd17b0c36c74d03d3b0147f1e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a5742d0a9b0c754f711820c2b5c40fa55">String</a> (const wchar_t *wideString)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from null-terminated C-style wide string.  <a href="#a5742d0a9b0c754f711820c2b5c40fa55"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a5e38151340af4f9a5f74ad24c0664074">String</a> (const std::wstring &amp;wideString)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a wide string.  <a href="#a5e38151340af4f9a5f74ad24c0664074"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#aea3629adf19f9fe713d4946f6c75b214">String</a> (const Uint32 *utf32String)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from a null-terminated C-style UTF-32 string.  <a href="#aea3629adf19f9fe713d4946f6c75b214"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a6eee86dbe75d16bbcc26e97416c2e1ca">String</a> (const std::basic_string&lt; Uint32 &gt; &amp;utf32String)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct from an UTF-32 string.  <a href="#a6eee86dbe75d16bbcc26e97416c2e1ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#af862594d3c4070d8ddbf08cf8dce4f59">String</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;copy)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#af862594d3c4070d8ddbf08cf8dce4f59"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a3664f92c3b488bf9f60f6b8eafe1844d">operator std::string</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Implicit cast operator to std::string (ANSI string)  <a href="#a3664f92c3b488bf9f60f6b8eafe1844d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a20d50d45020d1dbe1779dda69ee83732">operator std::wstring</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Implicit cast operator to std::wstring (wide string)  <a href="#a20d50d45020d1dbe1779dda69ee83732"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4">toAnsiString</a> (const std::locale &amp;locale=std::locale()) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to an ANSI string.  <a href="#a71d111ccfaf295b8b8be8ca4a3ceb5f4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::wstring&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#afd8b085ad7255543e4dc1285389d2d82">toWideString</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert the unicode string to a wide string.  <a href="#afd8b085ad7255543e4dc1285389d2d82"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a096255c066e5ef8c31952216b8ce9c42">operator=</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of assignment operator.  <a href="#a096255c066e5ef8c31952216b8ce9c42"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ae6563ce2c243ae2160eea8a354199f4e">operator+=</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of += operator to append an UTF-32 string.  <a href="#ae6563ce2c243ae2160eea8a354199f4e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Uint32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a649b89a65866bf03652f7b5cb6de3bb6">operator[]</a> (std::size_t index) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of [] operator to access a character by its position.  <a href="#a649b89a65866bf03652f7b5cb6de3bb6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">Uint32 &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#abc989da7f4fb873ab29188d40772ab24">operator[]</a> (std::size_t index)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of [] operator to access a character by its position.  <a href="#abc989da7f4fb873ab29188d40772ab24"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a391c1b4950cbf3d3f8040cea73af2969">clear</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Clear the string.  <a href="#a391c1b4950cbf3d3f8040cea73af2969"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a635d75c4cd830d5f639a41815dd0ce23">getSize</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the size of the string.  <a href="#a635d75c4cd830d5f639a41815dd0ce23"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a6c43f0cbe84cf17fa6ba93d58b75fcdc">isEmpty</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check whether the string is empty or not.  <a href="#a6c43f0cbe84cf17fa6ba93d58b75fcdc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#aaa78a0a46b3fbe200a4ccdedc326eb93">erase</a> (std::size_t position, std::size_t count=1)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase one or more characters from the string.  <a href="#aaa78a0a46b3fbe200a4ccdedc326eb93"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ad0b1455deabf07af13ee79812e05fa02">insert</a> (std::size_t position, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;str)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Insert one or more characters into the string.  <a href="#ad0b1455deabf07af13ee79812e05fa02"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ae1fc8d6ced3b6082853f8013ea051b5c">find</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;str, std::size_t start=0) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Find a sequence of one or more characters in the string.  <a href="#ae1fc8d6ced3b6082853f8013ea051b5c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const Uint32 *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#af2d4e70869ebd38e225c6796e1325ae4">getData</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a pointer to the C-style array of characters.  <a href="#af2d4e70869ebd38e225c6796e1325ae4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a8ec30ddc08e3a6bd11c99aed782f6dfe">begin</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#a8ec30ddc08e3a6bd11c99aed782f6dfe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a09bbf7704847ed35bf1c18aca6fba2a2">begin</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#a09bbf7704847ed35bf1c18aca6fba2a2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ac823012f39cb6f61100418876e99d53b">end</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#ac823012f39cb6f61100418876e99d53b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ab6fb6ee1b21bd5dbdc9d6840f035eb79">end</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return an iterator to the beginning of the string.  <a href="#ab6fb6ee1b21bd5dbdc9d6840f035eb79"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static const std::size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#abaadecaf12a6b41c54d725c75fd28527">InvalidPos</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents an invalid position in the string.  <a href="#abaadecaf12a6b41c54d725c75fd28527"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2a385459fa9a237e61a712fa956d489e"></a><!-- doxytag: member="sf::String::operator==" ref="a2a385459fa9a237e61a712fa956d489e" args="(const String &amp;left, const String &amp;right)" -->
SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac2ca5a7703402a2bbafd85eec6d1e846"></a><!-- doxytag: member="sf::String::operator&lt;" ref="ac2ca5a7703402a2bbafd85eec6d1e846" args="(const String &amp;left, const String &amp;right)" -->
SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td colspan="2"><h2><a name="related"></a>
Related Functions</h2></td></tr>
<tr><td class="ititle" colspan="2"><p>(Note that these are not member functions.) </p>
</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a2a385459fa9a237e61a712fa956d489e">operator==</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of == operator to compare two UTF-32 strings.  <a href="#a2a385459fa9a237e61a712fa956d489e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a2b592c36be218b4811795fdc84eecc69">operator!=</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of != operator to compare two UTF-32 strings.  <a href="#a2b592c36be218b4811795fdc84eecc69"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#ac2ca5a7703402a2bbafd85eec6d1e846">operator&lt;</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &lt; operator to compare two UTF-32 strings.  <a href="#ac2ca5a7703402a2bbafd85eec6d1e846"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a5efc1eca58cf5c17d01eb8501d303538">operator&gt;</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &gt; operator to compare two UTF-32 strings.  <a href="#a5efc1eca58cf5c17d01eb8501d303538"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#abd342b6094b81cd086c7929b53b112ae">operator&lt;=</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &lt;= operator to compare two UTF-32 strings.  <a href="#abd342b6094b81cd086c7929b53b112ae"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a8d2979d7829d6616330a768956f251e1">operator&gt;=</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of &gt;= operator to compare two UTF-32 strings.  <a href="#a8d2979d7829d6616330a768956f251e1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API <a class="el" href="classsf_1_1String.htm">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm#a55ef2bf7dc6b295ef7127b0bc1e58760">operator+</a> (const <a class="el" href="classsf_1_1String.htm">String</a> &amp;left, const <a class="el" href="classsf_1_1String.htm">String</a> &amp;right)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload of binary + operator to concatenate two strings.  <a href="#a55ef2bf7dc6b295ef7127b0bc1e58760"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Utility string class that automatically handles conversions between types and encodings. </p>
<p><a class="el" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">sf::String</a> is a utility string class defined mainly for convenience.</p>
<p>It is a Unicode string (implemented using UTF-32), thus it can store any character in the world (european, chinese, arabic, hebrew, etc.).</p>
<p>It automatically handles conversions from/to ANSI and wide strings, so that you can work with standard string classes and still be compatible with functions taking a <a class="el" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">sf::String</a>.</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">sf::String</a> s;

 std::string s1 = s;  <span class="comment">// automatically converted to ANSI string</span>
 std::wstring s2 = s; <span class="comment">// automatically converted to wide string</span>
 s = <span class="stringliteral">&quot;hello&quot;</span>;         <span class="comment">// automatically converted from ANSI string</span>
 s = L<span class="stringliteral">&quot;hello&quot;</span>;        <span class="comment">// automatically converted from wide string</span>
 s += <span class="charliteral">&#39;a&#39;</span>;            <span class="comment">// automatically converted from ANSI string</span>
 s += L<span class="charliteral">&#39;a&#39;</span>;           <span class="comment">// automatically converted from wide string</span>
</pre></div><p>Conversions involving ANSI strings use the default user locale. However it is possible to use a custom locale if necessary: </p>
<div class="fragment"><pre class="fragment"> std::locale locale;
 <a class="code" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">sf::String</a> s;
 ...
 std::string s1 = s.<a class="code" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4" title="Convert the unicode string to an ANSI string.">toAnsiString</a>(locale);
 s = <a class="code" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692" title="Default constructor.">sf::String</a>(<span class="stringliteral">&quot;hello&quot;</span>, locale);
</pre></div><p><a class="el" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">sf::String</a> defines the most important functions of the standard std::string class: removing, random access, iterating, appending, comparing, etc. However it is a simple class provided for convenience, and you may have to consider using a more optimized class if your program requires complex string handling. The automatic conversion functions will then take care of converting your string to <a class="el" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">sf::String</a> whenever SFML requires it.</p>
<p>Please note that SFML also defines a low-level, generic interface for Unicode handling, see the <a class="el" href="classsf_1_1Utf.htm" title="Utility class providing generic functions for UTF conversions.">sf::Utf</a> classes. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00043">43</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>
</div><hr/><h2>Member Typedef Documentation</h2>
<a class="anchor" id="a8e18efc2e8464f6eb82818902d527efa"></a><!-- doxytag: member="sf::String::ConstIterator" ref="a8e18efc2e8464f6eb82818902d527efa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::basic_string&lt;Uint32&gt;::const_iterator <a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">sf::String::ConstIterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constant iterator type. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00051">51</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac90f2b7b28f703020f8d027e98806235"></a><!-- doxytag: member="sf::String::Iterator" ref="ac90f2b7b28f703020f8d027e98806235" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::basic_string&lt;Uint32&gt;::iterator <a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">sf::String::Iterator</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Iterator type. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00050">50</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a9563a4e93f692e0c8e8702b374ef8692"></a><!-- doxytag: member="sf::String::String" ref="a9563a4e93f692e0c8e8702b374ef8692" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>This constructor creates an empty string. </p>

</div>
</div>
<a class="anchor" id="ac9df7f7696cff164794e338f3c89ccc5"></a><!-- doxytag: member="sf::String::String" ref="ac9df7f7696cff164794e338f3c89ccc5" args="(char ansiChar, const std::locale &amp;locale=std::locale())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ansiChar</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from a single ANSI character and a locale. </p>
<p>The source character is converted to UTF-32 according to the given locale.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ansiChar</td><td>ANSI character to convert </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aefaa202d2aa5ff85b4f75a5983367e86"></a><!-- doxytag: member="sf::String::String" ref="aefaa202d2aa5ff85b4f75a5983367e86" args="(wchar_t wideChar)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">wchar_t&#160;</td>
          <td class="paramname"><em>wideChar</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from single wide character. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">wideChar</td><td>Wide character to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8e1a5027416d121187908e2ed77079ff"></a><!-- doxytag: member="sf::String::String" ref="a8e1a5027416d121187908e2ed77079ff" args="(Uint32 utf32Char)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">Uint32&#160;</td>
          <td class="paramname"><em>utf32Char</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from single UTF-32 character. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">utf32Char</td><td>UTF-32 character to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a57d2b8c289f9894f859564cad034bfc7"></a><!-- doxytag: member="sf::String::String" ref="a57d2b8c289f9894f859564cad034bfc7" args="(const char *ansiString, const std::locale &amp;locale=std::locale())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ansiString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from a null-terminated C-style ANSI string and a locale. </p>
<p>The source string is converted to UTF-32 according to the given locale.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ansiString</td><td>ANSI string to convert </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a0aa41dcbd17b0c36c74d03d3b0147f1e"></a><!-- doxytag: member="sf::String::String" ref="a0aa41dcbd17b0c36c74d03d3b0147f1e" args="(const std::string &amp;ansiString, const std::locale &amp;locale=std::locale())" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ansiString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from an ANSI string and a locale. </p>
<p>The source string is converted to UTF-32 according to the given locale.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">ansiString</td><td>ANSI string to convert </td></tr>
    <tr><td class="paramname">locale</td><td>Locale to use for conversion </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5742d0a9b0c754f711820c2b5c40fa55"></a><!-- doxytag: member="sf::String::String" ref="a5742d0a9b0c754f711820c2b5c40fa55" args="(const wchar_t *wideString)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const wchar_t *&#160;</td>
          <td class="paramname"><em>wideString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from null-terminated C-style wide string. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">wideString</td><td>Wide string to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5e38151340af4f9a5f74ad24c0664074"></a><!-- doxytag: member="sf::String::String" ref="a5e38151340af4f9a5f74ad24c0664074" args="(const std::wstring &amp;wideString)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const std::wstring &amp;&#160;</td>
          <td class="paramname"><em>wideString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from a wide string. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">wideString</td><td>Wide string to convert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aea3629adf19f9fe713d4946f6c75b214"></a><!-- doxytag: member="sf::String::String" ref="aea3629adf19f9fe713d4946f6c75b214" args="(const Uint32 *utf32String)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const Uint32 *&#160;</td>
          <td class="paramname"><em>utf32String</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from a null-terminated C-style UTF-32 string. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">utf32String</td><td>UTF-32 string to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6eee86dbe75d16bbcc26e97416c2e1ca"></a><!-- doxytag: member="sf::String::String" ref="a6eee86dbe75d16bbcc26e97416c2e1ca" args="(const std::basic_string&lt; Uint32 &gt; &amp;utf32String)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const std::basic_string&lt; Uint32 &gt; &amp;&#160;</td>
          <td class="paramname"><em>utf32String</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Construct from an UTF-32 string. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">utf32String</td><td>UTF-32 string to assign </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af862594d3c4070d8ddbf08cf8dce4f59"></a><!-- doxytag: member="sf::String::String" ref="af862594d3c4070d8ddbf08cf8dce4f59" args="(const String &amp;copy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a9563a4e93f692e0c8e8702b374ef8692">sf::String::String</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>copy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">copy</td><td>Instance to copy </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a8ec30ddc08e3a6bd11c99aed782f6dfe"></a><!-- doxytag: member="sf::String::begin" ref="a8ec30ddc08e3a6bd11c99aed782f6dfe" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">Iterator</a> <a class="el" href="classsf_1_1String.htm#a8ec30ddc08e3a6bd11c99aed782f6dfe">sf::String::begin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Read-write iterator to the beginning of the string characters</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#ac823012f39cb6f61100418876e99d53b" title="Return an iterator to the beginning of the string.">end</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a09bbf7704847ed35bf1c18aca6fba2a2"></a><!-- doxytag: member="sf::String::begin" ref="a09bbf7704847ed35bf1c18aca6fba2a2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">ConstIterator</a> <a class="el" href="classsf_1_1String.htm#a8ec30ddc08e3a6bd11c99aed782f6dfe">sf::String::begin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Read-only iterator to the beginning of the string characters</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#ac823012f39cb6f61100418876e99d53b" title="Return an iterator to the beginning of the string.">end</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a391c1b4950cbf3d3f8040cea73af2969"></a><!-- doxytag: member="sf::String::clear" ref="a391c1b4950cbf3d3f8040cea73af2969" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1String.htm#a391c1b4950cbf3d3f8040cea73af2969">sf::String::clear</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear the string. </p>
<p>This function removes all the characters from the string.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a6c43f0cbe84cf17fa6ba93d58b75fcdc" title="Check whether the string is empty or not.">isEmpty</a>, <a class="el" href="classsf_1_1String.htm#aaa78a0a46b3fbe200a4ccdedc326eb93" title="Erase one or more characters from the string.">erase</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac823012f39cb6f61100418876e99d53b"></a><!-- doxytag: member="sf::String::end" ref="ac823012f39cb6f61100418876e99d53b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#ac90f2b7b28f703020f8d027e98806235">Iterator</a> <a class="el" href="classsf_1_1String.htm#ac823012f39cb6f61100418876e99d53b">sf::String::end</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<p>The end iterator refers to 1 position past the last character; thus it represents an invalid character and should never be accessed.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Read-write iterator to the end of the string characters</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a8ec30ddc08e3a6bd11c99aed782f6dfe" title="Return an iterator to the beginning of the string.">begin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab6fb6ee1b21bd5dbdc9d6840f035eb79"></a><!-- doxytag: member="sf::String::end" ref="ab6fb6ee1b21bd5dbdc9d6840f035eb79" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm#a8e18efc2e8464f6eb82818902d527efa">ConstIterator</a> <a class="el" href="classsf_1_1String.htm#ac823012f39cb6f61100418876e99d53b">sf::String::end</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return an iterator to the beginning of the string. </p>
<p>The end iterator refers to 1 position past the last character; thus it represents an invalid character and should never be accessed.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Read-only iterator to the end of the string characters</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a8ec30ddc08e3a6bd11c99aed782f6dfe" title="Return an iterator to the beginning of the string.">begin</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaa78a0a46b3fbe200a4ccdedc326eb93"></a><!-- doxytag: member="sf::String::erase" ref="aaa78a0a46b3fbe200a4ccdedc326eb93" args="(std::size_t position, std::size_t count=1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1String.htm#aaa78a0a46b3fbe200a4ccdedc326eb93">sf::String::erase</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>count</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Erase one or more characters from the string. </p>
<p>This function removes a sequence of <em>count</em> characters starting from <em>position</em>.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of the first character to erase </td></tr>
    <tr><td class="paramname">count</td><td>Number of characters to erase </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae1fc8d6ced3b6082853f8013ea051b5c"></a><!-- doxytag: member="sf::String::find" ref="ae1fc8d6ced3b6082853f8013ea051b5c" args="(const String &amp;str, std::size_t start=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="classsf_1_1String.htm#ae1fc8d6ced3b6082853f8013ea051b5c">sf::String::find</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>start</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find a sequence of one or more characters in the string. </p>
<p>This function searches for the characters of <em>str</em> into the string, starting from <em>start</em>.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">str</td><td>Characters to find </td></tr>
    <tr><td class="paramname">start</td><td>Where to begin searching</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Position of <em>str</em> in the string, or <a class="el" href="classsf_1_1String.htm#abaadecaf12a6b41c54d725c75fd28527" title="Represents an invalid position in the string.">String::InvalidPos</a> if not found </dd></dl>

</div>
</div>
<a class="anchor" id="af2d4e70869ebd38e225c6796e1325ae4"></a><!-- doxytag: member="sf::String::getData" ref="af2d4e70869ebd38e225c6796e1325ae4" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const Uint32* <a class="el" href="classsf_1_1String.htm#af2d4e70869ebd38e225c6796e1325ae4">sf::String::getData</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a pointer to the C-style array of characters. </p>
<p>This functions provides a read-only access to a null-terminated C-style representation of the string. The returned pointer is temporary and is meant only for immediate use, thus it is not recommended to store it.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Read-only pointer to the array of characters </dd></dl>

</div>
</div>
<a class="anchor" id="a635d75c4cd830d5f639a41815dd0ce23"></a><!-- doxytag: member="sf::String::getSize" ref="a635d75c4cd830d5f639a41815dd0ce23" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::size_t <a class="el" href="classsf_1_1String.htm#a635d75c4cd830d5f639a41815dd0ce23">sf::String::getSize</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the size of the string. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Number of characters in the string</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a6c43f0cbe84cf17fa6ba93d58b75fcdc" title="Check whether the string is empty or not.">isEmpty</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad0b1455deabf07af13ee79812e05fa02"></a><!-- doxytag: member="sf::String::insert" ref="ad0b1455deabf07af13ee79812e05fa02" args="(std::size_t position, const String &amp;str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1String.htm#ad0b1455deabf07af13ee79812e05fa02">sf::String::insert</a> </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Insert one or more characters into the string. </p>
<p>This function inserts the characters of <em>str</em> into the string, starting from <em>position</em>.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of insertion </td></tr>
    <tr><td class="paramname">str</td><td>Characters to insert </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6c43f0cbe84cf17fa6ba93d58b75fcdc"></a><!-- doxytag: member="sf::String::isEmpty" ref="a6c43f0cbe84cf17fa6ba93d58b75fcdc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1String.htm#a6c43f0cbe84cf17fa6ba93d58b75fcdc">sf::String::isEmpty</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check whether the string is empty or not. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the string is empty (i.e. contains no character)</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a391c1b4950cbf3d3f8040cea73af2969" title="Clear the string.">clear</a>, <a class="el" href="classsf_1_1String.htm#a635d75c4cd830d5f639a41815dd0ce23" title="Get the size of the string.">getSize</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3664f92c3b488bf9f60f6b8eafe1844d"></a><!-- doxytag: member="sf::String::operator std::string" ref="a3664f92c3b488bf9f60f6b8eafe1844d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::String::operator std::string </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Implicit cast operator to std::string (ANSI string) </p>
<p>The current global locale is used for conversion. If you want to explicitely specify a locale, see toAnsiString. Characters that do not fit in the target encoding are discarded from the returned string. This operator is defined for convenience, and is equivalent to calling <a class="el" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4" title="Convert the unicode string to an ANSI string.">toAnsiString()</a>.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Converted ANSI string</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4" title="Convert the unicode string to an ANSI string.">toAnsiString</a>, operator std::wstring </dd></dl>

</div>
</div>
<a class="anchor" id="a20d50d45020d1dbe1779dda69ee83732"></a><!-- doxytag: member="sf::String::operator std::wstring" ref="a20d50d45020d1dbe1779dda69ee83732" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::String::operator std::wstring </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Implicit cast operator to std::wstring (wide string) </p>
<p>Characters that do not fit in the target encoding are discarded from the returned string. This operator is defined for convenience, and is equivalent to calling <a class="el" href="classsf_1_1String.htm#afd8b085ad7255543e4dc1285389d2d82" title="Convert the unicode string to a wide string.">toWideString()</a>.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Converted wide string</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#afd8b085ad7255543e4dc1285389d2d82" title="Convert the unicode string to a wide string.">toWideString</a>, operator std::string </dd></dl>

</div>
</div>
<a class="anchor" id="ae6563ce2c243ae2160eea8a354199f4e"></a><!-- doxytag: member="sf::String::operator+=" ref="ae6563ce2c243ae2160eea8a354199f4e" args="(const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm">String</a>&amp; sf::String::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of += operator to append an UTF-32 string. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td><a class="el" href="classsf_1_1String.htm" title="Utility string class that automatically handles conversions between types and encodings.">String</a> to append</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to self </dd></dl>

</div>
</div>
<a class="anchor" id="a096255c066e5ef8c31952216b8ce9c42"></a><!-- doxytag: member="sf::String::operator=" ref="a096255c066e5ef8c31952216b8ce9c42" args="(const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1String.htm">String</a>&amp; sf::String::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of assignment operator. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">right</td><td>Instance to assign</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to self </dd></dl>

</div>
</div>
<a class="anchor" id="a649b89a65866bf03652f7b5cb6de3bb6"></a><!-- doxytag: member="sf::String::operator[]" ref="a649b89a65866bf03652f7b5cb6de3bb6" args="(std::size_t index) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint32 sf::String::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of [] operator to access a character by its position. </p>
<p>This function provides read-only access to characters. Note: this function doesn't throw if <em>index</em> is out of range.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>Index of the character to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Character at position <em>index</em> </dd></dl>

</div>
</div>
<a class="anchor" id="abc989da7f4fb873ab29188d40772ab24"></a><!-- doxytag: member="sf::String::operator[]" ref="abc989da7f4fb873ab29188d40772ab24" args="(std::size_t index)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Uint32&amp; sf::String::operator[] </td>
          <td>(</td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of [] operator to access a character by its position. </p>
<p>This function provides read and write access to characters. Note: this function doesn't throw if <em>index</em> is out of range.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">index</td><td>Index of the character to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to the character at position <em>index</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a71d111ccfaf295b8b8be8ca4a3ceb5f4"></a><!-- doxytag: member="sf::String::toAnsiString" ref="a71d111ccfaf295b8b8be8ca4a3ceb5f4" args="(const std::locale &amp;locale=std::locale()) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4">sf::String::toAnsiString</a> </td>
          <td>(</td>
          <td class="paramtype">const std::locale &amp;&#160;</td>
          <td class="paramname"><em>locale</em> = <code>std::locale()</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert the unicode string to an ANSI string. </p>
<p>The UTF-32 string is converted to an ANSI string in the encoding defined by <em>locale</em>. Characters that do not fit in the target encoding are discarded from the returned string.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">locale</td><td>Locale to use for conversion</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Converted ANSI string</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#afd8b085ad7255543e4dc1285389d2d82" title="Convert the unicode string to a wide string.">toWideString</a>, operator std::string </dd></dl>

</div>
</div>
<a class="anchor" id="afd8b085ad7255543e4dc1285389d2d82"></a><!-- doxytag: member="sf::String::toWideString" ref="afd8b085ad7255543e4dc1285389d2d82" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::wstring <a class="el" href="classsf_1_1String.htm#afd8b085ad7255543e4dc1285389d2d82">sf::String::toWideString</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Convert the unicode string to a wide string. </p>
<p>Characters that do not fit in the target encoding are discarded from the returned string.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Converted wide string</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1String.htm#a71d111ccfaf295b8b8be8ca4a3ceb5f4" title="Convert the unicode string to an ANSI string.">toAnsiString</a>, operator std::wstring </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a2b592c36be218b4811795fdc84eecc69"></a><!-- doxytag: member="sf::String::operator!=" ref="a2b592c36be218b4811795fdc84eecc69" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of != operator to compare two UTF-32 strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if both strings are different </dd></dl>

</div>
</div>
<a class="anchor" id="a55ef2bf7dc6b295ef7127b0bc1e58760"></a><!-- doxytag: member="sf::String::operator+" ref="a55ef2bf7dc6b295ef7127b0bc1e58760" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API <a class="el" href="classsf_1_1String.htm">String</a> operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of binary + operator to concatenate two strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Concatenated string </dd></dl>

</div>
</div>
<a class="anchor" id="ac2ca5a7703402a2bbafd85eec6d1e846"></a><!-- doxytag: member="sf::String::operator&lt;" ref="ac2ca5a7703402a2bbafd85eec6d1e846" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &lt; operator to compare two UTF-32 strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is alphabetically lesser than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="abd342b6094b81cd086c7929b53b112ae"></a><!-- doxytag: member="sf::String::operator&lt;=" ref="abd342b6094b81cd086c7929b53b112ae" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&lt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &lt;= operator to compare two UTF-32 strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is alphabetically lesser or equal than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a2a385459fa9a237e61a712fa956d489e"></a><!-- doxytag: member="sf::String::operator==" ref="a2a385459fa9a237e61a712fa956d489e" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of == operator to compare two UTF-32 strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if both strings are equal </dd></dl>

</div>
</div>
<a class="anchor" id="a5efc1eca58cf5c17d01eb8501d303538"></a><!-- doxytag: member="sf::String::operator&gt;" ref="a5efc1eca58cf5c17d01eb8501d303538" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &gt; operator to compare two UTF-32 strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is alphabetically greater than <em>right</em> </dd></dl>

</div>
</div>
<a class="anchor" id="a8d2979d7829d6616330a768956f251e1"></a><!-- doxytag: member="sf::String::operator&gt;=" ref="a8d2979d7829d6616330a768956f251e1" args="(const String &amp;left, const String &amp;right)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SFML_SYSTEM_API bool operator&gt;= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>left</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1String.htm">String</a> &amp;&#160;</td>
          <td class="paramname"><em>right</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [related]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Overload of &gt;= operator to compare two UTF-32 strings. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">left</td><td>Left operand (a string) </td></tr>
    <tr><td class="paramname">right</td><td>Right operand (a string)</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if <em>left</em> is alphabetically greater or equal than <em>right</em> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="abaadecaf12a6b41c54d725c75fd28527"></a><!-- doxytag: member="sf::String::InvalidPos" ref="abaadecaf12a6b41c54d725c75fd28527" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::size_t <a class="el" href="classsf_1_1String.htm#abaadecaf12a6b41c54d725c75fd28527">sf::String::InvalidPos</a><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Represents an invalid position in the string. </p>

<p>Definition at line <a class="el" href="String_8hpp_source.htm#l00056">56</a> of file <a class="el" href="String_8hpp_source.htm">String.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="String_8hpp_source.htm">String.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
