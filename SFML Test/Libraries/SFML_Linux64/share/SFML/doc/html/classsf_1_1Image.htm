<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Image.htm">Image</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">sf::Image Class Reference<div class="ingroups"><a class="el" href="group__graphics.htm">Graphics module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::Image" -->
<p>Class for loading, manipulating and saving images.  
 <a href="classsf_1_1Image.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Image_8hpp_source.htm">Image.hpp</a>&gt;</code></p>

<p><a href="classsf_1_1Image-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#abb4caf3cb167b613345ebe36fc883f12">Image</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#abb4caf3cb167b613345ebe36fc883f12"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a2a67930e2fd9ad97cf004e918cf5832b">create</a> (unsigned int width, unsigned int height, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;color=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0))</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the image and fill it with a unique color.  <a href="#a2a67930e2fd9ad97cf004e918cf5832b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a1c2b960ea12bdbb29e80934ce5268ebf">create</a> (unsigned int width, unsigned int height, const Uint8 *pixels)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create the image from an array of pixels.  <a href="#a1c2b960ea12bdbb29e80934ce5268ebf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a9e4f2aa8e36d0cabde5ed5a4ef80290b">loadFromFile</a> (const std::string &amp;filename)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the image from a file on disk.  <a href="#a9e4f2aa8e36d0cabde5ed5a4ef80290b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#aaa6c7afa5851a51cec6ab438faa7354c">loadFromMemory</a> (const void *data, std::size_t size)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the image from a file in memory.  <a href="#aaa6c7afa5851a51cec6ab438faa7354c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a21122ded0e8368bb06ed3b9acfbfb501">loadFromStream</a> (<a class="el" href="classsf_1_1InputStream.htm">InputStream</a> &amp;stream)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Load the image from a custom stream.  <a href="#a21122ded0e8368bb06ed3b9acfbfb501"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#aec0ed16b67df7b512aaa5c53388ba14e">saveToFile</a> (const std::string &amp;filename) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Save the image to a file on disk.  <a href="#aec0ed16b67df7b512aaa5c53388ba14e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector2.htm">Vector2u</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a5c3e9bebdc001c3ebf85ca97039fc86b">getSize</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the image.  <a href="#a5c3e9bebdc001c3ebf85ca97039fc86b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a22f13f8c242a6b38eb73cc176b37ae34">createMaskFromColor</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;color, Uint8 alpha=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a transparency mask from a specified color-key.  <a href="#a22f13f8c242a6b38eb73cc176b37ae34"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#ab2fa337c956f85f93377dcb52153a45a">copy</a> (const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;source, unsigned int destX, unsigned int destY, const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;sourceRect=<a class="el" href="classsf_1_1Rect.htm">IntRect</a>(0, 0, 0, 0), bool applyAlpha=false)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy pixels from another image onto this one.  <a href="#ab2fa337c956f85f93377dcb52153a45a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a9fd329b8cd7d4439e07fb5d3bb2d9744">setPixel</a> (unsigned int x, unsigned int y, const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;color)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the color of a pixel.  <a href="#a9fd329b8cd7d4439e07fb5d3bb2d9744"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Color.htm">Color</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a8c8460e311dcb00557cb00a81c29163d">getPixel</a> (unsigned int x, unsigned int y) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the color of a pixel.  <a href="#a8c8460e311dcb00557cb00a81c29163d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const Uint8 *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#ac6137a608a9efaae2735c13ff259c214">getPixelsPtr</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a read-only pointer to the array of pixels.  <a href="#ac6137a608a9efaae2735c13ff259c214"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a57168e7bc29190e08bbd6c9c19f4bb2c">flipHorizontally</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flip the image horizontally (left &lt;-&gt; right)  <a href="#a57168e7bc29190e08bbd6c9c19f4bb2c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Image.htm#a78a702a7e49d1de2dec9894da99d279c">flipVertically</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Flip the image vertically (top &lt;-&gt; bottom)  <a href="#a78a702a7e49d1de2dec9894da99d279c"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Class for loading, manipulating and saving images. </p>
<p><a class="el" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">sf::Image</a> is an abstraction to manipulate images as bidimensional arrays of pixels.</p>
<p>The class provides functions to load, read, write and save pixels, as well as many other useful functions.</p>
<p><a class="el" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">sf::Image</a> can handle a unique internal representation of pixels, which is RGBA 32 bits. This means that a pixel must be composed of 8 bits red, green, blue and alpha channels -- just like a <a class="el" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a>. All the functions that return an array of pixels follow this rule, and all parameters that you pass to <a class="el" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">sf::Image</a> functions (such as loadFromPixels) must use this representation as well.</p>
<p>A <a class="el" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">sf::Image</a> can be copied, but it is a heavy resource and if possible you should always use [const] references to pass or return them to avoid useless copies.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <span class="comment">// Load an image file from a file</span>
 <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">sf::Image</a> background;
 <span class="keywordflow">if</span> (!background.<a class="code" href="classsf_1_1Image.htm#a9e4f2aa8e36d0cabde5ed5a4ef80290b" title="Load the image from a file on disk.">loadFromFile</a>(<span class="stringliteral">&quot;background.jpg&quot;</span>))
     <span class="keywordflow">return</span> -1;

 <span class="comment">// Create a 20x20 image filled with black color</span>
 <a class="code" href="classsf_1_1Image.htm" title="Class for loading, manipulating and saving images.">sf::Image</a> image;
 <span class="keywordflow">if</span> (!image.<a class="code" href="classsf_1_1Image.htm#a2a67930e2fd9ad97cf004e918cf5832b" title="Create the image and fill it with a unique color.">create</a>(20, 20, <a class="code" href="classsf_1_1Color.htm#a77c688197b981338f0b19dc58bd2facd" title="Black predefined color.">sf::Color::Black</a>))
     <span class="keywordflow">return</span> -1;

 <span class="comment">// Copy image1 on image2 at position (10, 10)</span>
 image.<a class="code" href="classsf_1_1Image.htm#ab2fa337c956f85f93377dcb52153a45a" title="Copy pixels from another image onto this one.">copy</a>(background, 10, 10);

 <span class="comment">// Make the top-left pixel transparent</span>
 <a class="code" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">sf::Color</a> color = image.<a class="code" href="classsf_1_1Image.htm#a8c8460e311dcb00557cb00a81c29163d" title="Get the color of a pixel.">getPixel</a>(0, 0);
 color.<a class="code" href="classsf_1_1Color.htm#a56dbdb47d5f040d9b78ac6a0b8b3a831" title="Alpha (opacity) component.">a</a> = 0;
 image.<a class="code" href="classsf_1_1Image.htm#a9fd329b8cd7d4439e07fb5d3bb2d9744" title="Change the color of a pixel.">setPixel</a>(0, 0, color);

 <span class="comment">// Save the image to a file</span>
 <span class="keywordflow">if</span> (!image.<a class="code" href="classsf_1_1Image.htm#aec0ed16b67df7b512aaa5c53388ba14e" title="Save the image to a file on disk.">saveToFile</a>(<span class="stringliteral">&quot;result.png&quot;</span>))
     <span class="keywordflow">return</span> -1;
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Texture.htm" title="Image living on the graphics card that can be used for drawing.">sf::Texture</a> </dd></dl>

<p>Definition at line <a class="el" href="Image_8hpp_source.htm#l00046">46</a> of file <a class="el" href="Image_8hpp_source.htm">Image.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="abb4caf3cb167b613345ebe36fc883f12"></a><!-- doxytag: member="sf::Image::Image" ref="abb4caf3cb167b613345ebe36fc883f12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Image.htm#abb4caf3cb167b613345ebe36fc883f12">sf::Image::Image</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>Creates an empty image. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab2fa337c956f85f93377dcb52153a45a"></a><!-- doxytag: member="sf::Image::copy" ref="ab2fa337c956f85f93377dcb52153a45a" args="(const Image &amp;source, unsigned int destX, unsigned int destY, const IntRect &amp;sourceRect=IntRect(0, 0, 0, 0), bool applyAlpha=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#ab2fa337c956f85f93377dcb52153a45a">sf::Image::copy</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>destX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>destY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Rect.htm">IntRect</a> &amp;&#160;</td>
          <td class="paramname"><em>sourceRect</em> = <code><a class="el" href="classsf_1_1Rect.htm">IntRect</a>(0,&#160;0,&#160;0,&#160;0)</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>applyAlpha</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy pixels from another image onto this one. </p>
<p>This function does a slow pixel copy and should not be used intensively. It can be used to prepare a complex static image from several others, but if you need this kind of feature in real-time you'd better use <a class="el" href="classsf_1_1RenderTexture.htm" title="Target for off-screen 2D rendering into an texture.">sf::RenderTexture</a>.</p>
<p>If <em>sourceRect</em> is empty, the whole image is copied. If <em>applyAlpha</em> is set to true, the transparency of source pixels is applied. If it is false, the pixels are copied unchanged with their alpha value.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">source</td><td>Source image to copy </td></tr>
    <tr><td class="paramname">destX</td><td>X coordinate of the destination position </td></tr>
    <tr><td class="paramname">destY</td><td>Y coordinate of the destination position </td></tr>
    <tr><td class="paramname">sourceRect</td><td>Sub-rectangle of the source image to copy </td></tr>
    <tr><td class="paramname">applyAlpha</td><td>Should the copy take in account the source transparency? </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2a67930e2fd9ad97cf004e918cf5832b"></a><!-- doxytag: member="sf::Image::create" ref="a2a67930e2fd9ad97cf004e918cf5832b" args="(unsigned int width, unsigned int height, const Color &amp;color=Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#a2a67930e2fd9ad97cf004e918cf5832b">sf::Image::create</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&#160;0,&#160;0)</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create the image and fill it with a unique color. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>Width of the image </td></tr>
    <tr><td class="paramname">height</td><td>Height of the image </td></tr>
    <tr><td class="paramname">color</td><td>Fill color </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1c2b960ea12bdbb29e80934ce5268ebf"></a><!-- doxytag: member="sf::Image::create" ref="a1c2b960ea12bdbb29e80934ce5268ebf" args="(unsigned int width, unsigned int height, const Uint8 *pixels)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#a2a67930e2fd9ad97cf004e918cf5832b">sf::Image::create</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Uint8 *&#160;</td>
          <td class="paramname"><em>pixels</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create the image from an array of pixels. </p>
<p>The <em>pixel</em> array is assumed to contain 32-bits RGBA pixels, and have the given <em>width</em> and <em>height</em>. If not, this is an undefined behaviour. If <em>pixels</em> is null, an empty image is created.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">width</td><td>Width of the image </td></tr>
    <tr><td class="paramname">height</td><td>Height of the image </td></tr>
    <tr><td class="paramname">pixels</td><td>Array of pixels to copy to the image </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a22f13f8c242a6b38eb73cc176b37ae34"></a><!-- doxytag: member="sf::Image::createMaskFromColor" ref="a22f13f8c242a6b38eb73cc176b37ae34" args="(const Color &amp;color, Uint8 alpha=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#a22f13f8c242a6b38eb73cc176b37ae34">sf::Image::createMaskFromColor</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Uint8&#160;</td>
          <td class="paramname"><em>alpha</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a transparency mask from a specified color-key. </p>
<p>This function sets the alpha value of every pixel matching the given color to <em>alpha</em> (0 by default), so that they become transparent.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">color</td><td><a class="el" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a> to make transparent </td></tr>
    <tr><td class="paramname">alpha</td><td>Alpha value to assign to transparent pixels </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a57168e7bc29190e08bbd6c9c19f4bb2c"></a><!-- doxytag: member="sf::Image::flipHorizontally" ref="a57168e7bc29190e08bbd6c9c19f4bb2c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#a57168e7bc29190e08bbd6c9c19f4bb2c">sf::Image::flipHorizontally</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Flip the image horizontally (left &lt;-&gt; right) </p>

</div>
</div>
<a class="anchor" id="a78a702a7e49d1de2dec9894da99d279c"></a><!-- doxytag: member="sf::Image::flipVertically" ref="a78a702a7e49d1de2dec9894da99d279c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#a78a702a7e49d1de2dec9894da99d279c">sf::Image::flipVertically</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Flip the image vertically (top &lt;-&gt; bottom) </p>

</div>
</div>
<a class="anchor" id="a8c8460e311dcb00557cb00a81c29163d"></a><!-- doxytag: member="sf::Image::getPixel" ref="a8c8460e311dcb00557cb00a81c29163d" args="(unsigned int x, unsigned int y) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Color.htm">Color</a> <a class="el" href="classsf_1_1Image.htm#a8c8460e311dcb00557cb00a81c29163d">sf::Image::getPixel</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the color of a pixel. </p>
<p>This function doesn't check the validity of the pixel coordinates, using out-of-range values will result in an undefined behaviour.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of pixel to get </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of pixel to get</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="classsf_1_1Color.htm" title="Utility class for manpulating RGBA colors.">Color</a> of the pixel at coordinates (x, y)</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Image.htm#a9fd329b8cd7d4439e07fb5d3bb2d9744" title="Change the color of a pixel.">setPixel</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac6137a608a9efaae2735c13ff259c214"></a><!-- doxytag: member="sf::Image::getPixelsPtr" ref="ac6137a608a9efaae2735c13ff259c214" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const Uint8* <a class="el" href="classsf_1_1Image.htm#ac6137a608a9efaae2735c13ff259c214">sf::Image::getPixelsPtr</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a read-only pointer to the array of pixels. </p>
<p>The returned value points to an array of RGBA pixels made of 8 bits integers components. The size of the array is GetWidth() * GetHeight() * 4. Warning: the returned pointer may become invalid if you modify the image, so you should never store it for too long. If the image is empty, a null pointer is returned.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Read-only pointer to the array of pixels </dd></dl>

</div>
</div>
<a class="anchor" id="a5c3e9bebdc001c3ebf85ca97039fc86b"></a><!-- doxytag: member="sf::Image::getSize" ref="a5c3e9bebdc001c3ebf85ca97039fc86b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector2.htm">Vector2u</a> <a class="el" href="classsf_1_1Image.htm#a5c3e9bebdc001c3ebf85ca97039fc86b">sf::Image::getSize</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the size of the image. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Size in pixels </dd></dl>

</div>
</div>
<a class="anchor" id="a9e4f2aa8e36d0cabde5ed5a4ef80290b"></a><!-- doxytag: member="sf::Image::loadFromFile" ref="a9e4f2aa8e36d0cabde5ed5a4ef80290b" args="(const std::string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Image.htm#a9e4f2aa8e36d0cabde5ed5a4ef80290b">sf::Image::loadFromFile</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Load the image from a file on disk. </p>
<p>The supported image formats are bmp, png, tga, jpg, gif, psd, hdr and pic. Some format options are not supported, like progressive jpeg. If this function fails, the image is left unchanged.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path of the image file to load</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if loading was successful</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Image.htm#aaa6c7afa5851a51cec6ab438faa7354c" title="Load the image from a file in memory.">loadFromMemory</a>, <a class="el" href="classsf_1_1Image.htm#a21122ded0e8368bb06ed3b9acfbfb501" title="Load the image from a custom stream.">loadFromStream</a>, <a class="el" href="classsf_1_1Image.htm#aec0ed16b67df7b512aaa5c53388ba14e" title="Save the image to a file on disk.">saveToFile</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaa6c7afa5851a51cec6ab438faa7354c"></a><!-- doxytag: member="sf::Image::loadFromMemory" ref="aaa6c7afa5851a51cec6ab438faa7354c" args="(const void *data, std::size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Image.htm#aaa6c7afa5851a51cec6ab438faa7354c">sf::Image::loadFromMemory</a> </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Load the image from a file in memory. </p>
<p>The supported image formats are bmp, png, tga, jpg, gif, psd, hdr and pic. Some format options are not supported, like progressive jpeg. If this function fails, the image is left unchanged.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>Pointer to the file data in memory </td></tr>
    <tr><td class="paramname">size</td><td>Size of the data to load, in bytes</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if loading was successful</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Image.htm#a9e4f2aa8e36d0cabde5ed5a4ef80290b" title="Load the image from a file on disk.">loadFromFile</a>, <a class="el" href="classsf_1_1Image.htm#a21122ded0e8368bb06ed3b9acfbfb501" title="Load the image from a custom stream.">loadFromStream</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a21122ded0e8368bb06ed3b9acfbfb501"></a><!-- doxytag: member="sf::Image::loadFromStream" ref="a21122ded0e8368bb06ed3b9acfbfb501" args="(InputStream &amp;stream)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Image.htm#a21122ded0e8368bb06ed3b9acfbfb501">sf::Image::loadFromStream</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1InputStream.htm">InputStream</a> &amp;&#160;</td>
          <td class="paramname"><em>stream</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Load the image from a custom stream. </p>
<p>The supported image formats are bmp, png, tga, jpg, gif, psd, hdr and pic. Some format options are not supported, like progressive jpeg. If this function fails, the image is left unchanged.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>Source stream to read from</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if loading was successful</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Image.htm#a9e4f2aa8e36d0cabde5ed5a4ef80290b" title="Load the image from a file on disk.">loadFromFile</a>, <a class="el" href="classsf_1_1Image.htm#aaa6c7afa5851a51cec6ab438faa7354c" title="Load the image from a file in memory.">loadFromMemory</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aec0ed16b67df7b512aaa5c53388ba14e"></a><!-- doxytag: member="sf::Image::saveToFile" ref="aec0ed16b67df7b512aaa5c53388ba14e" args="(const std::string &amp;filename) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1Image.htm#aec0ed16b67df7b512aaa5c53388ba14e">sf::Image::saveToFile</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Save the image to a file on disk. </p>
<p>The format of the image is automatically deduced from the extension. The supported image formats are bmp, png, tga and jpg. The destination file is overwritten if it already exists. This function fails if the image is empty.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Path of the file to save</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if saving was successful</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Image.htm#a2a67930e2fd9ad97cf004e918cf5832b" title="Create the image and fill it with a unique color.">create</a>, <a class="el" href="classsf_1_1Image.htm#a9e4f2aa8e36d0cabde5ed5a4ef80290b" title="Load the image from a file on disk.">loadFromFile</a>, <a class="el" href="classsf_1_1Image.htm#aaa6c7afa5851a51cec6ab438faa7354c" title="Load the image from a file in memory.">loadFromMemory</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9fd329b8cd7d4439e07fb5d3bb2d9744"></a><!-- doxytag: member="sf::Image::setPixel" ref="a9fd329b8cd7d4439e07fb5d3bb2d9744" args="(unsigned int x, unsigned int y, const Color &amp;color)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1Image.htm#a9fd329b8cd7d4439e07fb5d3bb2d9744">sf::Image::setPixel</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the color of a pixel. </p>
<p>This function doesn't check the validity of the pixel coordinates, using out-of-range values will result in an undefined behaviour.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of pixel to change </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of pixel to change </td></tr>
    <tr><td class="paramname">color</td><td>New color of the pixel</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Image.htm#a8c8460e311dcb00557cb00a81c29163d" title="Get the color of a pixel.">getPixel</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Image_8hpp_source.htm">Image.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
