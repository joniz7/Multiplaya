<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">Http.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2012 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_HTTP_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_HTTP_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Network/Export.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Network/IpAddress.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Network/TcpSocket.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;SFML/System/NonCopyable.hpp&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;SFML/System/Time.hpp&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="keyword">namespace </span>sf
<a name="l00041"></a>00041 {
<a name="l00046"></a><a class="code" href="classsf_1_1Http.htm">00046</a> <span class="keyword">class </span>SFML_NETWORK_API <a class="code" href="classsf_1_1Http.htm" title="A HTTP client.">Http</a> : <a class="code" href="classsf_1_1NonCopyable.htm" title="Utility class that makes any derived class non-copyable.">NonCopyable</a>
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048 <span class="keyword">public</span> :
<a name="l00049"></a>00049 
<a name="l00054"></a><a class="code" href="classsf_1_1Http_1_1Request.htm">00054</a>     <span class="keyword">class </span>SFML_NETWORK_API <a class="code" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">Request</a>
<a name="l00055"></a>00055     {
<a name="l00056"></a>00056     <span class="keyword">public</span> :
<a name="l00057"></a>00057 
<a name="l00062"></a><a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598">00062</a>         <span class="keyword">enum</span> <a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598" title="Enumerate the available HTTP methods for a request.">Method</a>
<a name="l00063"></a>00063         {
<a name="l00064"></a><a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598ab822baed393f3d0353621e5378b9fcb4">00064</a>             <a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598ab822baed393f3d0353621e5378b9fcb4" title="Request in get mode, standard method to retrieve a page.">Get</a>,  
<a name="l00065"></a><a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598ae8ec4048b9550f8d0747d4199603141a">00065</a>             <a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598ae8ec4048b9550f8d0747d4199603141a" title="Request in post mode, usually to send data to a page.">Post</a>, 
<a name="l00066"></a><a class="code" href="classsf_1_1Http_1_1Request.htm#a620f8bff6f43e1378f321bf53fbf5598a4df23138be7ed60f47aba6548ba65e7b">00066</a>             Head  
<a name="l00067"></a>00067         };
<a name="l00068"></a>00068 
<a name="l00080"></a>00080         <a class="code" href="classsf_1_1Http_1_1Request.htm" title="Define a HTTP request.">Request</a>(<span class="keyword">const</span> std::string&amp; uri = <span class="stringliteral">&quot;/&quot;</span>, Method method = Get, <span class="keyword">const</span> std::string&amp; body = <span class="stringliteral">&quot;&quot;</span>);
<a name="l00081"></a>00081 
<a name="l00095"></a>00095         <span class="keywordtype">void</span> setField(<span class="keyword">const</span> std::string&amp; field, <span class="keyword">const</span> std::string&amp; value);
<a name="l00096"></a>00096 
<a name="l00107"></a>00107         <span class="keywordtype">void</span> setMethod(Method method);
<a name="l00108"></a>00108 
<a name="l00119"></a>00119         <span class="keywordtype">void</span> setUri(<span class="keyword">const</span> std::string&amp; uri);
<a name="l00120"></a>00120 
<a name="l00130"></a>00130         <span class="keywordtype">void</span> setHttpVersion(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> major, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> minor);
<a name="l00131"></a>00131 
<a name="l00142"></a>00142         <span class="keywordtype">void</span> setBody(<span class="keyword">const</span> std::string&amp; body);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keyword">private</span> :
<a name="l00145"></a>00145 
<a name="l00146"></a>00146         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1Http.htm" title="A HTTP client.">Http</a>;
<a name="l00147"></a>00147 
<a name="l00157"></a>00157         std::string prepare() <span class="keyword">const</span>;
<a name="l00158"></a>00158 
<a name="l00169"></a>00169         <span class="keywordtype">bool</span> hasField(<span class="keyword">const</span> std::string&amp; field) <span class="keyword">const</span>;
<a name="l00170"></a>00170 
<a name="l00172"></a>00172         <span class="comment">// Types</span>
<a name="l00174"></a>00174 <span class="comment"></span>        <span class="keyword">typedef</span> std::map&lt;std::string, std::string&gt; FieldTable;
<a name="l00175"></a>00175 
<a name="l00177"></a>00177         <span class="comment">// Member data</span>
<a name="l00179"></a>00179 <span class="comment"></span>        FieldTable   m_fields;       
<a name="l00180"></a>00180         Method       m_method;       
<a name="l00181"></a>00181         std::string  m_uri;          
<a name="l00182"></a>00182         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_majorVersion; 
<a name="l00183"></a>00183         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_minorVersion; 
<a name="l00184"></a>00184         std::string  m_body;         
<a name="l00185"></a>00185     };
<a name="l00186"></a>00186 
<a name="l00191"></a><a class="code" href="classsf_1_1Http_1_1Response.htm">00191</a>     <span class="keyword">class </span>SFML_NETWORK_API <a class="code" href="classsf_1_1Http_1_1Response.htm" title="Define a HTTP response.">Response</a>
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193     <span class="keyword">public</span> :
<a name="l00194"></a>00194 
<a name="l00199"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8">00199</a>         <span class="keyword">enum</span> <a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8" title="Enumerate all the valid status codes for a response.">Status</a>
<a name="l00200"></a>00200         {
<a name="l00201"></a>00201             <span class="comment">// 2xx: success</span>
<a name="l00202"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a0158f932254d3f09647dd1f64bd43832">00202</a>             Ok             = 200, 
<a name="l00203"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a0a6e8bafa9365a0ed10b8a9cbfd0649b">00203</a>             Created        = 201, 
<a name="l00204"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8ad328945457bd2f0d65107ba6b5ccd443">00204</a>             Accepted       = 202, 
<a name="l00205"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8aefde9e4abf5682dcd314d63143be42e0">00205</a>             NoContent      = 204, 
<a name="l00206"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a77327cc2a5e34cc64030b322e61d12a8">00206</a>             ResetContent   = 205, 
<a name="l00207"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a0cfae3ab0469b73dfddc54312a5e6a8a">00207</a>             PartialContent = 206, 
<a name="l00208"></a>00208 
<a name="l00209"></a>00209             <span class="comment">// 3xx: redirection</span>
<a name="l00210"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8add95cbd8fa27516821f763488557f96b">00210</a>             MultipleChoices  = 300, 
<a name="l00211"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a2f91651db3a09628faf68cbcefa0810a">00211</a>             MovedPermanently = 301, 
<a name="l00212"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a05c50d7b17c844e0b909e5802d5f1587">00212</a>             MovedTemporarily = 302, 
<a name="l00213"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a060ebc3af266e6bfe045b89e298e2545">00213</a>             NotModified      = 304, 
<a name="l00214"></a>00214 
<a name="l00215"></a>00215             <span class="comment">// 4xx: client error</span>
<a name="l00216"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a3f88a714cf5483ee22f9051e5a3c080a">00216</a>             BadRequest          = 400, 
<a name="l00217"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8ab7a79b7bff50fb1902c19eecbb4e2a2d">00217</a>             Unauthorized        = 401, 
<a name="l00218"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a64492842e823ebe12a85539b6b454986">00218</a>             Forbidden           = 403, 
<a name="l00219"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8affca8a8319a62d98bd3ef90ff5cfc030">00219</a>             NotFound            = 404, 
<a name="l00220"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a12533d00093b190e6d4c0076577e2239">00220</a>             RangeNotSatisfiable = 407, 
<a name="l00221"></a>00221 
<a name="l00222"></a>00222             <span class="comment">// 5xx: server error</span>
<a name="l00223"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8adae2b2a936414349d55b4ed8c583fed1">00223</a>             InternalServerError = 500, 
<a name="l00224"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a6920ba06d7e2bcf0b325da23ee95ef68">00224</a>             NotImplemented      = 501, 
<a name="l00225"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8aad0cbad4cdaf448beb763e86bc1f747c">00225</a>             BadGateway          = 502, 
<a name="l00226"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8ac4fffba9d5ad4c14171a1bbe4f6adf87">00226</a>             ServiceNotAvailable = 503, 
<a name="l00227"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a215935d823ab44694709a184a71353b0">00227</a>             GatewayTimeout      = 504, 
<a name="l00228"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8aeb32a1a087d5fcf1a42663eb40c3c305">00228</a>             VersionNotSupported = 505, 
<a name="l00229"></a>00229 
<a name="l00230"></a>00230             <span class="comment">// 10xx: SFML custom codes</span>
<a name="l00231"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a0af0090420e60bf54da4860749345c95">00231</a>             InvalidResponse  = 1000, 
<a name="l00232"></a><a class="code" href="classsf_1_1Http_1_1Response.htm#a663e071978e30fbbeb20ed045be874d8a7f307376f13bdc06b24fc274ecd2aa60">00232</a>             ConnectionFailed = 1001  
<a name="l00233"></a>00233         };
<a name="l00234"></a>00234 
<a name="l00241"></a>00241         <a class="code" href="classsf_1_1Http_1_1Response.htm" title="Define a HTTP response.">Response</a>();
<a name="l00242"></a>00242 
<a name="l00255"></a>00255         <span class="keyword">const</span> std::string&amp; getField(<span class="keyword">const</span> std::string&amp; field) <span class="keyword">const</span>;
<a name="l00256"></a>00256 
<a name="l00268"></a>00268         Status getStatus() <span class="keyword">const</span>;
<a name="l00269"></a>00269 
<a name="l00278"></a>00278         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getMajorHttpVersion() <span class="keyword">const</span>;
<a name="l00279"></a>00279 
<a name="l00288"></a>00288         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getMinorHttpVersion() <span class="keyword">const</span>;
<a name="l00289"></a>00289 
<a name="l00302"></a>00302         <span class="keyword">const</span> std::string&amp; getBody() <span class="keyword">const</span>;
<a name="l00303"></a>00303 
<a name="l00304"></a>00304     <span class="keyword">private</span> :
<a name="l00305"></a>00305 
<a name="l00306"></a>00306         <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classsf_1_1Http.htm" title="A HTTP client.">Http</a>;
<a name="l00307"></a>00307 
<a name="l00317"></a>00317         <span class="keywordtype">void</span> parse(<span class="keyword">const</span> std::string&amp; data);
<a name="l00318"></a>00318 
<a name="l00320"></a>00320         <span class="comment">// Types</span>
<a name="l00322"></a>00322 <span class="comment"></span>        <span class="keyword">typedef</span> std::map&lt;std::string, std::string&gt; FieldTable;
<a name="l00323"></a>00323 
<a name="l00325"></a>00325         <span class="comment">// Member data</span>
<a name="l00327"></a>00327 <span class="comment"></span>        FieldTable   m_fields;       
<a name="l00328"></a>00328         Status       m_status;       
<a name="l00329"></a>00329         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_majorVersion; 
<a name="l00330"></a>00330         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_minorVersion; 
<a name="l00331"></a>00331         std::string  m_body;         
<a name="l00332"></a>00332     };
<a name="l00333"></a>00333 
<a name="l00338"></a>00338     <a class="code" href="classsf_1_1Http.htm" title="A HTTP client.">Http</a>();
<a name="l00339"></a>00339 
<a name="l00354"></a>00354     <a class="code" href="classsf_1_1Http.htm" title="A HTTP client.">Http</a>(<span class="keyword">const</span> std::string&amp; host, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port = 0);
<a name="l00355"></a>00355 
<a name="l00371"></a>00371     <span class="keywordtype">void</span> setHost(<span class="keyword">const</span> std::string&amp; host, <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> port = 0);
<a name="l00372"></a>00372 
<a name="l00391"></a>00391     Response sendRequest(<span class="keyword">const</span> Request&amp; request, <a class="code" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> timeout = <a class="code" href="classsf_1_1Time.htm#a8db127b632fa8da21550e7282af11fa0" title="Predefined &quot;zero&quot; time value.">Time::Zero</a>);
<a name="l00392"></a>00392 
<a name="l00393"></a>00393 <span class="keyword">private</span> :
<a name="l00394"></a>00394 
<a name="l00396"></a>00396     <span class="comment">// Member data</span>
<a name="l00398"></a>00398 <span class="comment"></span>    <a class="code" href="classsf_1_1TcpSocket.htm" title="Specialized socket using the TCP protocol.">TcpSocket</a>      m_connection; 
<a name="l00399"></a>00399     <a class="code" href="classsf_1_1IpAddress.htm" title="Encapsulate an IPv4 network address.">IpAddress</a>      m_host;       
<a name="l00400"></a>00400     std::string    m_hostName;   
<a name="l00401"></a>00401     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> m_port;       
<a name="l00402"></a>00402 };
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 } <span class="comment">// namespace sf</span>
<a name="l00405"></a>00405 
<a name="l00406"></a>00406 
<a name="l00407"></a>00407 <span class="preprocessor">#endif // SFML_HTTP_HPP</span>
<a name="l00408"></a>00408 <span class="preprocessor"></span>
<a name="l00409"></a>00409 
</pre></div></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
