<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">System module</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Clock.htm">sf::Clock</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class that measures the elapsed time.  <a href="classsf_1_1Clock.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1InputStream.htm">sf::InputStream</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Abstract class for custom file input streams.  <a href="classsf_1_1InputStream.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Lock.htm">sf::Lock</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Automatic wrapper for locking and unlocking mutexes.  <a href="classsf_1_1Lock.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Mutex.htm">sf::Mutex</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks concurrent access to shared resources from multiple threads.  <a href="classsf_1_1Mutex.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1NonCopyable.htm">sf::NonCopyable</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class that makes any derived class non-copyable.  <a href="classsf_1_1NonCopyable.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1String.htm">sf::String</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility string class that automatically handles conversions between types and encodings.  <a href="classsf_1_1String.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Thread.htm">sf::Thread</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class to manipulate threads.  <a href="classsf_1_1Thread.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocal.htm">sf::ThreadLocal</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Defines variables with thread-local storage.  <a href="classsf_1_1ThreadLocal.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1ThreadLocalPtr.htm">sf::ThreadLocalPtr&lt; T &gt;</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to a thread-local variable.  <a href="classsf_1_1ThreadLocalPtr.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Time.htm">sf::Time</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Represents a time value.  <a href="classsf_1_1Time.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Utf.htm">sf::Utf</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility class providing generic functions for UTF conversions.  <a href="classsf_1_1Utf.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector2.htm">sf::Vector2&lt; T &gt;</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility template class for manipulating 2-dimensional vectors.  <a href="classsf_1_1Vector2.htm#details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1Vector3.htm">sf::Vector3&lt; T &gt;</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility template class for manipulating 3-dimensional vectors.  <a href="classsf_1_1Vector3.htm#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void SFML_SYSTEM_API&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system.htm#ga2f2620831533dee0ed432ed982342e09">sf::sleep</a> (Time duration)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make the current thread sleep for a given duration.  <a href="#ga2f2620831533dee0ed432ed982342e09"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">SFML_SYSTEM_API std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__system.htm#ga7fe7f475639e26334606b5142c29551f">sf::err</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard stream used by SFML to output warnings and errors.  <a href="#ga7fe7f475639e26334606b5142c29551f"></a><br/></td></tr>
</table>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga7fe7f475639e26334606b5142c29551f"></a><!-- doxytag: member="sf::err" ref="ga7fe7f475639e26334606b5142c29551f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::err </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Standard stream used by SFML to output warnings and errors. </p>
<p>By default, <a class="el" href="group__system.htm#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors.">sf::err()</a> outputs to the same location as std::cerr, (-&gt; the stderr descriptor) which is the console if there's one available.</p>
<p>It is a standard std::ostream instance, so it supports all the insertion operations defined by the STL (operator &lt;&lt;, manipulators, etc.).</p>
<p><a class="el" href="group__system.htm#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors.">sf::err()</a> can be redirected to write to another output, independantly of std::cerr, by using the rdbuf() function provided by the std::ostream class.</p>
<p>Example: </p>
<div class="fragment"><pre class="fragment"> <span class="comment">// Redirect to a file</span>
 std::ofstream file(<span class="stringliteral">&quot;sfml-log.txt&quot;</span>);
 std::streambuf* previous = <a class="code" href="group__system.htm#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors.">sf::err</a>().rdbuf(file.rdbuf());

 <span class="comment">// Redirect to nothing</span>
 <a class="code" href="group__system.htm#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors.">sf::err</a>().rdbuf(NULL);

 <span class="comment">// Restore the original output</span>
 <a class="code" href="group__system.htm#ga7fe7f475639e26334606b5142c29551f" title="Standard stream used by SFML to output warnings and errors.">sf::err</a>().rdbuf(previous);
</pre></div> 
</div>
</div>
<a class="anchor" id="ga2f2620831533dee0ed432ed982342e09"></a><!-- doxytag: member="sf::sleep" ref="ga2f2620831533dee0ed432ed982342e09" args="(Time duration)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SFML_SYSTEM_API sf::sleep </td>
          <td>(</td>
          <td class="paramtype">Time&#160;</td>
          <td class="paramname"><em>duration</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make the current thread sleep for a given duration. </p>
<p>sf::sleep is the best way to block a program or one of its threads, as it doesn't consume any CPU power.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">duration</td><td><a class="el" href="classsf_1_1Time.htm" title="Represents a time value.">Time</a> to sleep </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
