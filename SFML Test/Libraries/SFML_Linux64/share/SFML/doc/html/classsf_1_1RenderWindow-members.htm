<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1RenderWindow.htm">RenderWindow</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">sf::RenderWindow Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#aefd4b1cc8e264598b94bd70aaac5bc99">applyBlendMode</a>(BlendMode mode)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a3ed439c5445e9c7d7ff786ff37005efa">applyCurrentView</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a6f8bc92f07c70ccd57cbf632fe9de0ba">applyShader</a>(const Shader *shader)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#afb8a49305171aad158a27e0dfbb03709">applyTexture</a>(const Texture *texture)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a0b23bd7c287d0fc12b0521b649a0a0e0">applyTransform</a>(const Transform &amp;transform)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a9bd8655d0bac83145bfc329ea7a6d538">capture</a>() const </td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a6bb6f0ba348f2b1e2f46114aeaf60f26">clear</a>(const Color &amp;color=Color(0, 0, 0, 255))</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a99d1e030387b0c26f5995670504fe7b5">close</a>()</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#afc047333937f7cb7fe557aec60239233">convertCoords</a>(const Vector2i &amp;point) const </td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#ae5e7ba65ef73df2778b29b7fdcdb20ee">convertCoords</a>(const Vector2i &amp;point, const View &amp;view) const </td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a21c51afab5ae676c9c8b325d453958d5">create</a>(VideoMode mode, const std::string &amp;title, Uint32 style=Style::Default, const ContextSettings &amp;settings=ContextSettings())</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#acf67483dc21f08d65c8835b3889b41b2">create</a>(WindowHandle handle, const ContextSettings &amp;settings=ContextSettings())</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#adabf839cb103ac96cfc82f781638772a">display</a>()</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a12417a3bcc245c41d957b29583556f39">draw</a>(const Drawable &amp;drawable, const RenderStates &amp;states=RenderStates::Default)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#ab636d7363f6681077361ee274ba89a8d">draw</a>(const Vertex *vertices, unsigned int vertexCount, PrimitiveType type, const RenderStates &amp;states=RenderStates::Default)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a718b1aa6296bf855171699cc18251ced">getDefaultView</a>() const </td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a2e6bc12612ea289afea8268fe37c8678">getPosition</a>() const </td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a5a9d5c15facf25ad4d9b2b30caa0a2db">getSettings</a>() const </td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a2c7ff414be32621a453745cf2a0f8a3e">getSize</a>() const </td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a26368e7162229f8637c34d80ab0f138e">getSystemHandle</a>() const </td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a98f721cc6dc11478922427fedfb2288b">getView</a>() const </td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#aae035b0d45f87a0da2a28a0de6ba1086">getViewport</a>(const View &amp;view) const </td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#af530274b34159d644e509b4b4dc43eb7">initialize</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a5aa9c2b2b0e51d3423c2b66c80253337">isOpen</a>() const </td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1NonCopyable.htm#a2110add170580fdb946f887719da6860">NonCopyable</a>()</td><td><a class="el" href="classsf_1_1NonCopyable.htm">sf::NonCopyable</a></td><td><code> [inline, protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a5bef0040b0fa87bed9fbd459c980d53a">onCreate</a>()</td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td><code> [protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a5c85fe482313562d33ffd24a194b6fef">onResize</a>()</td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td><code> [protected, virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a338e996585faf82e93069858e3b531b7">pollEvent</a>(Event &amp;event)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#ad5a98401113df931ddcd54c080f7aa8e">popGLStates</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a8d1998464ccc54e789aaf990242b47f7">pushGLStates</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a2997c96cbd93cb8ce0aba2ddae35b86f">RenderTarget</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [protected]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a839bbf336bdcafb084dafc3076fc9021">RenderWindow</a>()</td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a828cf38403a246c11ae98a316f271941">RenderWindow</a>(VideoMode mode, const std::string &amp;title, Uint32 style=Style::Default, const ContextSettings &amp;settings=ContextSettings())</td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a25c0af7d515e710b6eebc9c6be952aa5">RenderWindow</a>(WindowHandle handle, const ContextSettings &amp;settings=ContextSettings())</td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#aac7504990d27dada4bfe3c7866920765">resetGLStates</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a17ccf8ece0ce0bf2f1e6698bcfa29731">setActive</a>(bool active=true) const </td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#af4322d315baf93405bf0d5087ad5e784">setFramerateLimit</a>(unsigned int limit)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a63af61e026fba08e3153fd013620bcc0">setIcon</a>(unsigned int width, unsigned int height, const Uint8 *pixels)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#aa45b8f54e29a6f59f1fc7ee66b2fab68">setJoystickThreshold</a>(float threshold)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#aef9f2b14c10ecba8a8df95dd51c5bb73">setKeyRepeatEnabled</a>(bool enabled)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#aad3991c25e0a83afbb4d62febf9b7b14">setMouseCursorVisible</a>(bool visible)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a6c4078bfbf61c29bfc4b4732ce764f17">setPosition</a>(const Vector2i &amp;position)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#ad6513418bb2963347cd1819a1810524d">setSize</a>(const Vector2u size)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a7f419f99a799424376aba838abfbd273">setTitle</a>(const std::string &amp;title)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a59041c4556e0351048f8aff366034f61">setVerticalSyncEnabled</a>(bool enabled)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a063db6dd0a14913504af30e50cb6d946">setView</a>(const View &amp;view)</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a160f7f11a207603d7e99ce606e749703">setVisible</a>(bool visible)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#aaf02ab64fbc1d374eef3696df54137bc">waitEvent</a>(Event &amp;event)</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a5359122166b4dc492c3d25caf08ccfc4">Window</a>()</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a33341e43c1282a698a39c587f14a2b72">Window</a>(VideoMode mode, const std::string &amp;title, Uint32 style=Style::Default, const ContextSettings &amp;settings=ContextSettings())</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#a6d60912633bff9d33cf3ade4e0201de4">Window</a>(WindowHandle handle, const ContextSettings &amp;settings=ContextSettings())</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td><code> [explicit]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderTarget.htm#a9abd1654a99fba46f6887b9c625b9b06">~RenderTarget</a>()</td><td><a class="el" href="classsf_1_1RenderTarget.htm">sf::RenderTarget</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1RenderWindow.htm#a3407e36bfc1752d723140438a825365c">~RenderWindow</a>()</td><td><a class="el" href="classsf_1_1RenderWindow.htm">sf::RenderWindow</a></td><td><code> [virtual]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Window.htm#ac30eb6ea5f5594204944d09d4bd69a97">~Window</a>()</td><td><a class="el" href="classsf_1_1Window.htm">sf::Window</a></td><td><code> [virtual]</code></td></tr>
</table></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
