<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1SoundStream.htm">SoundStream</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">sf::SoundStream Class Reference<div class="ingroups"><a class="el" href="group__audio.htm">Audio module</a></div></div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="sf::SoundStream" --><!-- doxytag: inherits="sf::SoundSource" -->
<p>Abstract base class for streamed audio sources.  
 <a href="classsf_1_1SoundStream.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="SoundStream_8hpp_source.htm">SoundStream.hpp</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for sf::SoundStream:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classsf_1_1SoundStream.png" usemap="#sf::SoundStream_map" alt=""/>
  <map id="sf::SoundStream_map" name="sf::SoundStream_map">
<area href="classsf_1_1SoundSource.htm" title="Base class defining a sound&#39;s properties." alt="sf::SoundSource" shape="rect" coords="0,0,105,24"/>
<area href="classsf_1_1Music.htm" title="Streamed music played from an audio file." alt="sf::Music" shape="rect" coords="0,112,105,136"/>
</map>
 </div></div>

<p><a href="classsf_1_1SoundStream-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm">Chunk</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Structure defining a chunk of audio data to stream.  <a href="structsf_1_1SoundStream_1_1Chunk.htm#details">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03">Status</a> { <br/>
&#160;&#160;<a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03adabb01e8aa85b2f54b344890addf764a">Stopped</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03ac3ca1fcc0394267c9bdbe3dc0a8a7e41">Paused</a>, 
<br/>
&#160;&#160;<a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03af07bdea9f70ef7606dfc9f955beeee18">Playing</a>
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Enumeration of the sound source states.  <a href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03">More...</a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a1fafb9f1ca572d23d7d6a17921860d85">~SoundStream</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a1fafb9f1ca572d23d7d6a17921860d85"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#afdc08b69cab5f243d9324940a85a1144">play</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Start or resume playing the audio stream.  <a href="#afdc08b69cab5f243d9324940a85a1144"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a932ff181e661503cad288b4bb6fe45ca">pause</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pause the audio stream.  <a href="#a932ff181e661503cad288b4bb6fe45ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a16cc6a0404b32e42c4dce184bb94d0f4">stop</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Stop playing the audio stream.  <a href="#a16cc6a0404b32e42c4dce184bb94d0f4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a68dedd0a2c26e6937c80fab3d235edea">getChannelCount</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the number of channels of the stream.  <a href="#a68dedd0a2c26e6937c80fab3d235edea"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#aad1da51c7a752682ca208bf11e3349bb">getSampleRate</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the stream sample rate of the stream.  <a href="#aad1da51c7a752682ca208bf11e3349bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03">Status</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a75f722e7edcfa9952ff0c643966c6858">getStatus</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current status of the stream (stopped, paused, playing)  <a href="#a75f722e7edcfa9952ff0c643966c6858"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#af416a5f84c8750d2acb9821d78bc8646">setPlayingOffset</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> timeOffset)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current playing position of the stream.  <a href="#af416a5f84c8750d2acb9821d78bc8646"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a6070416e1e1a11b5915e9314dd6638f7">getPlayingOffset</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current playing position of the stream.  <a href="#a6070416e1e1a11b5915e9314dd6638f7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a43fade018ffba7e4f847a9f00b353f3d">setLoop</a> (bool loop)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set whether or not the stream should loop after reaching the end.  <a href="#a43fade018ffba7e4f847a9f00b353f3d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#ad8bbf6c0d2ff2d75e19035dea3fd77c3">getLoop</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether or not the stream is in loop mode.  <a href="#ad8bbf6c0d2ff2d75e19035dea3fd77c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a72a13695ed48b7f7b55e7cd4431f4bb6">setPitch</a> (float pitch)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the pitch of the sound.  <a href="#a72a13695ed48b7f7b55e7cd4431f4bb6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a2f192f2b49fb8e2b82f3498d3663fcc2">setVolume</a> (float volume)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the volume of the sound.  <a href="#a2f192f2b49fb8e2b82f3498d3663fcc2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a0480257ea25d986eba6cc3c1a6f8d7c2">setPosition</a> (float x, float y, float z)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the 3D position of the sound in the audio scene.  <a href="#a0480257ea25d986eba6cc3c1a6f8d7c2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a17ba9ed01925395652181a7b2a7d3aef">setPosition</a> (const <a class="el" href="classsf_1_1Vector3.htm">Vector3f</a> &amp;position)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the 3D position of the sound in the audio scene.  <a href="#a17ba9ed01925395652181a7b2a7d3aef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#ac478a8b813faf7dd575635b102081d0d">setRelativeToListener</a> (bool relative)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make the sound's position relative to the listener or absolute.  <a href="#ac478a8b813faf7dd575635b102081d0d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a75bbc2c34addc8b25a14edb908508afe">setMinDistance</a> (float distance)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the minimum distance of the sound.  <a href="#a75bbc2c34addc8b25a14edb908508afe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#aa2adff44cd2f8b4e3c7315d7c2a45626">setAttenuation</a> (float attenuation)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the attenuation factor of the sound.  <a href="#aa2adff44cd2f8b4e3c7315d7c2a45626"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#aedad6aff442aeb6dcd267befd4fdbb59">getPitch</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the pitch of the sound.  <a href="#aedad6aff442aeb6dcd267befd4fdbb59"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#aafb0558fce9cbebfc6828d932cbcce2f">getVolume</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the volume of the sound.  <a href="#aafb0558fce9cbebfc6828d932cbcce2f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsf_1_1Vector3.htm">Vector3f</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a4c3bc60286f488aaf2941ab76476eebc">getPosition</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the 3D position of the sound in the audio scene.  <a href="#a4c3bc60286f488aaf2941ab76476eebc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a5cb9107e1c47f65ab82c4885436061ef">isRelativeToListener</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Tell whether the sound's position is relative to the listener or is absolute.  <a href="#a5cb9107e1c47f65ab82c4885436061ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a3379b9f7a0f0e31ab9a4e5fa1762986e">getMinDistance</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the minimum distance of the sound.  <a href="#a3379b9f7a0f0e31ab9a4e5fa1762986e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#ac5f5ffef8930bb573f43d47cbc779bf6">getAttenuation</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the attenuation factor of the sound.  <a href="#ac5f5ffef8930bb573f43d47cbc779bf6"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a769d08f4c3c6b4340ef3a838329d2e5c">SoundStream</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a769d08f4c3c6b4340ef3a838329d2e5c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a9c351711198ee1aa77c2fefd3ced4d2c">initialize</a> (unsigned int channelCount, unsigned int sampleRate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define the audio stream parameters.  <a href="#a9c351711198ee1aa77c2fefd3ced4d2c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a968ec024a6e45490962c8a1121cb7c5f">onGetData</a> (<a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm">Chunk</a> &amp;data)=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Request a new chunk of audio samples from the stream source.  <a href="#a968ec024a6e45490962c8a1121cb7c5f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundStream.htm#a907036dd2ca7d3af5ead316e54b75997">onSeek</a> (<a class="el" href="classsf_1_1Time.htm">Time</a> timeOffset)=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the current playing position in the stream source.  <a href="#a907036dd2ca7d3af5ead316e54b75997"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1SoundSource.htm#a0223cef4b1c587e6e1e17b4c92c4479c">m_source</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">OpenAL source identifier.  <a href="#a0223cef4b1c587e6e1e17b4c92c4479c"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Abstract base class for streamed audio sources. </p>
<p>Unlike audio buffers (see <a class="el" href="classsf_1_1SoundBuffer.htm" title="Storage for audio samples defining a sound.">sf::SoundBuffer</a>), audio streams are never completely loaded in memory.</p>
<p>Instead, the audio data is acquired continuously while the stream is playing. This behaviour allows to play a sound with no loading delay, and keeps the memory consumption very low.</p>
<p><a class="el" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a> sources that need to be streamed are usually big files (compressed audio musics that would eat hundreds of MB in memory) or files that would take a lot of time to be received (sounds played over the network).</p>
<p><a class="el" href="classsf_1_1SoundStream.htm" title="Abstract base class for streamed audio sources.">sf::SoundStream</a> is a base class that doesn't care about the stream source, which is left to the derived class. SFML provides a built-in specialization for big files (see <a class="el" href="classsf_1_1Music.htm" title="Streamed music played from an audio file.">sf::Music</a>). No network stream source is provided, but you can write your own by combining this class with the network module.</p>
<p>A derived class has to override two virtual functions: </p>
<ul>
<li>onGetData fills a new chunk of audio data to be played </li>
<li>onSeek changes the current playing position in the source</li>
</ul>
<p>It is important to note that each <a class="el" href="classsf_1_1SoundStream.htm" title="Abstract base class for streamed audio sources.">SoundStream</a> is played in its own separate thread, so that the streaming loop doesn't block the rest of the program. In particular, the OnGetData and OnSeek virtual functions may sometimes be called from this separate thread. It is important to keep this in mind, because you may have to take care of synchronization issues if you share data between threads.</p>
<p>Usage example: </p>
<div class="fragment"><pre class="fragment"> <span class="keyword">class </span>CustomStream : <span class="keyword">public</span> sf::<a class="code" href="classsf_1_1SoundStream.htm#a769d08f4c3c6b4340ef3a838329d2e5c" title="Default constructor.">SoundStream</a>
 {
 <span class="keyword">public</span> :

     <span class="keywordtype">bool</span> open(<span class="keyword">const</span> std::string&amp; location)
     {
         <span class="comment">// Open the source and get audio settings</span>
         ...
         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> channelCount = ...;
         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sampleRate = ...;

         <span class="comment">// Initialize the stream -- important!</span>
         <a class="code" href="classsf_1_1SoundStream.htm#a9c351711198ee1aa77c2fefd3ced4d2c" title="Define the audio stream parameters.">initialize</a>(channelCount, sampleRate);
     }

 <span class="keyword">private</span> :

     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundStream.htm#a968ec024a6e45490962c8a1121cb7c5f" title="Request a new chunk of audio samples from the stream source.">onGetData</a>(Chunk&amp; data)
     {
         <span class="comment">// Fill the chunk with audio data from the stream source</span>
         data.samples = ...;
         data.sampleCount = ...;

         <span class="comment">// Return true to continue playing</span>
         <span class="keywordflow">return</span> <span class="keyword">true</span>;
     }

     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsf_1_1SoundStream.htm#a907036dd2ca7d3af5ead316e54b75997" title="Change the current playing position in the stream source.">onSeek</a>(Uint32 timeOffset)
     {
         <span class="comment">// Change the current position in the stream source</span>
         ...
     }
 }

 <span class="comment">// Usage</span>
 CustomStream stream;
 stream.open(<span class="stringliteral">&quot;path/to/stream&quot;</span>);
 stream.play();
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1Music.htm" title="Streamed music played from an audio file.">sf::Music</a> </dd></dl>

<p>Definition at line <a class="el" href="SoundStream_8hpp_source.htm#l00044">44</a> of file <a class="el" href="SoundStream_8hpp_source.htm">SoundStream.hpp</a>.</p>
</div><hr/><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="ac43af72c98c077500b239bc75b812f03"></a><!-- doxytag: member="sf::SoundStream::Status" ref="ac43af72c98c077500b239bc75b812f03" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03">sf::SoundSource::Status</a><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enumeration of the sound source states. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="ac43af72c98c077500b239bc75b812f03adabb01e8aa85b2f54b344890addf764a"></a><!-- doxytag: member="Stopped" ref="ac43af72c98c077500b239bc75b812f03adabb01e8aa85b2f54b344890addf764a" args="" -->Stopped</em>&nbsp;</td><td>
<p><a class="el" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a> is not playing. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ac43af72c98c077500b239bc75b812f03ac3ca1fcc0394267c9bdbe3dc0a8a7e41"></a><!-- doxytag: member="Paused" ref="ac43af72c98c077500b239bc75b812f03ac3ca1fcc0394267c9bdbe3dc0a8a7e41" args="" -->Paused</em>&nbsp;</td><td>
<p><a class="el" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a> is paused. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="ac43af72c98c077500b239bc75b812f03af07bdea9f70ef7606dfc9f955beeee18"></a><!-- doxytag: member="Playing" ref="ac43af72c98c077500b239bc75b812f03af07bdea9f70ef7606dfc9f955beeee18" args="" -->Playing</em>&nbsp;</td><td>
<p><a class="el" href="classsf_1_1Sound.htm" title="Regular sound that can be played in the audio environment.">Sound</a> is playing. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="SoundSource_8hpp_source.htm#l00049">49</a> of file <a class="el" href="SoundSource_8hpp_source.htm">SoundSource.hpp</a>.</p>

</div>
</div>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1fafb9f1ca572d23d7d6a17921860d85"></a><!-- doxytag: member="sf::SoundStream::~SoundStream" ref="a1fafb9f1ca572d23d7d6a17921860d85" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classsf_1_1SoundStream.htm#a1fafb9f1ca572d23d7d6a17921860d85">sf::SoundStream::~SoundStream</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<a class="anchor" id="a769d08f4c3c6b4340ef3a838329d2e5c"></a><!-- doxytag: member="sf::SoundStream::SoundStream" ref="a769d08f4c3c6b4340ef3a838329d2e5c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1SoundStream.htm#a769d08f4c3c6b4340ef3a838329d2e5c">sf::SoundStream::SoundStream</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>
<p>This constructor is only meant to be called by derived classes. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ac5f5ffef8930bb573f43d47cbc779bf6"></a><!-- doxytag: member="sf::SoundStream::getAttenuation" ref="ac5f5ffef8930bb573f43d47cbc779bf6" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classsf_1_1SoundSource.htm#ac5f5ffef8930bb573f43d47cbc779bf6">sf::SoundSource::getAttenuation</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the attenuation factor of the sound. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Attenuation factor of the sound</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#aa2adff44cd2f8b4e3c7315d7c2a45626" title="Set the attenuation factor of the sound.">setAttenuation</a>, <a class="el" href="classsf_1_1SoundSource.htm#a3379b9f7a0f0e31ab9a4e5fa1762986e" title="Get the minimum distance of the sound.">getMinDistance</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a68dedd0a2c26e6937c80fab3d235edea"></a><!-- doxytag: member="sf::SoundStream::getChannelCount" ref="a68dedd0a2c26e6937c80fab3d235edea" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classsf_1_1SoundStream.htm#a68dedd0a2c26e6937c80fab3d235edea">sf::SoundStream::getChannelCount</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the number of channels of the stream. </p>
<p>1 channel means a mono sound, 2 means stereo, etc.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Number of channels </dd></dl>

</div>
</div>
<a class="anchor" id="ad8bbf6c0d2ff2d75e19035dea3fd77c3"></a><!-- doxytag: member="sf::SoundStream::getLoop" ref="ad8bbf6c0d2ff2d75e19035dea3fd77c3" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1SoundStream.htm#ad8bbf6c0d2ff2d75e19035dea3fd77c3">sf::SoundStream::getLoop</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Tell whether or not the stream is in loop mode. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the stream is looping, false otherwise</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#a43fade018ffba7e4f847a9f00b353f3d" title="Set whether or not the stream should loop after reaching the end.">setLoop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3379b9f7a0f0e31ab9a4e5fa1762986e"></a><!-- doxytag: member="sf::SoundStream::getMinDistance" ref="a3379b9f7a0f0e31ab9a4e5fa1762986e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classsf_1_1SoundSource.htm#a3379b9f7a0f0e31ab9a4e5fa1762986e">sf::SoundSource::getMinDistance</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the minimum distance of the sound. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Minimum distance of the sound</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a75bbc2c34addc8b25a14edb908508afe" title="Set the minimum distance of the sound.">setMinDistance</a>, <a class="el" href="classsf_1_1SoundSource.htm#ac5f5ffef8930bb573f43d47cbc779bf6" title="Get the attenuation factor of the sound.">getAttenuation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aedad6aff442aeb6dcd267befd4fdbb59"></a><!-- doxytag: member="sf::SoundStream::getPitch" ref="aedad6aff442aeb6dcd267befd4fdbb59" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classsf_1_1SoundSource.htm#aedad6aff442aeb6dcd267befd4fdbb59">sf::SoundSource::getPitch</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the pitch of the sound. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pitch of the sound</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a72a13695ed48b7f7b55e7cd4431f4bb6" title="Set the pitch of the sound.">setPitch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6070416e1e1a11b5915e9314dd6638f7"></a><!-- doxytag: member="sf::SoundStream::getPlayingOffset" ref="a6070416e1e1a11b5915e9314dd6638f7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Time.htm">Time</a> <a class="el" href="classsf_1_1SoundStream.htm#a6070416e1e1a11b5915e9314dd6638f7">sf::SoundStream::getPlayingOffset</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the current playing position of the stream. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current playing position, from the beginning of the stream</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#af416a5f84c8750d2acb9821d78bc8646" title="Change the current playing position of the stream.">setPlayingOffset</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4c3bc60286f488aaf2941ab76476eebc"></a><!-- doxytag: member="sf::SoundStream::getPosition" ref="a4c3bc60286f488aaf2941ab76476eebc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1Vector3.htm">Vector3f</a> <a class="el" href="classsf_1_1SoundSource.htm#a4c3bc60286f488aaf2941ab76476eebc">sf::SoundSource::getPosition</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the 3D position of the sound in the audio scene. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Position of the sound</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a0480257ea25d986eba6cc3c1a6f8d7c2" title="Set the 3D position of the sound in the audio scene.">setPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aad1da51c7a752682ca208bf11e3349bb"></a><!-- doxytag: member="sf::SoundStream::getSampleRate" ref="aad1da51c7a752682ca208bf11e3349bb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classsf_1_1SoundStream.htm#aad1da51c7a752682ca208bf11e3349bb">sf::SoundStream::getSampleRate</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the stream sample rate of the stream. </p>
<p>The sample rate is the number of audio samples played per second. The higher, the better the quality.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Sample rate, in number of samples per second </dd></dl>

</div>
</div>
<a class="anchor" id="a75f722e7edcfa9952ff0c643966c6858"></a><!-- doxytag: member="sf::SoundStream::getStatus" ref="a75f722e7edcfa9952ff0c643966c6858" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1SoundSource.htm#ac43af72c98c077500b239bc75b812f03">Status</a> <a class="el" href="classsf_1_1SoundStream.htm#a75f722e7edcfa9952ff0c643966c6858">sf::SoundStream::getStatus</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the current status of the stream (stopped, paused, playing) </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Current status </dd></dl>

<p>Reimplemented from <a class="el" href="classsf_1_1SoundSource.htm#ad1995d2888773f47f99b671747609dbb">sf::SoundSource</a>.</p>

</div>
</div>
<a class="anchor" id="aafb0558fce9cbebfc6828d932cbcce2f"></a><!-- doxytag: member="sf::SoundStream::getVolume" ref="aafb0558fce9cbebfc6828d932cbcce2f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float <a class="el" href="classsf_1_1SoundSource.htm#aafb0558fce9cbebfc6828d932cbcce2f">sf::SoundSource::getVolume</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the volume of the sound. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Volume of the sound, in the range [0, 100]</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a2f192f2b49fb8e2b82f3498d3663fcc2" title="Set the volume of the sound.">setVolume</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a9c351711198ee1aa77c2fefd3ced4d2c"></a><!-- doxytag: member="sf::SoundStream::initialize" ref="a9c351711198ee1aa77c2fefd3ced4d2c" args="(unsigned int channelCount, unsigned int sampleRate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundStream.htm#a9c351711198ee1aa77c2fefd3ced4d2c">sf::SoundStream::initialize</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>channelCount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>sampleRate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Define the audio stream parameters. </p>
<p>This function must be called by derived classes as soon as they know the audio settings of the stream to play. Any attempt to manipulate the stream (<a class="el" href="classsf_1_1SoundStream.htm#afdc08b69cab5f243d9324940a85a1144" title="Start or resume playing the audio stream.">play()</a>, ...) before calling this function will fail. It can be called multiple times if the settings of the audio stream change, but only when the stream is stopped.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">channelCount</td><td>Number of channels of the stream </td></tr>
    <tr><td class="paramname">sampleRate</td><td>Sample rate, in samples per second </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5cb9107e1c47f65ab82c4885436061ef"></a><!-- doxytag: member="sf::SoundStream::isRelativeToListener" ref="a5cb9107e1c47f65ab82c4885436061ef" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsf_1_1SoundSource.htm#a5cb9107e1c47f65ab82c4885436061ef">sf::SoundSource::isRelativeToListener</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Tell whether the sound's position is relative to the listener or is absolute. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if the position is relative, false if it's absolute</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#ac478a8b813faf7dd575635b102081d0d" title="Make the sound&#39;s position relative to the listener or absolute.">setRelativeToListener</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a968ec024a6e45490962c8a1121cb7c5f"></a><!-- doxytag: member="sf::SoundStream::onGetData" ref="a968ec024a6e45490962c8a1121cb7c5f" args="(Chunk &amp;data)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="classsf_1_1SoundStream.htm#a968ec024a6e45490962c8a1121cb7c5f">sf::SoundStream::onGetData</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm">Chunk</a> &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Request a new chunk of audio samples from the stream source. </p>
<p>This function must be overriden by derived classes to provide the audio samples to play. It is called continuously by the streaming loop, in a separate thread. The source can choose to stop the streaming loop at any time, by returning false to the caller.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td><a class="el" href="structsf_1_1SoundStream_1_1Chunk.htm" title="Structure defining a chunk of audio data to stream.">Chunk</a> of data to fill</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True to continue playback, false to stop </dd></dl>

<p>Implemented in <a class="el" href="classsf_1_1Music.htm#aca1bcb4e5d56a854133e74bd86374463">sf::Music</a>.</p>

</div>
</div>
<a class="anchor" id="a907036dd2ca7d3af5ead316e54b75997"></a><!-- doxytag: member="sf::SoundStream::onSeek" ref="a907036dd2ca7d3af5ead316e54b75997" args="(Time timeOffset)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classsf_1_1SoundStream.htm#a907036dd2ca7d3af5ead316e54b75997">sf::SoundStream::onSeek</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeOffset</em></td><td>)</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the current playing position in the stream source. </p>
<p>This function must be overriden by derived classes to allow random seeking into the stream source.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">timeOffset</td><td>New playing position, relative to the beginning of the stream </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classsf_1_1Music.htm#a15119cc0419c16bb334fa0698699c02e">sf::Music</a>.</p>

</div>
</div>
<a class="anchor" id="a932ff181e661503cad288b4bb6fe45ca"></a><!-- doxytag: member="sf::SoundStream::pause" ref="a932ff181e661503cad288b4bb6fe45ca" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundStream.htm#a932ff181e661503cad288b4bb6fe45ca">sf::SoundStream::pause</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pause the audio stream. </p>
<p>This function pauses the stream if it was playing, otherwise (stream already paused or stopped) it has no effect.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#afdc08b69cab5f243d9324940a85a1144" title="Start or resume playing the audio stream.">play</a>, <a class="el" href="classsf_1_1SoundStream.htm#a16cc6a0404b32e42c4dce184bb94d0f4" title="Stop playing the audio stream.">stop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="afdc08b69cab5f243d9324940a85a1144"></a><!-- doxytag: member="sf::SoundStream::play" ref="afdc08b69cab5f243d9324940a85a1144" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundStream.htm#afdc08b69cab5f243d9324940a85a1144">sf::SoundStream::play</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start or resume playing the audio stream. </p>
<p>This function starts the stream if it was stopped, resumes it if it was paused, and restarts it from beginning if it was it already playing. This function uses its own thread so that it doesn't block the rest of the program while the stream is played.</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#a932ff181e661503cad288b4bb6fe45ca" title="Pause the audio stream.">pause</a>, <a class="el" href="classsf_1_1SoundStream.htm#a16cc6a0404b32e42c4dce184bb94d0f4" title="Stop playing the audio stream.">stop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa2adff44cd2f8b4e3c7315d7c2a45626"></a><!-- doxytag: member="sf::SoundStream::setAttenuation" ref="aa2adff44cd2f8b4e3c7315d7c2a45626" args="(float attenuation)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#aa2adff44cd2f8b4e3c7315d7c2a45626">sf::SoundSource::setAttenuation</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>attenuation</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the attenuation factor of the sound. </p>
<p>The attenuation is a multiplicative factor which makes the sound more or less loud according to its distance from the listener. An attenuation of 0 will produce a non-attenuated sound, i.e. its volume will always be the same whether it is heard from near or from far. On the other hand, an attenuation value such as 100 will make the sound fade out very quickly as it gets further from the listener. The default value of the attenuation is 1.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">attenuation</td><td>New attenuation factor of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#ac5f5ffef8930bb573f43d47cbc779bf6" title="Get the attenuation factor of the sound.">getAttenuation</a>, <a class="el" href="classsf_1_1SoundSource.htm#a75bbc2c34addc8b25a14edb908508afe" title="Set the minimum distance of the sound.">setMinDistance</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a43fade018ffba7e4f847a9f00b353f3d"></a><!-- doxytag: member="sf::SoundStream::setLoop" ref="a43fade018ffba7e4f847a9f00b353f3d" args="(bool loop)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundStream.htm#a43fade018ffba7e4f847a9f00b353f3d">sf::SoundStream::setLoop</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>loop</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set whether or not the stream should loop after reaching the end. </p>
<p>If set, the stream will restart from beginning after reaching the end and so on, until it is stopped or setLoop(false) is called. The default looping state for streams is false.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">loop</td><td>True to play in loop, false to play once</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#ad8bbf6c0d2ff2d75e19035dea3fd77c3" title="Tell whether or not the stream is in loop mode.">getLoop</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a75bbc2c34addc8b25a14edb908508afe"></a><!-- doxytag: member="sf::SoundStream::setMinDistance" ref="a75bbc2c34addc8b25a14edb908508afe" args="(float distance)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#a75bbc2c34addc8b25a14edb908508afe">sf::SoundSource::setMinDistance</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>distance</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the minimum distance of the sound. </p>
<p>The "minimum distance" of a sound is the maximum distance at which it is heard at its maximum volume. Further than the minimum distance, it will start to fade out according to its attenuation factor. A value of 0 ("inside the head
        of the listener") is an invalid value and is forbidden. The default value of the minimum distance is 1.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">distance</td><td>New minimum distance of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a3379b9f7a0f0e31ab9a4e5fa1762986e" title="Get the minimum distance of the sound.">getMinDistance</a>, <a class="el" href="classsf_1_1SoundSource.htm#aa2adff44cd2f8b4e3c7315d7c2a45626" title="Set the attenuation factor of the sound.">setAttenuation</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a72a13695ed48b7f7b55e7cd4431f4bb6"></a><!-- doxytag: member="sf::SoundStream::setPitch" ref="a72a13695ed48b7f7b55e7cd4431f4bb6" args="(float pitch)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#a72a13695ed48b7f7b55e7cd4431f4bb6">sf::SoundSource::setPitch</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>pitch</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the pitch of the sound. </p>
<p>The pitch represents the perceived fundamental frequency of a sound; thus you can make a sound more acute or grave by changing its pitch. A side effect of changing the pitch is to modify the playing speed of the sound as well. The default value for the pitch is 1.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pitch</td><td>New pitch to apply to the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#aedad6aff442aeb6dcd267befd4fdbb59" title="Get the pitch of the sound.">getPitch</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af416a5f84c8750d2acb9821d78bc8646"></a><!-- doxytag: member="sf::SoundStream::setPlayingOffset" ref="af416a5f84c8750d2acb9821d78bc8646" args="(Time timeOffset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundStream.htm#af416a5f84c8750d2acb9821d78bc8646">sf::SoundStream::setPlayingOffset</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsf_1_1Time.htm">Time</a>&#160;</td>
          <td class="paramname"><em>timeOffset</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the current playing position of the stream. </p>
<p>The playing position can be changed when the stream is either paused or playing.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">timeOffset</td><td>New playing position, from the beginning of the stream</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#a6070416e1e1a11b5915e9314dd6638f7" title="Get the current playing position of the stream.">getPlayingOffset</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0480257ea25d986eba6cc3c1a6f8d7c2"></a><!-- doxytag: member="sf::SoundStream::setPosition" ref="a0480257ea25d986eba6cc3c1a6f8d7c2" args="(float x, float y, float z)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#a0480257ea25d986eba6cc3c1a6f8d7c2">sf::SoundSource::setPosition</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the 3D position of the sound in the audio scene. </p>
<p>Only sounds with one channel (mono sounds) can be spatialized. The default position of a sound is (0, 0, 0).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>X coordinate of the position of the sound in the scene </td></tr>
    <tr><td class="paramname">y</td><td>Y coordinate of the position of the sound in the scene </td></tr>
    <tr><td class="paramname">z</td><td>Z coordinate of the position of the sound in the scene</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a4c3bc60286f488aaf2941ab76476eebc" title="Get the 3D position of the sound in the audio scene.">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a17ba9ed01925395652181a7b2a7d3aef"></a><!-- doxytag: member="sf::SoundStream::setPosition" ref="a17ba9ed01925395652181a7b2a7d3aef" args="(const Vector3f &amp;position)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#a0480257ea25d986eba6cc3c1a6f8d7c2">sf::SoundSource::setPosition</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Vector3.htm">Vector3f</a> &amp;&#160;</td>
          <td class="paramname"><em>position</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the 3D position of the sound in the audio scene. </p>
<p>Only sounds with one channel (mono sounds) can be spatialized. The default position of a sound is (0, 0, 0).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">position</td><td>Position of the sound in the scene</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a4c3bc60286f488aaf2941ab76476eebc" title="Get the 3D position of the sound in the audio scene.">getPosition</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac478a8b813faf7dd575635b102081d0d"></a><!-- doxytag: member="sf::SoundStream::setRelativeToListener" ref="ac478a8b813faf7dd575635b102081d0d" args="(bool relative)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#ac478a8b813faf7dd575635b102081d0d">sf::SoundSource::setRelativeToListener</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>relative</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make the sound's position relative to the listener or absolute. </p>
<p>Making a sound relative to the listener will ensure that it will always be played the same way regardless the position of the listener. This can be useful for non-spatialized sounds, sounds that are produced by the listener, or sounds attached to it. The default value is false (position is absolute).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">relative</td><td>True to set the position relative, false to set it absolute</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#a5cb9107e1c47f65ab82c4885436061ef" title="Tell whether the sound&#39;s position is relative to the listener or is absolute.">isRelativeToListener</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a2f192f2b49fb8e2b82f3498d3663fcc2"></a><!-- doxytag: member="sf::SoundStream::setVolume" ref="a2f192f2b49fb8e2b82f3498d3663fcc2" args="(float volume)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundSource.htm#a2f192f2b49fb8e2b82f3498d3663fcc2">sf::SoundSource::setVolume</a> </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>volume</em></td><td>)</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the volume of the sound. </p>
<p>The volume is a value between 0 (mute) and 100 (full volume). The default value for the volume is 100.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">volume</td><td>Volume of the sound</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundSource.htm#aafb0558fce9cbebfc6828d932cbcce2f" title="Get the volume of the sound.">getVolume</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a16cc6a0404b32e42c4dce184bb94d0f4"></a><!-- doxytag: member="sf::SoundStream::stop" ref="a16cc6a0404b32e42c4dce184bb94d0f4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsf_1_1SoundStream.htm#a16cc6a0404b32e42c4dce184bb94d0f4">sf::SoundStream::stop</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop playing the audio stream. </p>
<p>This function stops the stream if it was playing or paused, and does nothing if it was already stopped. It also resets the playing position (unlike <a class="el" href="classsf_1_1SoundStream.htm#a932ff181e661503cad288b4bb6fe45ca" title="Pause the audio stream.">pause()</a>).</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="classsf_1_1SoundStream.htm#afdc08b69cab5f243d9324940a85a1144" title="Start or resume playing the audio stream.">play</a>, <a class="el" href="classsf_1_1SoundStream.htm#a932ff181e661503cad288b4bb6fe45ca" title="Pause the audio stream.">pause</a> </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a0223cef4b1c587e6e1e17b4c92c4479c"></a><!-- doxytag: member="sf::SoundStream::m_source" ref="a0223cef4b1c587e6e1e17b4c92c4479c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classsf_1_1SoundSource.htm#a0223cef4b1c587e6e1e17b4c92c4479c">sf::SoundSource::m_source</a><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>OpenAL source identifier. </p>

<p>Definition at line <a class="el" href="SoundSource_8hpp_source.htm#l00263">263</a> of file <a class="el" href="SoundSource_8hpp_source.htm">SoundSource.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="SoundStream_8hpp_source.htm">SoundStream.hpp</a></li>
</ul>
</div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
