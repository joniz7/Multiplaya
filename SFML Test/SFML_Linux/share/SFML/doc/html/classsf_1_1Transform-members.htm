<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.7.6.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>sf</b>      </li>
      <li class="navelem"><a class="el" href="classsf_1_1Transform.htm">Transform</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">sf::Transform Member List</div>  </div>
</div><!--header-->
<div class="contents">
This is the complete list of members for <a class="el" href="classsf_1_1Transform.htm">sf::Transform</a>, including all inherited members.<table>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#acd978f60421a0f839bb9a8263e8877ff">combine</a>(const Transform &amp;transform)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ab1c033198b0aae8cdb9daa3d3bef3fc1">getInverse</a>() const </td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ae4c1969c47533e2b01deb526ff73b37f">getMatrix</a>() const </td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#aa4eb1eecbcb9979d76e2543b337fdb13">Identity</a></td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td><code> [static]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a423ade8d6aa1378c695f8eb4bfce8981">operator*</a>(const Transform &amp;left, const Transform &amp;right)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ac729169ec3036f3f3f3024c98efd041d">operator*</a>(const Transform &amp;left, const Vector2f &amp;right)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a45a9de70a463117f851f1264a6f558ba">operator*=</a>(Transform &amp;left, const Transform &amp;right)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td><code> [related]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a3e548c3c9e3fb9d4bd43cf852669e555">rotate</a>(float angle)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#af0b7cc3fed36d0fa22d5d331a779eee2">rotate</a>(float angle, float centerX, float centerY)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ad2a2520ad81724079d109d4a986f9902">rotate</a>(float angle, const Vector2f &amp;center)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a3f46af807f69d74120fb836334268671">scale</a>(float scaleX, float scaleY)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a6eaeedd35e289cb17f9bf7f24dc28daa">scale</a>(float scaleX, float scaleY, float centerX, float centerY)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a3d57622a7ab309925c9d9887c99cc720">scale</a>(const Vector2f &amp;factors)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a9198da375173127901f3095e0165ee1b">scale</a>(const Vector2f &amp;factors, const Vector2f &amp;center)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ac32de51bd0b9f3d52fbe0838225ee83b">Transform</a>()</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a78c48677712fcf41122d02f1301d71a3">Transform</a>(float a00, float a01, float a02, float a10, float a11, float a12, float a20, float a21, float a22)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#af20913c6a27087c26192c116397ab40a">transformPoint</a>(float x, float y) const </td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ac322cd8f6d606598d1aacc4d1d160ad6">transformPoint</a>(const Vector2f &amp;point) const </td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a345112559981d988e92b54b7976fca8a">transformRect</a>(const FloatRect &amp;rectangle) const </td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#ab54f6c8070cc05e2afcb3145fbf4395a">translate</a>(float x, float y)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classsf_1_1Transform.htm#a452ff6e32d5120fa8c132c1bf0ad83cd">translate</a>(const Vector2f &amp;offset)</td><td><a class="el" href="classsf_1_1Transform.htm">sf::Transform</a></td><td></td></tr>
</table></div><!-- contents -->

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
